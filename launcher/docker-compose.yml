version: '3.8'

services:
  # NATS Server
  nats:
    image: nats:2.9.21-alpine
    ports:
      - "4222:4222"
      - "8222:8222"

  # PostgreSQL Database - CONFIGURACIÓN CORREGIDA
  postgresdb:
    container_name: docvisualDb
    image: postgres:latest
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=docvisualadmin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-docvisual123456}
      - POSTGRES_DB=maindb
    # REMOVIDO: PGOPTIONS con checkpoint_timeout

  # Los demás servicios permanecen igual...
  auth-ms:
    depends_on:
      - postgresdb
      - nats
    restart: always
    build: ./auth-ms
    volumes:
      - ./auth-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      PORT: 3001
      NATS_SERVERS: nats://nats:4222
      DATABASE_URL: postgresql://docvisualadmin:${POSTGRES_PASSWORD:-docvisual123456}@postgresdb:5432/maindb?schema=auth_shema
      JWT_SECRET: ${JWT_SECRET:-EstoEsUnStringSeguroParaJWT2024}

  user-ms:
    depends_on:
      - postgresdb
      - nats
    restart: always
    build: ./user-ms
    volumes:
      - ./user-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      PORT: 3002
      NATS_SERVERS: nats://nats:4222
      DATABASE_URL: postgresql://docvisualadmin:${POSTGRES_PASSWORD:-docvisual123456}@postgresdb:5432/maindb?schema=user_shema

  partner-ms:
    depends_on:
      - postgresdb
      - nats
    restart: always
    build: ./partner-ms
    volumes:
      - ./partner-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      PORT: 3003
      NATS_SERVERS: nats://nats:4222
      DATABASE_URL: postgresql://docvisualadmin:${POSTGRES_PASSWORD:-docvisual123456}@postgresdb:5432/maindb?schema=partner_shema

  emails-ms:
    depends_on:
      - postgresdb
      - nats
    restart: always
    build: ./Emails-ms
    volumes:
      - ./Emails-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      PORT: 3004
      JWT_SECRET: ${JWT_SECRET:-EstoEsUnStringSeguroParaJWT2024}
      NATS_SERVERS: nats://nats:4222
      PASSWORD_EMAIL: ${PASSWORD_EMAIL}
      EMAIL: ${EMAIL}
      DATABASE_URL: postgresql://docvisualadmin:${POSTGRES_PASSWORD:-docvisual123456}@postgresdb:5432/maindb?schema=email_shema

  reservations-ms:
    depends_on:
      - postgresdb
      - nats
    restart: always
    build: ./reservations-ms
    volumes:
      - ./reservations-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      PORT: 3005
      NATS_SERVERS: nats://nats:4222
      DATABASE_URL: postgresql://docvisualadmin:${POSTGRES_PASSWORD:-docvisual123456}@postgresdb:5432/maindb?schema=reservations_shema
      JWT_SECRET: ${JWT_SECRET:-EstoEsUnStringSeguroParaJWT2024}

  gateway:
    depends_on:
      - postgresdb
      - nats
    restart: always
    build: ./gateway
    ports:
      - "3000:3000"
    volumes:
      - ./gateway/src:/usr/src/app/src
      - ./uploads:/usr/src/app/uploads
      - ./private:/usr/src/app/private/uploads
    command: npm run start:dev
    environment:
      NATS_SERVERS: nats://nats:4222
      PORT: 3000
      UPLOAD_PATH: /usr/src/app/uploads
      UPLOAD_PRIVATE_PATH: /usr/src/app/private/uploads

  frontend:
    restart: always
    build:
      context: ./frontend
      args:
        VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY:-tu_api_key}
        URL_FILES: http://localhost:3000
        VITE_SERVER: http://localhost:3000
        BASE_URL: "/"
    volumes:
      - ./frontend/src:/usr/src/app/src
    ports:
      - "8080:80"

volumes:
  pgdata:
