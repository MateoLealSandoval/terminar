diff --git a/launcher/Emails-ms/package-lock.json b/launcher/Emails-ms/package-lock.json
index 6039d37..a0433fb 100644
--- a/launcher/Emails-ms/package-lock.json
+++ b/launcher/Emails-ms/package-lock.json
@@ -16,9 +16,7 @@
         "@nestjs/mapped-types": "*",
         "@nestjs/microservices": "^11.1.0",
         "@nestjs/platform-express": "^11.0.1",
-        "@nestjs/schedule": "^6.0.0",
         "@prisma/client": "^6.6.0",
-        "@types/cron": "^2.0.1",
         "class-transformer": "^0.5.1",
         "class-validator": "^0.14.1",
         "dotenv": "^16.5.0",
@@ -2789,19 +2787,6 @@
         "@nestjs/core": "^11.0.0"
       }
     },
-    "node_modules/@nestjs/schedule": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/@nestjs/schedule/-/schedule-6.0.0.tgz",
-      "integrity": "sha512-aQySMw6tw2nhitELXd3EiRacQRgzUKD9mFcUZVOJ7jPLqIBvXOyvRWLsK9SdurGA+jjziAlMef7iB5ZEFFoQpw==",
-      "license": "MIT",
-      "dependencies": {
-        "cron": "4.3.0"
-      },
-      "peerDependencies": {
-        "@nestjs/common": "^10.0.0 || ^11.0.0",
-        "@nestjs/core": "^10.0.0 || ^11.0.0"
-      }
-    },
     "node_modules/@nestjs/schematics": {
       "version": "11.0.5",
       "resolved": "https://registry.npmjs.org/@nestjs/schematics/-/schematics-11.0.5.tgz",
@@ -3574,16 +3559,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/cron": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/@types/cron/-/cron-2.0.1.tgz",
-      "integrity": "sha512-WHa/1rtNtD2Q/H0+YTTZoty+/5rcE66iAFX2IY+JuUoOACsevYyFkSYu/2vdw+G5LrmO7Lxowrqm0av4k3qWNQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/luxon": "*",
-        "@types/node": "*"
-      }
-    },
     "node_modules/@types/ejs": {
       "version": "3.1.5",
       "resolved": "https://registry.npmjs.org/@types/ejs/-/ejs-3.1.5.tgz",
@@ -3723,12 +3698,6 @@
         "@types/node": "*"
       }
     },
-    "node_modules/@types/luxon": {
-      "version": "3.7.1",
-      "resolved": "https://registry.npmjs.org/@types/luxon/-/luxon-3.7.1.tgz",
-      "integrity": "sha512-H3iskjFIAn5SlJU7OuxUmTEpebK6TKB8rxZShDslBMZJ5u9S//KM1sbdAisiSrqwLQncVjnpi2OK2J51h+4lsg==",
-      "license": "MIT"
-    },
     "node_modules/@types/methods": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/@types/methods/-/methods-1.1.4.tgz",
@@ -6340,25 +6309,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/cron": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/cron/-/cron-4.3.0.tgz",
-      "integrity": "sha512-ciiYNLfSlF9MrDqnbMdRWFiA6oizSF7kA1osPP9lRzNu0Uu+AWog1UKy7SkckiDY2irrNjeO6qLyKnXC8oxmrw==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/luxon": "~3.6.0",
-        "luxon": "~3.6.0"
-      },
-      "engines": {
-        "node": ">=18.x"
-      }
-    },
-    "node_modules/cron/node_modules/@types/luxon": {
-      "version": "3.6.2",
-      "resolved": "https://registry.npmjs.org/@types/luxon/-/luxon-3.6.2.tgz",
-      "integrity": "sha512-R/BdP7OxEMc44l2Ex5lSXHoIXTB2JLNa3y2QISIbr58U/YcsffyQrYW//hZSdrfxrjRZj3GcUoxMPGdO8gSYuw==",
-      "license": "MIT"
-    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
@@ -10147,15 +10097,6 @@
         "yallist": "^3.0.2"
       }
     },
-    "node_modules/luxon": {
-      "version": "3.6.1",
-      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.6.1.tgz",
-      "integrity": "sha512-tJLxrKJhO2ukZ5z0gyjY1zPh3Rh88Ej9P7jNrZiHMUXHae1yvI2imgOZtL1TO8TW6biMMKfTtAOoEJANgtWBMQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      }
-    },
     "node_modules/magic-string": {
       "version": "0.30.17",
       "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
diff --git a/launcher/Emails-ms/package.json b/launcher/Emails-ms/package.json
index 5385e47..d89149f 100644
--- a/launcher/Emails-ms/package.json
+++ b/launcher/Emails-ms/package.json
@@ -28,9 +28,7 @@
     "@nestjs/mapped-types": "*",
     "@nestjs/microservices": "^11.1.0",
     "@nestjs/platform-express": "^11.0.1",
-    "@nestjs/schedule": "^6.0.0",
     "@prisma/client": "^6.6.0",
-    "@types/cron": "^2.0.1",
     "class-transformer": "^0.5.1",
     "class-validator": "^0.14.1",
     "dotenv": "^16.5.0",
diff --git a/launcher/Emails-ms/src/app.module.ts b/launcher/Emails-ms/src/app.module.ts
index eca30b2..3481506 100644
--- a/launcher/Emails-ms/src/app.module.ts
+++ b/launcher/Emails-ms/src/app.module.ts
@@ -1,25 +1,9 @@
 import { Module } from '@nestjs/common';
-import { ScheduleModule } from '@nestjs/schedule';
-import { ClientsModule, Transport } from '@nestjs/microservices';
 import { EmailModule } from './email/email.module';
-import { envs, NATS_SERVICE } from './config';
-import { ReminderController } from './reminder/reminder.controller';
+ 
 
 @Module({
-  imports: [
-    ClientsModule.register([
-      {
-        name: NATS_SERVICE,
-        transport: Transport.NATS,
-        options: {
-          servers: envs.natsServers,
-        },
-      },
-    ]),
-    EmailModule,
-    ScheduleModule.forRoot(),
-  ],
-  controllers: [ReminderController],
-  providers: [],
+  imports: [EmailModule],
+ 
 })
 export class AppModule {}
diff --git a/launcher/Emails-ms/src/cron/reminder-cron.service.ts b/launcher/Emails-ms/src/cron/reminder-cron.service.ts
deleted file mode 100644
index ca37302..0000000
--- a/launcher/Emails-ms/src/cron/reminder-cron.service.ts
+++ /dev/null
@@ -1,137 +0,0 @@
-import { Injectable, Logger, Inject } from '@nestjs/common';
-import { Cron } from '@nestjs/schedule';
-import { ClientProxy } from '@nestjs/microservices';
-import { firstValueFrom } from 'rxjs';
-import { EmailService } from '../email/services/email.service.service';
-import { NATS_SERVICE } from '../config';
-
-@Injectable()
-export class ReminderCronService {
-  private readonly logger = new Logger(ReminderCronService.name);
-
-  constructor(
-    private emailService: EmailService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {}
-
-  @Cron('0 9 * * *', { timeZone: 'America/Bogota' })
-  async sendDailyReminders() {
-    this.logger.log('Iniciando envío de recordatorios diarios...');
-
-    try {
-      const appointmentsResponse = await firstValueFrom(
-        this.client.send('get.appointments.for.tomorrow', {}),
-      );
-
-      if (appointmentsResponse.status !== 200) {
-        throw new Error('Error obteniendo citas');
-      }
-
-      const reservations = appointmentsResponse.data;
-      this.logger.log(`Encontradas ${reservations.length} citas para recordar`);
-
-      let successCount = 0;
-      let failureCount = 0;
-
-      for (const reservation of reservations) {
-        try {
-          await this.sendReminderEmail(reservation);
-
-          await firstValueFrom(
-            this.client.send('mark.reminder.sent', {
-              reservationId: reservation.id,
-            }),
-          );
-
-          successCount++;
-        } catch (error) {
-          this.logger.error(`Error en reserva ${reservation.id}:`, error);
-          failureCount++;
-        }
-      }
-
-      this.logger.log(`Enviados: ${successCount}, Fallidos: ${failureCount}`);
-      return { sent: successCount, failed: failureCount };
-    } catch (error) {
-      this.logger.error('Error general:', error);
-      throw error;
-    }
-  }
-
-  private async sendReminderEmail(reservation: any) {
-    const userData = await this.getUserData(reservation.userId);
-    const professionalData = await this.getProfessionalData(
-      reservation.profecionalId,
-      reservation.officeId,
-    );
-
-    const appointmentDate = new Date(reservation.date);
-    const formattedDate = appointmentDate.toLocaleDateString('es-CO', {
-      weekday: 'long',
-      year: 'numeric',
-      month: 'long',
-      day: 'numeric',
-    });
-
-    const formattedTime = appointmentDate.toLocaleTimeString('es-CO', {
-      hour: '2-digit',
-      minute: '2-digit',
-      hour12: true,
-    });
-
-    const reminderHtml = this.emailService.generateReminderEmailHtml({
-      patientName: userData.names || 'Usuario',
-      professionalName: professionalData.data?.name || 'Profesional',
-      appointmentDate: formattedDate,
-      appointmentTime: formattedTime,
-      location:
-        professionalData.data?.offices?.[0]?.description ||
-        'Consulte dirección',
-      officeName: professionalData.data?.name || 'DocVisual',
-      paymentMethod: reservation.payment,
-    });
-
-    await this.emailService.sendReminderEmail(
-      userData.email,
-      'Recordatorio: Tu cita es mañana - DocVisual',
-      reminderHtml,
-    );
-
-    this.logger.log(`Recordatorio enviado a: ${userData.email}`);
-  }
-
-  private async getUserData(userId: string) {
-    try {
-      const userData = await firstValueFrom(
-        this.client.send('get.user.by.id', { id: userId }),
-      );
-      return userData.data;
-    } catch (error) {
-      return { names: 'Usuario', email: 'h2comunicacion2018@gmail.com' };
-    }
-  }
-
-  private async getProfessionalData(profecionalId: string, officeId: string) {
-    try {
-      const professionalData = await firstValueFrom(
-        this.client.send('get.id.office.and.partner', {
-          id: profecionalId,
-          idOffice: officeId,
-        }),
-      );
-      return professionalData;
-    } catch (error) {
-      return {
-        data: {
-          name: 'Profesional DocVisual',
-          offices: [{ description: 'Consulte dirección' }],
-        },
-      };
-    }
-  }
-
-  // Método para ejecutar manualmente los recordatorios
-  async sendRemindersManually() {
-    return await this.sendDailyReminders();
-  }
-}
\ No newline at end of file
diff --git a/launcher/Emails-ms/src/email/email.module.ts b/launcher/Emails-ms/src/email/email.module.ts
index f262757..33718c8 100644
--- a/launcher/Emails-ms/src/email/email.module.ts
+++ b/launcher/Emails-ms/src/email/email.module.ts
@@ -1,4 +1,5 @@
 import { Module } from '@nestjs/common';
+ 
 import { EmailController } from './controllers/email.controller';
 import { EmailService } from './services/email.service.service';
 import { NatsModule } from './transport/nast.module';
@@ -7,22 +8,13 @@ import { EmailControllerRegister } from './controllers/email.register.controller
 import { NotificationsController } from './controllers/notifications.controller';
 import { SupcriptionController } from './controllers/supcription.controller';
 import { SupcritionService } from './services/supcription.service';
-import { ReminderCronService } from '../cron/reminder-cron.service'; // AGREGAR
+ 
 
 @Module({
-  imports: [NatsModule],
-  controllers: [
-    EmailController,
-    EmailControllerRegister,
-    NotificationsController,
-    SupcriptionController,
+  imports:[
+    NatsModule,
   ],
-  providers: [
-    EmailService,
-    EmailServiceRegister,
-    SupcritionService,
-    ReminderCronService,
-  ],
-  exports: [EmailService, ReminderCronService], // EXPORTAR ReminderCronService
+  controllers: [EmailController,EmailControllerRegister,NotificationsController,SupcriptionController],
+  providers: [EmailService,EmailServiceRegister,SupcritionService],
 })
 export class EmailModule {}
diff --git a/launcher/Emails-ms/src/email/services/email.service.service.ts b/launcher/Emails-ms/src/email/services/email.service.service.ts
index 58e50eb..ca66cd1 100644
--- a/launcher/Emails-ms/src/email/services/email.service.service.ts
+++ b/launcher/Emails-ms/src/email/services/email.service.service.ts
@@ -2,340 +2,318 @@ import { Inject, Injectable, Logger, OnModuleInit } from '@nestjs/common';
 import { PrismaClient } from '@prisma/client';
 import { ClientProxy, RpcException } from '@nestjs/microservices';
 import { envs, NATS_SERVICE } from 'src/config';
-import * as jwt from 'jsonwebtoken';
+import * as jwt from 'jsonwebtoken'
 import { create_reservation_dto } from '../dto/create_reservation.dto';
-import { formatDateForCalendar, sendEmail } from 'src/email/utils/send_email';
+import { formatDateForCalendar, sendEmail } from 'src/email/utils/send_email'
 import { firstValueFrom } from 'rxjs';
 import { getNotification, NotificationDto, SendEmailsDto } from '../dto';
 import { reservation_email_dto } from '../dto/reservations';
 import { sendEmailEditReservation } from '../utils/messages.emails';
 import { formatDateTimeEs, formatHumanDateCO } from '../utils/date';
 
+
 @Injectable()
 export class EmailService extends PrismaClient implements OnModuleInit {
-  constructor(@Inject(NATS_SERVICE) private readonly client: ClientProxy) {
-    super();
-  }
-
-  private readonly logger = new Logger('email_microservice');
-  private readonly jwtSecret = envs.jwtSecret;
-  async onModuleInit() {
-    await this.$connect();
-  }
-
-  async sendEmail(SendEmailDto: SendEmailsDto) {
-    try {
-      const { email, subject, text, names } = SendEmailDto;
-      const createdHtml = this.generateEmailHtml(names, email, subject, text);
-      sendEmail('hola@docvisual.co', subject, createdHtml);
-      return {
-        status: 200,
-        message: 'Email enviado correctamente',
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message,
-      });
+    constructor(
+        @Inject(NATS_SERVICE) private readonly client: ClientProxy,
+    ) {
+        super()
     }
-  }
-
-  async create_reservation_token(createReservationDto: create_reservation_dto) {
-    try {
-      const {
-        date,
-        officeId,
-        payment,
-        price,
-        profecionalId,
-        scheduleId,
-        userId,
-      } = createReservationDto;
-      // generate confirmation code
-      const confirmationCode = Math.floor(1000 + Math.random() * 9000); // generate a 4 digit code
-      const token = jwt.sign(
-        {
-          date,
-          officeId,
-          payment,
-          price,
-          profecionalId,
-          scheduleId,
-          confirmationCode,
-          userId,
-        }, // Payload
-        this.jwtSecret, // password secret
-        { expiresIn: '10m' },
-      );
-
-      //get user email
-      const dataUser = await firstValueFrom(
-        this.client.send('auth.get.basic.user.basic', {
-          id: userId,
-        }),
-      );
-      const newHtml = this.generateEmailHtml_reservation(
-        confirmationCode,
-        `${dataUser.data.names} ${dataUser.data.lastnames}`,
-      );
-
-      sendEmail(dataUser.data.email, 'Confirmación de reserva', newHtml);
-
-      return {
-        status: 200,
-        token,
-        code: confirmationCode,
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message,
-      });
+
+    private readonly logger = new Logger('email_microservice');
+    private readonly jwtSecret = envs.jwtSecret;
+    async onModuleInit() {
+        await this.$connect();
+
     }
-  }
-
-  async reset_password_by_email(email: string) {
-    try {
-      const userByEmail = await firstValueFrom(
-        this.client.send('auth.verify.email.basic.user', {
-          email: email,
-        }),
-      );
-      if (userByEmail.data == true) {
-        const token = jwt.sign(
-          { email }, // Payload
-          this.jwtSecret, // password secret
-          { expiresIn: '12h' },
-        );
-        const html = this.generateHtml_reset_password(token);
-        sendEmail(email, 'Restablecer la contraseña doc visual', html);
-        return {
-          status: 200,
-          data: 'correo enviado correctamente',
-        };
-      } else {
-        throw new RpcException({
-          status: 400,
-          message: 'No existe este correo',
-        });
-      }
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message,
-      });
+
+    async sendEmail(SendEmailDto: SendEmailsDto) {
+        try {
+            const { email, subject, text, names } = SendEmailDto;
+            const createdHtml = this.generateEmailHtml(names, email, subject, text);
+            sendEmail('hola@docvisual.co', subject, createdHtml);
+            return {
+                status: 200,
+                message: 'Email enviado correctamente',
+            }
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
     }
-  }
-
-  async resetPassword(token: string, newPassword: string) {
-    try {
-      const decoded = jwt.verify(token, this.jwtSecret) as {
-        email: string;
-      };
-      const resetResponse = await firstValueFrom(
-        this.client.send('auth.reset.password.by.email', {
-          email: decoded.email,
-          password: newPassword,
-        }),
-      );
-      return {
-        status: 200,
-        data: resetResponse,
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message,
-      });
+
+
+    async create_reservation_token(createReservationDto: create_reservation_dto) {
+        try {
+            const { date, officeId, payment, price, profecionalId, scheduleId, userId } = createReservationDto;
+            // generate confirmation code
+            const confirmationCode = Math.floor(1000 + Math.random() * 9000); // generate a 4 digit code
+            const token = jwt.sign(
+                { date, officeId, payment, price, profecionalId, scheduleId, confirmationCode, userId }, // Payload
+                this.jwtSecret, // password secret 
+                { expiresIn: '10m' }
+            );
+
+            //get user email
+            const dataUser = await firstValueFrom(
+                this.client.send('auth.get.basic.user.basic', {
+                    id: userId,
+                })
+            );
+            const newHtml = this.generateEmailHtml_reservation(confirmationCode, `${dataUser.data.names} ${dataUser.data.lastnames}`);
+
+            sendEmail(dataUser.data.email, 'Confirmación de reserva', newHtml);
+
+            return {
+                status: 200,
+                token,
+                code: confirmationCode,
+            };
+
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
     }
-  }
-
-  async validate_confirmation_code(
-    token: string,
-    confirmationCode: number,
-    idUser: string,
-  ) {
-    try {
-      // verify the token
-      const decoded = jwt.verify(token, this.jwtSecret) as {
-        date: string;
-        officeId: string;
-        payment: string;
-        price: string;
-        profecionalId: string;
-        scheduleId: string;
-        confirmationCode: number;
-        userId: string;
-      };
-
-      if (decoded.userId !== idUser) {
-        throw new RpcException({
-          status: 400,
-          message: 'El id de usuario no coincide',
-        });
-      }
 
-      // validate the confirmation code
-      if (decoded.confirmationCode !== confirmationCode) {
-        throw new RpcException({
-          status: 400,
-          message: 'El código de confirmación no coincide',
-        });
-      }
-      const reservationdata: create_reservation_dto = {
-        date: decoded.date,
-        officeId: decoded.officeId,
-        payment: decoded.payment,
-        price: Number(decoded.price),
-        profecionalId: decoded.profecionalId,
-        scheduleId: decoded.scheduleId,
-        userId: decoded.userId,
-      };
-
-      const reservation = await firstValueFrom(
-        this.client.send<ReservationResponseDto>(
-          'create.reservation.user',
-          reservationdata,
-        ),
-      );
-
-      const dateresponse = new Date(reservation.data.date);
-      const endDate = new Date(dateresponse); // Copia de la fecha inicial
-      endDate.setMinutes(dateresponse.getMinutes() + 30);
-
-      const startDateFormatted = formatDateForCalendar(dateresponse);
-      const startDateHumand = formatHumanDateCO(dateresponse);
-      const endDateFormatted = formatDateForCalendar(endDate);
-      const endDateHumand = formatHumanDateCO(endDate);
-
-      // Agregar 30 minuto
-      const year = dateresponse.getUTCFullYear(); // Año
-      const month = dateresponse.getUTCMonth() + 1; // Mes (0-11, por eso se suma 1)
-      const day = dateresponse.getUTCDate(); // Día
-      const hours = dateresponse.getUTCHours(); // Hora
-      const minutes = dateresponse.getMinutes();
-      if (reservation.status !== 200) {
-        throw new RpcException({
-          status: 400,
-          message: 'No se pudo crear la reserva',
-        });
-      }
-      const dataUser = await firstValueFrom(
-        this.client.send('auth.get.basic.user.basic', {
-          id: decoded.userId,
-        }),
-      );
-      const dataProfessional = await firstValueFrom(
-        this.client.send('auth.get.basic.user.basic', {
-          id: decoded.profecionalId,
-        }),
-      );
-      const office = await firstValueFrom(
-        this.client.send<ProfessionalResponse>('get.id.office.and.partner', {
-          id: reservation.data.profecionalId,
-          idOffice: reservation.data.officeId,
-        }),
-      );
-      // Validar que office.offices[0] exista
-
-      const namePorfeccional = `${dataProfessional.data.names}  ${dataProfessional.data.lastnames}`;
-      const nameUser = `${dataUser.data.names}  ${dataUser.data.lastnames}`;
-      if (
-        !office ||
-        !Array.isArray(office.data.offices) ||
-        office.data.offices.length === 0
-      ) {
-        throw new RpcException({
-          status: 400,
-          message: 'No se encontraron oficinas asociadas al profesional',
-        });
-      }
-      const location = `${office.data.offices[0].description}`;
-      const cordinates = `${office.data.offices[0].latitude}, ${office.data.offices[0].longitude}`;
-      const safeLocation = encodeURIComponent(location);
-      const datetext = formatDateTimeEs(year, month, day, hours, minutes);
-      const html = this.generateEmailHtml_remember(
-        office.data.name,
-        day,
-        month,
-        year,
-        hours,
-        location,
-        reservation.data.payment,
-        startDateFormatted,
-        endDateFormatted,
-        safeLocation,
-        namePorfeccional,
-        cordinates,
-        datetext,
-      );
-
-      const htmlProfessional = this.generateEmailHtml_remember(
-        office.data.name,
-        day,
-        month,
-        year,
-        hours,
-        location,
-        reservation.data.payment,
-        startDateFormatted,
-        endDateFormatted,
-        safeLocation,
-        nameUser,
-        cordinates,
-        datetext,
-      );
-
-      sendEmail(
-        dataUser.data.email,
-        'Confirmacion de tu cita en DocVisual',
-        html,
-      );
-      sendEmail(
-        dataProfessional.data.email,
-        'Cita programada Doc visual',
-        htmlProfessional,
-      );
-
-      const createNotificationUser: NotificationDto = {
-        title: 'Cita Programada',
-        message: `Tienes una cita con el optómetra ${namePorfeccional} en la fecha ${startDateHumand}`,
-        userId: decoded.userId,
-      };
-      const createNotificationProfessional: NotificationDto = {
-        title: 'Cita Programada',
-        message: `Tienes una cita con el usuario ${dataUser.data.names} en la fecha ${startDateHumand}`,
-        userId: decoded.profecionalId,
-      };
-      this.CreateNotification(createNotificationUser);
-      this.CreateNotification(createNotificationProfessional);
-
-      const responsetext = `oficina:${location} , fecha:${datetext} ,con el profesional ${office.data.name} `;
-      return {
-        status: 200,
-        message: 'El código de confirmación es válido',
-        data: responsetext,
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message || 'Token inválido',
-      });
+    async reset_password_by_email(email: string) {
+        try {
+
+            const userByEmail = await firstValueFrom(
+                this.client.send('auth.verify.email.basic.user', {
+                    email: email,
+                })
+            );
+            if (userByEmail.data == true) {
+                const token = jwt.sign(
+                    { email }, // Payload
+                    this.jwtSecret, // password secret 
+                    { expiresIn: '12h' }
+                );
+                const html = this.generateHtml_reset_password(token)
+                sendEmail(email, "Restablecer la contraseña doc visual", html)
+                return {
+                    status: 200,
+                    data: "correo enviado correctamente"
+                }
+
+
+            } else {
+                throw new RpcException({
+                    status: 400,
+                    message: "No existe este correo"
+                })
+            }
+
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
     }
-  }
-
-  private generateEmailHtml(
-    username: string,
-    email: string,
-    subject: string,
-
-    text: string,
-  ): string {
-    const now = new Date();
-    const day = now.getDate().toString().padStart(2, '0');
-    const month = (now.getMonth() + 1).toString().padStart(2, '0'); // Mes es 0-indexado
-    const year = now.getFullYear();
-    return `
+
+    async resetPassword(token: string, newPassword: string) {
+        try {
+            const decoded = jwt.verify(token, this.jwtSecret) as {
+                email: string;
+            };
+            const resetResponse = await firstValueFrom(this.client.send('auth.reset.password.by.email', {
+                email: decoded.email,
+                password: newPassword
+            }))
+            return {
+                status: 200,
+                data: resetResponse
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
+    }
+
+
+    async validate_confirmation_code(token: string, confirmationCode: number, idUser: string) {
+        try {
+            // verify the token
+            const decoded = jwt.verify(token, this.jwtSecret) as {
+                date: string;
+                officeId: string;
+                payment: string;
+                price: string;
+                profecionalId: string;
+                scheduleId: string;
+                confirmationCode: number;
+                userId: string;
+            };
+
+            if (decoded.userId !== idUser) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El id de usuario no coincide',
+                });
+            }
+
+
+            // validate the confirmation code
+            if (decoded.confirmationCode !== confirmationCode) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El código de confirmación no coincide',
+                });
+            }
+            const reservationdata: create_reservation_dto = {
+                date: decoded.date,
+                officeId: decoded.officeId,
+                payment: decoded.payment,
+                price: Number(decoded.price),
+                profecionalId: decoded.profecionalId,
+                scheduleId: decoded.scheduleId,
+                userId: decoded.userId
+            }
+
+            const reservation = await firstValueFrom(
+                this.client.send<ReservationResponseDto>('create.reservation.user', reservationdata)
+            )
+
+
+            const dateresponse = new Date(reservation.data.date);
+            const endDate = new Date(dateresponse); // Copia de la fecha inicial
+            endDate.setMinutes(dateresponse.getMinutes() + 30);
+
+            const startDateFormatted = formatDateForCalendar(dateresponse);
+            const startDateHumand = formatHumanDateCO(dateresponse);
+            const endDateFormatted = formatDateForCalendar(endDate);
+            const endDateHumand = formatHumanDateCO(endDate);
+
+
+
+            // Agregar 30 minuto
+            const year = dateresponse.getUTCFullYear(); // Año
+            const month = dateresponse.getUTCMonth() + 1; // Mes (0-11, por eso se suma 1)
+            const day = dateresponse.getUTCDate(); // Día
+            const hours = dateresponse.getUTCHours(); // Hora
+            const minutes = dateresponse.getMinutes();
+            if (reservation.status !== 200) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'No se pudo crear la reserva',
+                });
+            }
+            const dataUser = await firstValueFrom(
+                this.client.send('auth.get.basic.user.basic', {
+                    id: decoded.userId,
+                })
+            );
+            const dataProfessional = await firstValueFrom(
+                this.client.send('auth.get.basic.user.basic', {
+                    id: decoded.profecionalId
+                })
+            )
+            const office = await firstValueFrom(
+                this.client.send<ProfessionalResponse>('get.id.office.and.partner', { id: reservation.data.profecionalId, idOffice: reservation.data.officeId })
+            );
+            // Validar que office.offices[0] exista
+
+
+            const namePorfeccional = `${dataProfessional.data.names}  ${dataProfessional.data.lastnames}`
+            const nameUser = `${dataUser.data.names}  ${dataUser.data.lastnames}`
+            if (!office || !Array.isArray(office.data.offices) || office.data.offices.length === 0) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'No se encontraron oficinas asociadas al profesional',
+                });
+            }
+            const location = `${office.data.offices[0].description}`;
+            const cordinates = `${office.data.offices[0].latitude}, ${office.data.offices[0].longitude}`;
+            const safeLocation = encodeURIComponent(location);
+            const datetext = formatDateTimeEs(year, month, day, hours, minutes)
+            const html = this.generateEmailHtml_remember(
+                office.data.name,
+                day,
+                month,
+                year,
+                hours,
+                location,
+                reservation.data.payment,
+                startDateFormatted,
+                endDateFormatted,
+                safeLocation,
+                namePorfeccional,
+                cordinates,
+                datetext
+            );
+
+            const htmlProfessional = this.generateEmailHtml_remember(
+                office.data.name,
+                day,
+                month,
+                year,
+                hours,
+                location,
+                reservation.data.payment,
+                startDateFormatted,
+                endDateFormatted,
+                safeLocation,
+                nameUser,
+                cordinates,
+                datetext
+            );
+
+            sendEmail(dataUser.data.email, 'Confirmacion de tu cita en DocVisual', html);
+            sendEmail(dataProfessional.data.email, 'Cita programada Doc visual', htmlProfessional)
+
+            const createNotificationUser: NotificationDto = {
+                title: "Cita Programada",
+                message: `Tienes una cita con el optómetra ${namePorfeccional} en la fecha ${startDateHumand}`,
+                userId: decoded.userId
+            }
+            const createNotificationProfessional: NotificationDto = {
+                title: "Cita Programada",
+                message: `Tienes una cita con el usuario ${dataUser.data.names} en la fecha ${startDateHumand}`,
+                userId: decoded.profecionalId
+            }
+            this.CreateNotification(createNotificationUser)
+            this.CreateNotification(createNotificationProfessional)
+
+            const responsetext = `oficina:${location} , fecha:${datetext} ,con el profesional ${office.data.name} `
+            return {
+                status: 200,
+                message: 'El código de confirmación es válido',
+                data: responsetext
+            };
+
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message || 'Token inválido',
+            });
+        }
+    }
+
+
+
+    private generateEmailHtml(
+        username: string,
+        email: string,
+        subject: string,
+
+        text: string,
+
+    ): string {
+        const now = new Date();
+        const day = now.getDate().toString().padStart(2, '0');
+        const month = (now.getMonth() + 1).toString().padStart(2, '0'); // Mes es 0-indexado
+        const year = now.getFullYear();
+        return `
     <div
       style="font-family: Arial, sans-serif; line-height: 1.6; text-align: center; width: 100%; background-color: #f9f9f9; padding: 20px;">
       <table style="max-width: 600px; margin: 0 auto; border: 1px solid #ddd; border-radius: 8px; padding: 20px;">
@@ -382,35 +360,40 @@ export class EmailService extends PrismaClient implements OnModuleInit {
       </table>
     </div>
   `;
-  }
-
-  private generateEmailHtml_remember(
-    userName: string,
-    day: number,
-    month: number,
-    year: number,
-    hour: number,
-    adress: string,
-    payment: string,
-    startDate: string,
-    endDate: string,
-    consultorio: string,
-    nameProfessional: string,
-    cordinates: string,
-    datetext: string,
-  ): string {
-    const rawDate = new Date(year, month - 1, day, hour);
-    const formattedDate = rawDate.toLocaleString('es-CO', {
-      weekday: 'long',
-      year: 'numeric',
-      month: 'long',
-      day: 'numeric',
-      hour: 'numeric',
-      minute: '2-digit',
-      hour12: true,
-    });
-
-    return `
+    }
+
+
+
+
+    private generateEmailHtml_remember(
+        userName: string,
+        day: number,
+        month: number,
+        year: number,
+        hour: number,
+        adress: string,
+        payment: string,
+        startDate: string,
+        endDate: string,
+        consultorio: string,
+        nameProfessional: string,
+        cordinates: string,
+        datetext: string
+    ): string {
+
+        const rawDate = new Date(year, month - 1, day, hour);
+        const formattedDate = rawDate.toLocaleString('es-CO', {
+            weekday: 'long',
+            year: 'numeric',
+            month: 'long',
+            day: 'numeric',
+            hour: 'numeric',
+            minute: '2-digit',
+            hour12: true
+        });
+
+
+        return `
         <div style="font-family: Arial, sans-serif; line-height: 1.6; text-align: center; width: 100%; background-color: #f9f9f9; padding: 20px;">
             <table style="max-width: 600px; margin: 0 auto;   border: 1px solid #ddd; border-radius: 8px; padding: 20px;">
                 <tr>
@@ -456,13 +439,12 @@ export class EmailService extends PrismaClient implements OnModuleInit {
                 </tr>
             </table>
         </div>`;
-  }
+    }
+
 
-  private generateEmailHtml_reservation(
-    confirmationCode: number,
-    userName: string,
-  ): string {
-    return `
+
+    private generateEmailHtml_reservation(confirmationCode: number, userName: string): string {
+        return `
         <div style="font-family: Arial, sans-serif; line-height: 1.6; text-align: center; width: 100%; background-color: #f9f9f9; padding: 20px;">
             <table style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border: 1px solid #ddd; border-radius: 8px; padding: 20px;">
                 <tr>
@@ -487,12 +469,13 @@ export class EmailService extends PrismaClient implements OnModuleInit {
             </table>
         </div>
         `;
-  }
+    }
+
 
-  private generateHtml_reset_password(tokenreset: string) {
-    const url = 'https://www.docvisual.co/reset/';
-    const urlAndToken = url + tokenreset;
-    return `
+    private generateHtml_reset_password(tokenreset: string) {
+        const url = "https://www.docvisual.co/reset/"
+        const urlAndToken = url + tokenreset
+        return `
             <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 30px; text-align: center;">
         <table style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border: 1px solid #ddd; border-radius: 8px; padding: 30px;">
             <tr>
@@ -520,300 +503,175 @@ export class EmailService extends PrismaClient implements OnModuleInit {
                 </td>
             </tr>
         </table>
-    </div>`;
-  }
-  // notifications
-  async getNotificationPendings(id: string) {
-    try {
-      if (!id) {
-        throw new RpcException({
-          status: 400,
-          message: 'El ID del usuario es requerido',
-        });
-      }
-
-      const total = await this.notification.count({
-        where: {
-          userId: id,
-          state: 'CLOSE', // Asegúrate que el valor 'CLOSE' es correcto según tu modelo
-        },
-      });
-
-      return {
-        status: 200,
-        data: total,
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 500,
-        message:
-          error?.message || 'Error interno al contar notificaciones pendientes',
-      });
+    </div>`
     }
-  }
-
-  async getNotificationsUser(getNotification: getNotification) {
-    try {
-      const { idUser, limit, page } = getNotification;
-      const currentPage = page ?? 1;
-      const perPage = limit ?? 10;
-      const total = await this.notification.count({
-        where: {
-          userId: idUser,
-        },
-      });
-      const result = await this.notification.findMany({
-        skip: (currentPage - 1) * perPage,
-        take: perPage,
-        where: {
-          userId: idUser,
-        },
-        orderBy: {
-          createdAt: 'desc',
-        },
-      });
-
-      return {
-        status: 200,
-        data: result,
-        meta: {
-          total,
-          page: currentPage,
-          lastPage: Math.ceil(total / perPage),
-        },
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message || 'Token inválido',
-      });
+    // notifications 
+    async getNotificationPendings(id: string) {
+        try {
+            if (!id) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El ID del usuario es requerido',
+                });
+            }
+
+            const total = await this.notification.count({
+                where: {
+                    userId: id,
+                    state: 'CLOSE', // Asegúrate que el valor 'CLOSE' es correcto según tu modelo
+                },
+            });
+
+            return {
+                status: 200,
+                data: total,
+            };
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: error?.message || 'Error interno al contar notificaciones pendientes',
+            });
+        }
     }
-  }
-  /**
-   * * create notification
-   * ! create new notification state init close
-   * @param NotificationDto
-   */
-  async CreateNotification(NotificationDto: NotificationDto) {
-    try {
-      const { message, title, userId } = NotificationDto;
-      /**
-       * ! check userId
-       */
-      const dataUser = await firstValueFrom(
-        this.client.send('auth.get.basic.user.basic', {
-          id: userId,
-        }),
-      );
-      if (dataUser.status !== 200) {
-        throw new RpcException({
-          status: 400,
-          message: 'no se encontro el usuario',
-        });
-      }
-      const newNotification = await this.notification.create({
-        data: {
-          message: message,
-          title: title,
-          userId: userId,
-          state: 'CLOSE',
-        },
-      });
-      return {
-        status: 200,
-        data: newNotification,
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message || 'Token inválido',
-      });
+
+
+
+
+    async getNotificationsUser(getNotification: getNotification) {
+        try {
+            const { idUser, limit, page } = getNotification;
+            const currentPage = page ?? 1;
+            const perPage = limit ?? 10;
+            const total = await this.notification.count({
+                where: {
+                    userId: idUser
+                }
+            });
+            const result = await this.notification.findMany({
+                skip: (currentPage - 1) * perPage,
+                take: perPage,
+                where: {
+                    userId: idUser
+                },
+                orderBy: {
+                    createdAt: 'desc'
+                }
+            });
+
+            return {
+                status: 200,
+                data: result,
+                meta: {
+                    total,
+                    page: currentPage,
+                    lastPage: Math.ceil(total / perPage)
+                }
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message || 'Token inválido',
+            });
+        }
     }
-  }
-  async getNotification(id: string, userId: string) {
-    try {
-      const notification = await this.notification.findFirst({
-        where: {
-          id: id,
-          userId: userId,
-        },
-      });
-      if (!notification) {
-        throw new RpcException({
-          status: 400,
-          message: 'No se encontró la notificación con el usuario respectivo.',
-        });
-      }
-      if (notification.state === 'CLOSE') {
-        await this.notification.update({
-          where: {
-            id: id,
-            userId: userId,
-          },
-          data: {
-            state: 'OPEN',
-          },
-        });
-      }
-      return {
-        status: 200,
-        data: notification,
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message || 'Token inválido',
-      });
+    /**
+     * * create notification
+     * ! create new notification state init close
+     * @param NotificationDto
+     */
+    async CreateNotification(NotificationDto: NotificationDto) {
+        try {
+            const { message, title, userId } = NotificationDto;
+            /**
+             * ! check userId
+             */
+            const dataUser = await firstValueFrom(
+                this.client.send('auth.get.basic.user.basic', {
+                    id: userId,
+                })
+            );
+            if (dataUser.status !== 200) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'no se encontro el usuario',
+                });
+            }
+            const newNotification = await this.notification.create({
+                data: {
+                    message: message,
+                    title: title,
+                    userId: userId,
+                    state: 'CLOSE'
+                }
+            })
+            return {
+                status: 200,
+                data: newNotification
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message || 'Token inválido',
+            });
+        }
     }
-  }
-
-  async sendEmailUpdateReservation(SendEmailDto: SendEmailsDto) {
-    try {
-      const { subject, email } = SendEmailDto;
-      const createHtml = sendEmailEditReservation(SendEmailDto);
-      await sendEmail(
-        email,
-        subject ? subject : 'Actualización de reserva. ',
-        createHtml,
-      );
-      return {
-        status: 200,
-        message: 'Email enviado correctamente',
-      };
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message,
-      });
+    async getNotification(id: string, userId: string) {
+        try {
+            const notification = await this.notification.findFirst({
+                where: {
+                    id: id,
+                    userId: userId
+                }
+            });
+            if (!notification) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'No se encontró la notificación con el usuario respectivo.'
+                });
+            }
+            if (notification.state === 'CLOSE') {
+                await this.notification.update({
+                    where: {
+                        id: id,
+                        userId: userId
+                    },
+                    data: {
+                        state: 'OPEN'
+                    }
+                })
+            }
+            return {
+                status: 200,
+                data: notification
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message || 'Token inválido',
+            });
+        }
     }
-  }
-
-  // Método para enviar recordatorios usando la función existente
-  async sendReminderEmail(
-    to: string,
-    subject: string,
-    html: string,
-  ): Promise<void> {
-    const { sendEmail } = await import('../utils/send_email');
-    return sendEmail(to, subject, html);
-  }
-
-  // Template HTML profesional para recordatorios
-  generateReminderEmailHtml(data: {
-    patientName: string;
-    professionalName: string;
-    appointmentDate: string;
-    appointmentTime: string;
-    location: string;
-    officeName: string;
-    paymentMethod: string;
-  }): string {
-    return `
-        <div style="font-family: Arial, sans-serif; line-height: 1.6; text-align: center; width: 100%; background-color: #f9f9f9; padding: 20px;">
-            <table style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border: 1px solid #ddd; border-radius: 8px; padding: 20px;">
-                <tr>
-                    <td style="text-align: center; padding: 20px;">
-                        <img src="https://res.cloudinary.com/dirsusbyy/image/upload/v1746028928/ibtjroma4sgyx55erswj.png" alt="DocVisual Logo" style="max-width: 200px; margin-bottom: 20px;">
-                    </td>
-                </tr>
-                
-                <tr>
-                    <td style="text-align: center; padding: 20px;">
-                        <div style="background-color: #36b6f1; color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
-                            <h1 style="margin: 0; font-size: 24px;">🔔 ¡Recordatorio de tu cita!</h1>
-                        </div>
-                        
-                        <p style="color: #333; font-size: 18px; margin: 20px 0;">
-                            Hola <strong>${data.patientName}</strong>,
-                        </p>
-                        
-                        <p style="color: #555; font-size: 16px; margin: 15px 0;">
-                            Te recordamos que <strong>mañana</strong> tienes tu cita programada:
-                        </p>
-                        
-                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: left;">
-                            
-                            <div style="display: flex; align-items: center; margin: 15px 0;">
-                                <div style="width: 40px; height: 40px; background-color: #36b6f1; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 15px; font-size: 18px; color: white;">
-                                    👨‍⚕️
-                                </div>
-                                <div>
-                                    <strong style="color: #333; font-size: 16px;">Profesional:</strong><br>
-                                    <span style="color: #555;">${data.professionalName}</span>
-                                </div>
-                            </div>
-                            
-                            <div style="display: flex; align-items: center; margin: 15px 0;">
-                                <div style="width: 40px; height: 40px; background-color: #36b6f1; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 15px; font-size: 18px; color: white;">
-                                    📅
-                                </div>
-                                <div>
-                                    <strong style="color: #333; font-size: 16px;">Fecha y hora:</strong><br>
-                                    <span style="color: #555;">${data.appointmentDate}</span><br>
-                                    <span style="color: #36b6f1; font-weight: bold; font-size: 18px;">${data.appointmentTime}</span>
-                                </div>
-                            </div>
-                            
-                            <div style="display: flex; align-items: center; margin: 15px 0;">
-                                <div style="width: 40px; height: 40px; background-color: #36b6f1; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 15px; font-size: 18px; color: white;">
-                                    📍
-                                </div>
-                                <div>
-                                    <strong style="color: #333; font-size: 16px;">Ubicación:</strong><br>
-                                    <span style="color: #555;">${data.officeName}</span><br>
-                                    <span style="color: #777; font-size: 14px;">${data.location}</span>
-                                </div>
-                            </div>
-                            
-                            <div style="display: flex; align-items: center; margin: 15px 0;">
-                                <div style="width: 40px; height: 40px; background-color: #36b6f1; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 15px; font-size: 18px; color: white;">
-                                    💳
-                                </div>
-                                <div>
-                                    <strong style="color: #333; font-size: 16px;">Método de pago:</strong><br>
-                                    <span style="color: #555;">${data.paymentMethod}</span>
-                                </div>
-                            </div>
-                        </div>
-                        
-                        <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 20px 0;">
-                            <p style="color: #856404; font-size: 14px; margin: 0;">
-                                💡 <strong>Recomendación:</strong> Te sugerimos llegar 10 minutos antes de tu cita.
-                            </p>
-                        </div>
-                        
-                        <div style="text-align: center; margin: 30px 0;">
-                            <a href="https://docvisual.co" 
-                               style="display: inline-block; padding: 15px 30px; background-color: #36b6f1; color: #fff; text-decoration: none; border-radius: 8px; font-size: 16px; font-weight: bold;">
-                                Visitar DocVisual
-                            </a>
-                        </div>
-                        
-                        <div style="text-align: center; margin: 20px 0;">
-                            <p style="color: #666; font-size: 14px;">
-                                ¿Necesitas reprogramar tu cita?
-                            </p>
-                            <p style="color: #36b6f1; text-decoration: none; font-size: 14px;">
-                                Contáctanos para ayudarte
-                            </p>
-                        </div>
-                    </td>
-                </tr>
-                
-                <tr>
-                    <td style="text-align: center; padding: 20px; border-top: 1px solid #ddd; background-color: #f8f9fa;">
-                        <p style="font-size: 12px; color: #888; margin: 5px 0;">
-                            Este es un recordatorio automático. Si tienes dudas, contáctanos:
-                        </p>
-                        <p style="font-size: 12px; color: #888; margin: 5px 0;">
-                            📧 <a href="mailto:hola@docvisual.co" style="color: #36b6f1; text-decoration: none;">hola@docvisual.co</a>
-                        </p>
-                        <p style="font-size: 12px; color: #888; margin: 5px 0;">
-                            DocVisual S.A.S, Bogotá, Colombia
-                        </p>
-                    </td>
-                </tr>
-            </table>
-        </div>`;
-  }
+
+
+    async sendEmailUpdateReservation(SendEmailDto: SendEmailsDto) {
+        try {
+            const { subject, email } = SendEmailDto;
+            const createHtml = sendEmailEditReservation(SendEmailDto);
+            await sendEmail(email, subject ? subject : "Actualización de reserva. ", createHtml)
+            return {
+                status: 200,
+                message: 'Email enviado correctamente',
+            }
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
+    }
+
+
+
+
 }
diff --git a/launcher/Emails-ms/src/reminder/reminder.controller.ts b/launcher/Emails-ms/src/reminder/reminder.controller.ts
deleted file mode 100644
index a022bdc..0000000
--- a/launcher/Emails-ms/src/reminder/reminder.controller.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import { Controller } from '@nestjs/common';
-import { MessagePattern } from '@nestjs/microservices';
-import { ReminderCronService } from '../cron/reminder-cron.service';
-
-@Controller()
-export class ReminderController {
-  constructor(private readonly reminderCronService: ReminderCronService) {}
-
-  @MessagePattern('emails.reminders.send-daily')
-  async sendDailyReminders() {
-    try {
-      const result = await this.reminderCronService.sendRemindersManually();
-      return {
-        status: 200,
-        message: 'Recordatorios enviados exitosamente',
-        data: result,
-      };
-    } catch (error) {
-      return {
-        status: 500,
-        message: 'Error enviando recordatorios',
-        error: error.message,
-      };
-    }
-  }
-
-  @MessagePattern('emails.reminders.status')
-  async getStatus() {
-    return {
-      status: 200,
-      message: 'Sistema de recordatorios activo',
-      timezone: 'America/Bogota',
-      schedule: '09:00 AM diario',
-      next_execution: 'Mañana a las 09:00 AM',
-    };
-  }
-
-  @MessagePattern('emails.reminders.test-connection')
-  async testConnection() {
-    try {
-      return {
-        status: 200,
-        message: 'Conexión exitosa',
-        timestamp: new Date().toISOString(),
-        service: 'emails-ms',
-      };
-    } catch (error) {
-      return {
-        status: 500,
-        message: 'Error de conexión',
-        error: error.message,
-      };
-    }
-  }
-}
\ No newline at end of file
diff --git a/launcher/add-logs.sh b/launcher/add-logs.sh
new file mode 100755
index 0000000..c89fb45
--- /dev/null
+++ b/launcher/add-logs.sh
@@ -0,0 +1,30 @@
+#!/bin/bash
+
+echo "Agregando logs de debug a LoginUser..."
+
+docker compose exec auth-ms sh << 'SCRIPT'
+# Hacer backup
+cp src/auth/auth.service.ts src/auth/auth.service.ts.backup
+
+# Agregar console.logs
+sed -i '/async LoginUser/a\        console.log("LoginUser called with:", LoginUserDto);' src/auth/auth.service.ts
+sed -i '/const user = await/a\        console.log("User found:", user);' src/auth/auth.service.ts
+sed -i '/throw new RpcException/i\        console.log("Error: User not found or invalid password");' src/auth/auth.service.ts
+
+echo "Logs agregados"
+SCRIPT
+
+# Reiniciar
+docker compose restart auth-ms
+sleep 10
+
+# Probar
+echo "Probando con logs..."
+curl -X POST http://localhost:3000/auth/login \
+  -H "Content-Type: application/json" \
+  -d '{"email":"test@test.com","password":"Test1234"}'
+
+# Ver logs
+echo -e "\nLogs de auth-ms:"
+docker compose logs auth-ms --tail=30 | grep -i "LoginUser\|User found\|Error:"
+
diff --git a/launcher/auth-ms-broken-backup/.dockerignore b/launcher/auth-ms-broken-backup/.dockerignore
deleted file mode 100644
index ce5f83c..0000000
--- a/launcher/auth-ms-broken-backup/.dockerignore
+++ /dev/null
@@ -1,10 +0,0 @@
-
-
-
-dist/
-
-node_modules/
-
-.env
-
-.vscode/
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/.env.template b/launcher/auth-ms-broken-backup/.env.template
deleted file mode 100644
index 4579d71..0000000
--- a/launcher/auth-ms-broken-backup/.env.template
+++ /dev/null
@@ -1,3 +0,0 @@
-PORT=3002
-NATS_SERVERS="nats://localhost:4222"
-DATABASE_URL="postgresql://postgres:123456@localhost:5432/docdb?schema=public"
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/.gitignore b/launcher/auth-ms-broken-backup/.gitignore
deleted file mode 100644
index 4b56acf..0000000
--- a/launcher/auth-ms-broken-backup/.gitignore
+++ /dev/null
@@ -1,56 +0,0 @@
-# compiled output
-/dist
-/node_modules
-/build
-
-# Logs
-logs
-*.log
-npm-debug.log*
-pnpm-debug.log*
-yarn-debug.log*
-yarn-error.log*
-lerna-debug.log*
-
-# OS
-.DS_Store
-
-# Tests
-/coverage
-/.nyc_output
-
-# IDEs and editors
-/.idea
-.project
-.classpath
-.c9/
-*.launch
-.settings/
-*.sublime-workspace
-
-# IDE - VSCode
-.vscode/*
-!.vscode/settings.json
-!.vscode/tasks.json
-!.vscode/launch.json
-!.vscode/extensions.json
-
-# dotenv environment variable files
-.env
-.env.development.local
-.env.test.local
-.env.production.local
-.env.local
-
-# temp directory
-.temp
-.tmp
-
-# Runtime data
-pids
-*.pid
-*.seed
-*.pid.lock
-
-# Diagnostic reports (https://nodejs.org/api/report.html)
-report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
diff --git a/launcher/auth-ms-broken-backup/.npmrc b/launcher/auth-ms-broken-backup/.npmrc
deleted file mode 100644
index 214c29d..0000000
--- a/launcher/auth-ms-broken-backup/.npmrc
+++ /dev/null
@@ -1 +0,0 @@
-registry=https://registry.npmjs.org/
diff --git a/launcher/auth-ms-broken-backup/.prettierrc b/launcher/auth-ms-broken-backup/.prettierrc
deleted file mode 100644
index dcb7279..0000000
--- a/launcher/auth-ms-broken-backup/.prettierrc
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-  "singleQuote": true,
-  "trailingComma": "all"
-}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/README.md b/launcher/auth-ms-broken-backup/README.md
deleted file mode 100644
index c17103c..0000000
--- a/launcher/auth-ms-broken-backup/README.md
+++ /dev/null
@@ -1,99 +0,0 @@
-<p align="center">
-  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="120" alt="Nest Logo" /></a>
-</p>
-
-[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456
-[circleci-url]: https://circleci.com/gh/nestjs/nest
-
-  <p align="center">A progressive <a href="http://nodejs.org" target="_blank">Node.js</a> framework for building efficient and scalable server-side applications.</p>
-    <p align="center">
-<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/v/@nestjs/core.svg" alt="NPM Version" /></a>
-<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/l/@nestjs/core.svg" alt="Package License" /></a>
-<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/dm/@nestjs/common.svg" alt="NPM Downloads" /></a>
-<a href="https://circleci.com/gh/nestjs/nest" target="_blank"><img src="https://img.shields.io/circleci/build/github/nestjs/nest/master" alt="CircleCI" /></a>
-<a href="https://coveralls.io/github/nestjs/nest?branch=master" target="_blank"><img src="https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#9" alt="Coverage" /></a>
-<a href="https://discord.gg/G7Qnnhy" target="_blank"><img src="https://img.shields.io/badge/discord-online-brightgreen.svg" alt="Discord"/></a>
-<a href="https://opencollective.com/nest#backer" target="_blank"><img src="https://opencollective.com/nest/backers/badge.svg" alt="Backers on Open Collective" /></a>
-<a href="https://opencollective.com/nest#sponsor" target="_blank"><img src="https://opencollective.com/nest/sponsors/badge.svg" alt="Sponsors on Open Collective" /></a>
-  <a href="https://paypal.me/kamilmysliwiec" target="_blank"><img src="https://img.shields.io/badge/Donate-PayPal-ff3f59.svg" alt="Donate us"/></a>
-    <a href="https://opencollective.com/nest#sponsor"  target="_blank"><img src="https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg" alt="Support us"></a>
-  <a href="https://twitter.com/nestframework" target="_blank"><img src="https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow" alt="Follow us on Twitter"></a>
-</p>
-  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
-  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->
-
-## Description
-
-[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.
-
-## Project setup
-
-```bash
-$ npm install
-```
-
-## Compile and run the project
-
-```bash
-# development
-$ npm run start
-
-# watch mode
-$ npm run start:dev
-
-# production mode
-$ npm run start:prod
-```
-
-## Run tests
-
-```bash
-# unit tests
-$ npm run test
-
-# e2e tests
-$ npm run test:e2e
-
-# test coverage
-$ npm run test:cov
-```
-
-## Deployment
-
-When you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the [deployment documentation](https://docs.nestjs.com/deployment) for more information.
-
-If you are looking for a cloud-based platform to deploy your NestJS application, check out [Mau](https://mau.nestjs.com), our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:
-
-```bash
-$ npm install -g mau
-$ mau deploy
-```
-
-With Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.
-
-## Resources
-
-Check out a few resources that may come in handy when working with NestJS:
-
-- Visit the [NestJS Documentation](https://docs.nestjs.com) to learn more about the framework.
-- For questions and support, please visit our [Discord channel](https://discord.gg/G7Qnnhy).
-- To dive deeper and get more hands-on experience, check out our official video [courses](https://courses.nestjs.com/).
-- Deploy your application to AWS with the help of [NestJS Mau](https://mau.nestjs.com) in just a few clicks.
-- Visualize your application graph and interact with the NestJS application in real-time using [NestJS Devtools](https://devtools.nestjs.com).
-- Need help with your project (part-time to full-time)? Check out our official [enterprise support](https://enterprise.nestjs.com).
-- To stay in the loop and get updates, follow us on [X](https://x.com/nestframework) and [LinkedIn](https://linkedin.com/company/nestjs).
-- Looking for a job, or have a job to offer? Check out our official [Jobs board](https://jobs.nestjs.com).
-
-## Support
-
-Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).
-
-## Stay in touch
-
-- Author - [Kamil Myśliwiec](https://twitter.com/kammysliwiec)
-- Website - [https://nestjs.com](https://nestjs.com/)
-- Twitter - [@nestframework](https://twitter.com/nestframework)
-
-## License
-
-Nest is [MIT licensed](https://github.com/nestjs/nest/blob/master/LICENSE).
diff --git a/launcher/auth-ms-broken-backup/dockerfile b/launcher/auth-ms-broken-backup/dockerfile
deleted file mode 100644
index 2492af0..0000000
--- a/launcher/auth-ms-broken-backup/dockerfile
+++ /dev/null
@@ -1,8 +0,0 @@
-FROM node:21-alpine3.19
-WORKDIR /usr/src/app
-COPY package.json ./
-COPY package-lock.json ./
-RUN npm install
-COPY . .
-EXPOSE 3000
- 
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/eslint.config.mjs b/launcher/auth-ms-broken-backup/eslint.config.mjs
deleted file mode 100644
index 32465cc..0000000
--- a/launcher/auth-ms-broken-backup/eslint.config.mjs
+++ /dev/null
@@ -1,35 +0,0 @@
-// @ts-check
-import eslint from '@eslint/js';
-import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
-import globals from 'globals';
-import tseslint from 'typescript-eslint';
-
-export default tseslint.config(
-  {
-    ignores: ['eslint.config.mjs'],
-  },
-  eslint.configs.recommended,
-  ...tseslint.configs.recommendedTypeChecked,
-  eslintPluginPrettierRecommended,
-  {
-    languageOptions: {
-      globals: {
-        ...globals.node,
-        ...globals.jest,
-      },
-      ecmaVersion: 5,
-      sourceType: 'module',
-      parserOptions: {
-        projectService: true,
-        tsconfigRootDir: import.meta.dirname,
-      },
-    },
-  },
-  {
-    rules: {
-      '@typescript-eslint/no-explicit-any': 'off',
-      '@typescript-eslint/no-floating-promises': 'warn',
-      '@typescript-eslint/no-unsafe-argument': 'warn'
-    },
-  },
-);
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/nest-cli.json b/launcher/auth-ms-broken-backup/nest-cli.json
deleted file mode 100644
index f9aa683..0000000
--- a/launcher/auth-ms-broken-backup/nest-cli.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "$schema": "https://json.schemastore.org/nest-cli",
-  "collection": "@nestjs/schematics",
-  "sourceRoot": "src",
-  "compilerOptions": {
-    "deleteOutDir": true
-  }
-}
diff --git a/launcher/auth-ms-broken-backup/package.json b/launcher/auth-ms-broken-backup/package.json
deleted file mode 100644
index 8bbd949..0000000
--- a/launcher/auth-ms-broken-backup/package.json
+++ /dev/null
@@ -1,83 +0,0 @@
-{
-  "name": "user-ms",
-  "version": "0.0.1",
-  "description": "",
-  "author": "",
-  "private": true,
-  "license": "UNLICENSED",
-  "scripts": {
-    "build": "nest build",
-    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
-    "start": "nest start",
-    "start:dev": "npm run docker:start && nest start --watch",
-    "docker:start": "npx prisma migrate deploy && npx prisma generate",
-    "start:debug": "nest start --debug --watch",
-    "start:prod": "node dist/main",
-    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
-    "test": "jest",
-    "test:watch": "jest --watch",
-    "test:cov": "jest --coverage",
-    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
-    "test:e2e": "jest --config ./test/jest-e2e.json"
-  },
-  "dependencies": {
-    "@nestjs/common": "^11.0.1",
-    "@nestjs/core": "^11.0.1",
-    "@nestjs/mapped-types": "*",
-    "@nestjs/microservices": "^11.0.11",
-    "@nestjs/platform-express": "^11.0.1",
-    "@prisma/client": "^6.8.2",
-    "class-transformer": "^0.5.1",
-    "class-validator": "^0.14.1",
-    "dotenv": "^16.4.7",
-    "joi": "^17.13.3",
-    "nats": "^2.29.2",
-    "reflect-metadata": "^0.2.2",
-    "rxjs": "^7.8.1"
-  },
-  "devDependencies": {
-    "@eslint/eslintrc": "^3.2.0",
-    "@eslint/js": "^9.18.0",
-    "@nestjs/cli": "^11.0.0",
-    "@nestjs/schematics": "^11.0.0",
-    "@nestjs/testing": "^11.0.1",
-    "@swc/cli": "^0.6.0",
-    "@swc/core": "^1.10.7",
-    "@types/express": "^5.0.0",
-    "@types/jest": "^29.5.14",
-    "@types/node": "^22.10.7",
-    "@types/supertest": "^6.0.2",
-    "eslint": "^9.18.0",
-    "eslint-config-prettier": "^10.0.1",
-    "eslint-plugin-prettier": "^5.2.2",
-    "globals": "^15.14.0",
-    "jest": "^29.7.0",
-    "prettier": "^3.4.2",
-    "prisma": "^6.8.2",
-    "source-map-support": "^0.5.21",
-    "supertest": "^7.0.0",
-    "ts-jest": "^29.2.5",
-    "ts-loader": "^9.5.2",
-    "ts-node": "^10.9.2",
-    "tsconfig-paths": "^4.2.0",
-    "typescript": "^5.7.3",
-    "typescript-eslint": "^8.20.0"
-  },
-  "jest": {
-    "moduleFileExtensions": [
-      "js",
-      "json",
-      "ts"
-    ],
-    "rootDir": "src",
-    "testRegex": ".*\\.spec\\.ts$",
-    "transform": {
-      "^.+\\.(t|j)s$": "ts-jest"
-    },
-    "collectCoverageFrom": [
-      "**/*.(t|j)s"
-    ],
-    "coverageDirectory": "../coverage",
-    "testEnvironment": "node"
-  }
-}
diff --git a/launcher/auth-ms-broken-backup/prisma/migrations/20250529092534_sync_changes/migration.sql b/launcher/auth-ms-broken-backup/prisma/migrations/20250529092534_sync_changes/migration.sql
deleted file mode 100644
index 106ea7c..0000000
--- a/launcher/auth-ms-broken-backup/prisma/migrations/20250529092534_sync_changes/migration.sql
+++ /dev/null
@@ -1,28 +0,0 @@
--- CreateTable
-CREATE TABLE "UserData" (
-    "id" TEXT NOT NULL,
-    "perfilPhoto" TEXT,
-    "birthDay" INTEGER,
-    "birthMonth" INTEGER,
-    "birthYear" INTEGER,
-    "phone" TEXT,
-    "contactEmail" TEXT,
-    "contactNames" TEXT,
-    "contactLastnames" TEXT,
-    "contactPhone" TEXT,
-    "sex" TEXT,
-
-    CONSTRAINT "UserData_pkey" PRIMARY KEY ("id")
-);
-
--- CreateTable
-CREATE TABLE "Favorites" (
-    "id" TEXT NOT NULL,
-    "idProfessional" TEXT NOT NULL,
-    "userId" TEXT NOT NULL,
-
-    CONSTRAINT "Favorites_pkey" PRIMARY KEY ("id")
-);
-
--- AddForeignKey
-ALTER TABLE "Favorites" ADD CONSTRAINT "Favorites_userId_fkey" FOREIGN KEY ("userId") REFERENCES "UserData"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
diff --git a/launcher/auth-ms-broken-backup/prisma/migrations/20250614185128_nombre_de_la_migracion/migration.sql b/launcher/auth-ms-broken-backup/prisma/migrations/20250614185128_nombre_de_la_migracion/migration.sql
deleted file mode 100644
index aa324c0..0000000
--- a/launcher/auth-ms-broken-backup/prisma/migrations/20250614185128_nombre_de_la_migracion/migration.sql
+++ /dev/null
@@ -1,3 +0,0 @@
--- AlterTable
-ALTER TABLE "UserData" ADD COLUMN     "city" TEXT,
-ADD COLUMN     "contactFamilly" TEXT;
diff --git a/launcher/auth-ms-broken-backup/prisma/migrations/20250614200551_nombre_de_la_migracion/migration.sql b/launcher/auth-ms-broken-backup/prisma/migrations/20250614200551_nombre_de_la_migracion/migration.sql
deleted file mode 100644
index dd2bf4e..0000000
--- a/launcher/auth-ms-broken-backup/prisma/migrations/20250614200551_nombre_de_la_migracion/migration.sql
+++ /dev/null
@@ -1,3 +0,0 @@
--- AlterTable
-ALTER TABLE "UserData" ADD COLUMN     "cityuser" TEXT,
-ADD COLUMN     "country" TEXT;
diff --git a/launcher/auth-ms-broken-backup/prisma/migrations/migration_lock.toml b/launcher/auth-ms-broken-backup/prisma/migrations/migration_lock.toml
deleted file mode 100644
index 044d57c..0000000
--- a/launcher/auth-ms-broken-backup/prisma/migrations/migration_lock.toml
+++ /dev/null
@@ -1,3 +0,0 @@
-# Please do not edit this file manually
-# It should be added in your version-control system (e.g., Git)
-provider = "postgresql"
diff --git a/launcher/auth-ms-broken-backup/prisma/schema.prisma b/launcher/auth-ms-broken-backup/prisma/schema.prisma
deleted file mode 100644
index 4c30857..0000000
--- a/launcher/auth-ms-broken-backup/prisma/schema.prisma
+++ /dev/null
@@ -1,40 +0,0 @@
-// This is your Prisma schema file,
-// learn more about it in the docs: https://pris.ly/d/prisma-schema
-
-// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
-// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
-
-generator client {
-  provider = "prisma-client-js"
-}
-
-datasource db {
-  provider = "postgresql"
-  url      = env("DATABASE_URL")
-}
-
-model UserData {
-  id               String      @id
-  perfilPhoto      String? // Campo opcional
-  birthDay         Int? // Campo opcional
-  birthMonth       Int? // Campo opcional
-  birthYear        Int? // Campo opcional
-  phone            String? // Campo opcional
-  contactEmail     String?
-  contactNames     String?
-  contactLastnames String?
-  contactFamilly   String?
-  contactPhone     String?
-  favorites        Favorites[]
-  sex              String? // Campo opcional
-  city             String?
-  cityuser         String?
-  country          String?
-}
-
-model Favorites {
-  id             String   @id @default(uuid())
-  idProfessional String
-  userId         String
-  user           UserData @relation(fields: [userId], references: [id])
-}
diff --git a/launcher/auth-ms-broken-backup/src/app.module.ts b/launcher/auth-ms-broken-backup/src/app.module.ts
deleted file mode 100644
index f685619..0000000
--- a/launcher/auth-ms-broken-backup/src/app.module.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import { Module } from '@nestjs/common';;
-import { UsersModule } from './users/users.module';
-
-@Module({
-  imports: [UsersModule],
-})
-export class AppModule {}
diff --git a/launcher/auth-ms-broken-backup/src/commont/cleardata.dto.ts b/launcher/auth-ms-broken-backup/src/commont/cleardata.dto.ts
deleted file mode 100644
index 374978d..0000000
--- a/launcher/auth-ms-broken-backup/src/commont/cleardata.dto.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { IsString } from "class-validator"
-
-export class clear_data {
-    @IsString()
-    id: string
-    @IsString()
-    idUser: string
-}
diff --git a/launcher/auth-ms-broken-backup/src/commont/confirm.data.dto.ts b/launcher/auth-ms-broken-backup/src/commont/confirm.data.dto.ts
deleted file mode 100644
index 1770ebf..0000000
--- a/launcher/auth-ms-broken-backup/src/commont/confirm.data.dto.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-export interface Confirm_data{
-    id:string;
-    userId:string;
-}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/commont/pagination.dto.ts b/launcher/auth-ms-broken-backup/src/commont/pagination.dto.ts
deleted file mode 100644
index 058bee4..0000000
--- a/launcher/auth-ms-broken-backup/src/commont/pagination.dto.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { Type } from "class-transformer";
-import { IsOptional, IsPositive } from "class-validator";
-
-export class PaginationDto {
-    @IsPositive()
-    @IsOptional()
-    @Type(()=>Number)
-    page ?: number = 1;
-
-    @IsPositive()
-    @IsOptional()
-    @Type(()=>Number)
-    limit?: number = 10;
-}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/config/envs.ts b/launcher/auth-ms-broken-backup/src/config/envs.ts
deleted file mode 100644
index b5b750e..0000000
--- a/launcher/auth-ms-broken-backup/src/config/envs.ts
+++ /dev/null
@@ -1,27 +0,0 @@
- 
-import 'dotenv/config';
-import * as joi from 'joi';
-interface EnvVars {
-    PORT:number;
-    NATS_SERVERS:string[];
-}
-
-const envsShema = joi.object({
-    PORT: joi.number().required(),
-    NATS_SERVERS:joi.array().items(joi.string()).required()
-}).unknown(true);
-
-const {error,value} = envsShema.validate({
-    ...process.env,
-    NATS_SERVERS :process.env.NATS_SERVERS?.split(',')  
-}  )
-
-if(error){
-    throw new Error(`Config validation error: ${error.message}`)
-}
-const envVars: EnvVars = value;
-
-export const  envs ={
-    port: envVars.PORT, 
-    natsServers:envVars.NATS_SERVERS,
-}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/config/index.ts b/launcher/auth-ms-broken-backup/src/config/index.ts
deleted file mode 100644
index d1bbe8c..0000000
--- a/launcher/auth-ms-broken-backup/src/config/index.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export  * from './envs';
-export * from './services'
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/config/services.ts b/launcher/auth-ms-broken-backup/src/config/services.ts
deleted file mode 100644
index d04157a..0000000
--- a/launcher/auth-ms-broken-backup/src/config/services.ts
+++ /dev/null
@@ -1 +0,0 @@
-export const NATS_SERVICE= 'NATS_SERVICE';
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/main.ts b/launcher/auth-ms-broken-backup/src/main.ts
deleted file mode 100644
index 8f42e1b..0000000
--- a/launcher/auth-ms-broken-backup/src/main.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import { NestFactory } from '@nestjs/core';
-import { AppModule } from './app.module';
-import { MicroserviceOptions, Transport } from '@nestjs/microservices';
-import { ValidationPipe } from '@nestjs/common';
-import { envs } from './config/envs';
-
-async function bootstrap() {
-  const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule,{
-    transport:Transport.NATS,
-    options:{
-      servers:envs.natsServers
-    }
-  });
- 
-  app.useGlobalPipes(
-    new ValidationPipe({
-      whitelist:true,
-      forbidNonWhitelisted:true,
-      transform:true
-    })
-  )
-  await app.listen();
-  
-}
-bootstrap();
diff --git a/launcher/auth-ms-broken-backup/src/users/controllers/user.favorites.controller.ts b/launcher/auth-ms-broken-backup/src/users/controllers/user.favorites.controller.ts
deleted file mode 100644
index 8fcd951..0000000
--- a/launcher/auth-ms-broken-backup/src/users/controllers/user.favorites.controller.ts
+++ /dev/null
@@ -1,32 +0,0 @@
-import { Controller } from "@nestjs/common"
-import { MessagePattern, Payload } from "@nestjs/microservices"
-import { UsersFavoriteServices } from "../services/users.favorites.service"
-import { Favorites_dto } from "../dto/Favorites/Favorites.dto"
-import { pagination_favorites } from "../dto/Favorites/Get.favorites.dto"
-
-@Controller()
-export class UsersFavoritesController {
-  constructor(private readonly usersServiceFavorites: UsersFavoriteServices) {}
-
-  @MessagePattern( 'add.favorites.user')
-  create_favorite_controller(@Payload() create_favorite:Favorites_dto){
-    return this.usersServiceFavorites.create_favorite(create_favorite)
-  }
-  @MessagePattern( 'delete.favorites.user')
-  delete_favorite_controller(@Payload() delete_favorite:Favorites_dto){
-    return this.usersServiceFavorites.delete_favorite(delete_favorite)
-  }
- 
-  @MessagePattern('get.my.favorites.user')
-  get_favorites_user_controller(@Payload() pagination_favorites:pagination_favorites){
- 
-    return this.usersServiceFavorites.get_favorites(pagination_favorites)
- 
-  }
-  @MessagePattern('check.favorites.user')
-  check_favorites_user_controller(@Payload() favorite_req:Favorites_dto){
- 
-    return this.usersServiceFavorites.check_user_favorite(favorite_req)
- 
-  }
-}
diff --git a/launcher/auth-ms-broken-backup/src/users/controllers/users.controller.ts b/launcher/auth-ms-broken-backup/src/users/controllers/users.controller.ts
deleted file mode 100644
index 03a6ab8..0000000
--- a/launcher/auth-ms-broken-backup/src/users/controllers/users.controller.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import { Controller } from '@nestjs/common';
-import { MessagePattern, Payload } from '@nestjs/microservices';
-import { UsersService } from '../services/users.service';
-import { CreateUserDataDto } from '../dto/userData';
-import { CurrentUser } from '../interfaces/current-user.interfaces';
-
-@Controller()
-export class UsersController {
-  constructor(private readonly usersService: UsersService) {}
-
-  @MessagePattern( 'user.example.user')
-  registerUser(){
-    return this.usersService.exampleUserdata()
-  }
- 
-  @MessagePattern('User.CreateUserData.User')
-  createdatabasic(@Payload() CreateUserDataDto:CreateUserDataDto){
-    return this.usersService.createUserData(CreateUserDataDto)
-  }
-  @MessagePattern('User.GetDataUser.User')
-  GetLocationsUser(@Payload() CurrentUser:CurrentUser ){
-    return this.usersService.GetUserData(CurrentUser)
-  }
-
-  @MessagePattern('User.id.data.User')
-  Get_data_user_id(@Payload() { id }: { id: string } ){
-    return this.usersService.get_user_by_id(id)
-  }
-}
diff --git a/launcher/auth-ms-broken-backup/src/users/dto/Favorites/Favorites.dto.ts b/launcher/auth-ms-broken-backup/src/users/dto/Favorites/Favorites.dto.ts
deleted file mode 100644
index 33bb8b9..0000000
--- a/launcher/auth-ms-broken-backup/src/users/dto/Favorites/Favorites.dto.ts
+++ /dev/null
@@ -1,18 +0,0 @@
- 
-import { IsOptional, IsString, IsInt, IsEmail } from 'class-validator';
-
-export class Favorites_dto {
- 
-  @IsString()
-  userId: string;
-
-  @IsString() // Necesario para identificar al usuario
-  ProfessionalId: string;
- 
-    
-}
-
-
-
-
-
diff --git a/launcher/auth-ms-broken-backup/src/users/dto/Favorites/Get.favorites.dto.ts b/launcher/auth-ms-broken-backup/src/users/dto/Favorites/Get.favorites.dto.ts
deleted file mode 100644
index 406e871..0000000
--- a/launcher/auth-ms-broken-backup/src/users/dto/Favorites/Get.favorites.dto.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { IsString } from "class-validator"
-import { PaginationDto } from "src/commont/pagination.dto"
-
-export class pagination_favorites extends PaginationDto{
-    @IsString()
-    idUser:string
-    
-    
-
-}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/users/dto/userData/CreateUserData.dto.ts b/launcher/auth-ms-broken-backup/src/users/dto/userData/CreateUserData.dto.ts
deleted file mode 100644
index ee9ad05..0000000
--- a/launcher/auth-ms-broken-backup/src/users/dto/userData/CreateUserData.dto.ts
+++ /dev/null
@@ -1,74 +0,0 @@
-
-import { IsOptional, IsString, IsInt, IsEmail } from 'class-validator';
-
-export class CreateUserDataDto {
-  @IsString()
-  names:string;
-
-  @IsString()
-  lastnames:string;
-
-  @IsOptional()
-  @IsString()
-  perfilPhoto?: string;
-
-  @IsString() // Necesario para identificar al usuario
-  userId: string;
-
-  @IsOptional()
-  @IsInt()
-  birthDay?: number;
-
-  @IsOptional()
-  @IsInt()
-  birthMonth?: number;
-
-  @IsOptional()
-  @IsInt()
-  birthYear?: number;
-
-  @IsOptional()
-  @IsString()
-  phone?: string;
-
-  @IsOptional()
-  @IsEmail()
-  contactEmail?: string;
-
-  @IsOptional()
-  @IsString()
-  contactNames?: string;
-
-  @IsOptional()
-  @IsString()
-  contactLastnames?: string;
-
-  @IsOptional()
-  @IsString()
-  sex?: string;
-
-  @IsOptional()
-  @IsString()
-  contactPhone?: string;
-
-  @IsOptional()
-  @IsString()
-  familly?: string;
-
-  @IsOptional()
-  @IsString()
-  city?: string;
-
-  @IsOptional()
-  @IsString()
-  cityuser ?: string;
-
-  @IsOptional()
-  @IsString()
-  country?: string;
-}
-
-
-
-
-
diff --git a/launcher/auth-ms-broken-backup/src/users/dto/userData/index.ts b/launcher/auth-ms-broken-backup/src/users/dto/userData/index.ts
deleted file mode 100644
index a09b47a..0000000
--- a/launcher/auth-ms-broken-backup/src/users/dto/userData/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './CreateUserData.dto'
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/users/interfaces/current-user.interfaces.ts b/launcher/auth-ms-broken-backup/src/users/interfaces/current-user.interfaces.ts
deleted file mode 100644
index 81a1771..0000000
--- a/launcher/auth-ms-broken-backup/src/users/interfaces/current-user.interfaces.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-export interface CurrentUser{
-    id:string;
-    name:string;
-    email:string;
-}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/users/services/users.favorites.service.ts b/launcher/auth-ms-broken-backup/src/users/services/users.favorites.service.ts
deleted file mode 100644
index 5e5e21e..0000000
--- a/launcher/auth-ms-broken-backup/src/users/services/users.favorites.service.ts
+++ /dev/null
@@ -1,213 +0,0 @@
-import { Inject, Injectable, OnModuleInit } from "@nestjs/common";
-import { PrismaClient } from "@prisma/client";
-import { Favorites_dto } from "../dto/Favorites/Favorites.dto";
-import { ClientProxy, RpcException } from "@nestjs/microservices";
-import { firstValueFrom } from "rxjs";
-
-import { pagination_favorites } from "../dto/Favorites/Get.favorites.dto";
-import { NATS_SERVICE } from "src/config";
-
-@Injectable()
-export class UsersFavoriteServices extends PrismaClient implements OnModuleInit {
-    constructor(@Inject(NATS_SERVICE) private readonly client: ClientProxy) {
-        super();
-    }
-    onModuleInit() {
-        this.$connect();
-
-    }
-
-
-    async create_favorite(Favorites_dto: Favorites_dto) {
-        try {
-            const { ProfessionalId, userId } = Favorites_dto;
-            // check professional
-            const check_partner = await firstValueFrom(
-                this.client.send('check.id.partner', {
-                    id: ProfessionalId
-                })
-            )
-            if (check_partner.data !== true) {
-                throw new RpcException({
-                    status: 400,
-                    message: 'No existe el profeccional'
-                });
-            }
-            const user = this.userData.findFirst({
-                where: {
-                    id: userId
-                }
-            })
-            if (!user) {
-                throw new RpcException({
-                    status: 400,
-                    message: 'No se encontro el usuario'
-                });
-            }
-            const checkFavorite = await this.favorites.findFirst({
-                where: {
-                    idProfessional: ProfessionalId,
-                    userId: userId
-                }
-            })
-            if (!checkFavorite) {
-                // Crete favorite and add user
-                const favorite = await this.favorites.create({
-                    data: {
-                        idProfessional: ProfessionalId,
-                        user: {
-                            connect: { id: userId },
-                        },
-                    },
-                });
-                return {
-                    status: 200,
-                    data: favorite
-                }
-            } else {
-                throw new RpcException({
-                    status: 400,
-                    message: 'Ya tienes este usuario de favorito'
-                });
-            }
-        } catch (error) {
-            throw new RpcException({
-                status: 400,
-                message: error.message
-            });
-        }
-    }
-
-    async delete_favorite(Favorites_dto: Favorites_dto) {
-        const { userId, ProfessionalId } = Favorites_dto;
-
-        try {
-            // Verifica si existe el favorito y pertenece al usuario
-            const favorite = await this.favorites.findFirst({
-                where: {
-                    userId: userId,
-                    idProfessional: ProfessionalId,
-                },
-            });
-
-            if (!favorite) {
-                throw new RpcException({
-                    status: 404,
-                    message: 'No se encontró el favorito para este usuario',
-                });
-            }
-
-            // Elimina el favorito
-            await this.favorites.delete({
-                where: { id: favorite.id },
-            });
-
-            return {
-                status: 200,
-                message: 'Favorito eliminado correctamente',
-            };
-
-        } catch (error) {
-            throw new RpcException({
-                status: 400,
-                message: error.message,
-            });
-        }
-    }
-
-    async get_favorites(pagination_favorites: pagination_favorites) {
-        try {
-            const { limit, page, idUser } = pagination_favorites;
-            const currentPage = page ?? 1;
-            const perPage = limit ?? 10;
-            // total datas
-            const total = await this.favorites.count({
-                where: {
-                    userId: idUser
-                }
-            });
-            const result = await this.favorites.findMany({
-                skip: (currentPage - 1) * perPage,
-                take: perPage,
-                where: {
-                    userId: idUser
-                },
-                select: {
-                    id: true,
-                    userId: true,
-                    idProfessional: true
-                }
-            });
-
-
-
-            const listProfessionals = await Promise.all(
-                result.map(async (item) => {
-                    try {
-                        if (!item.idProfessional) throw new Error('idProfessional no definido');
-
-                        const professional_item = await firstValueFrom(
-                            this.client.send('get.partner.detail.user', { id: item.idProfessional })
-                        );
-                        const firstSpecialit = professional_item.data.specialists?.[0]?.name ?? null;
-
-                       
-                        return {
-                            id: professional_item.data.id,
-                            name: professional_item.data.name,
-                            perfilPhoto: professional_item.data.perfilPhoto,
-                            title: professional_item.data.title,
-                            description: professional_item.data.description,
-                            first:firstSpecialit
-                        }
-                    } catch (error) {
-                        console.error(`Error al obtener el detalle del profesional ${item.idProfessional}:`, error.message);
-                        return null; // o manejar como gustes
-                    }
-                })
-            );
-
-            return {
-                status: 200,
-                data: listProfessionals,
-                meta: {
-                    total,
-                    page: currentPage,
-                    lastPage: Math.ceil(total / perPage)
-                }
-            };
-        } catch (error) {
-            throw new RpcException({
-                status: 400,
-                message: error.message,
-            });
-        }
-    }
-    async check_user_favorite(Favorites_dto: Favorites_dto) {
-        try {
-            const { ProfessionalId, userId } = Favorites_dto;
-            const favorite = await this.favorites.findFirst({
-                where: {
-                    userId: userId,
-                    idProfessional: ProfessionalId
-                }
-            })
-            if (!favorite) {
-                return {
-                    status: 200,
-                    data: false
-                }
-            } else {
-                return {
-                    status: 200,
-                    data: true
-                }
-            }
-        } catch (error) {
-            throw new RpcException({
-                status: 400,
-                message: error.message,
-            });
-        }
-    }
-}
diff --git a/launcher/auth-ms-broken-backup/src/users/services/users.service.ts b/launcher/auth-ms-broken-backup/src/users/services/users.service.ts
deleted file mode 100644
index 6f4dd67..0000000
--- a/launcher/auth-ms-broken-backup/src/users/services/users.service.ts
+++ /dev/null
@@ -1,242 +0,0 @@
-import { Inject, Injectable, Logger, OnModuleInit } from '@nestjs/common';
-import { PrismaClient } from '@prisma/client';
-import { CreateUserDataDto } from '../dto/userData';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-
-import { CurrentUser } from '../interfaces/current-user.interfaces';
-import { auhPathcNameDto } from '../dto/auth-ms/authPathNames.dto';
-import { NATS_SERVICE } from 'src/config';
-import { firstValueFrom } from 'rxjs';
-
-
-
-@Injectable()
-export class UsersService extends PrismaClient implements OnModuleInit {
-  private readonly logger = new Logger('Module userdata')
-
-  constructor(
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super()
-  }
-  onModuleInit() {
-    this.$connect();
-
-  }
-  async getUserData() {
-
-  }
-
-  async createUserData(createUserDataDto: CreateUserDataDto) {
-    try {
-      const {
-        names,
-        lastnames,
-        userId,
-        perfilPhoto,
-        phone,
-        birthDay,
-        birthMonth,
-        birthYear,
-        contactEmail,
-        contactNames,
-        contactLastnames,
-        contactPhone,
-        sex,
-        city,
-        familly,
-        cityuser,
-        country
-      } = createUserDataDto;
-
-      // search user
-      const existingUser = await this.userData.findUnique({
-        where: { id: userId }
-      });
-
-      const userData = {
-        perfilPhoto: perfilPhoto || null,
-        phone: phone || null,
-        birthDay: birthDay || null,
-        birthMonth: birthMonth || null,
-        birthYear: birthYear || null,
-        contactEmail: contactEmail || null,
-        contactNames: contactNames || null,
-        contactLastnames: contactLastnames || null,
-        contactPhone: contactPhone || null,
-        sex: sex || null,
-        city: city || null,
-        contactFamilly: familly || null,
-        cityuser: cityuser || null,
-        country: country || null,
-
-      };
-
-      if (existingUser) {
-        // user exists update data 
-        const sendUthUpdate: auhPathcNameDto = {
-          names, lastnames, id: userId
-        }
-        const dataAuth = await firstValueFrom(
-          this.client.send('auth-ms.patch.names.user', sendUthUpdate)
-        )
-
-
-        const { data } = await this.updateUserData(userId, createUserDataDto)
-        return {
-          status: 200,
-          data: data,
-          auth: dataAuth
-        };
-      }
-
-      // create user not exists user
-      const createdUser = await this.userData.create({
-        data: {
-          id: userId,
-          ...userData
-        }
-      });
-      const sendUthUpdate: auhPathcNameDto = {
-        names, lastnames, id: userId
-      }
-      const dataAuth = await firstValueFrom(
-        this.client.send('auth-ms.patch.names.user', sendUthUpdate)
-      )
-
-      return {
-        status: 200,
-        data: createdUser,
-        auth: dataAuth
-      };
-
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message,
-      });
-    }
-  }
-
-  async updateUserData(userId: string, updateDto: CreateUserDataDto) {
-    try {
-      // Verificar si el usuario existe
-      const user = await this.userData.findUnique({
-        where: { id: userId }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          status: 404,
-          message: `EL usuario con id '${userId}' no existe`
-        });
-      }
-      const {
-        perfilPhoto,
-        phone,
-        birthDay,
-        birthMonth,
-        birthYear,
-        contactEmail,
-        contactNames,
-        contactLastnames,
-        contactPhone,
-        sex,
-        city,
-        familly,
-        country,
-        cityuser
-      } = updateDto;
-
-      const updatedUser = await this.userData.update({
-        where: { id: userId },
-        data: {
-          perfilPhoto,
-          phone,
-          birthDay,
-          birthMonth,
-          birthYear,
-          contactEmail,
-          contactNames,
-          contactLastnames,
-          contactPhone,
-          sex,
-          city,
-          contactFamilly: familly,
-          cityuser,
-          country
-        }
-      });
-
-      return {
-        status: 200,
-        data: updatedUser
-      };
-
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message
-      });
-    }
-  }
-
-
-  async GetUserData(CurrentUser: CurrentUser) {
-    try {
-      const { id } = CurrentUser;
-      const user = await this.userData.findUnique({
-        where: {
-          id: id
-        },
-
-      })
-      if (!user) {
-        throw new RpcException({
-          status: 400,
-          message: 'Not exist data User'
-        })
-      }
-      return {
-        status: 200,
-        data: user
-      }
-
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message
-      })
-    }
-  }
-
-  async get_user_by_id(id: string) {
-    try {
-      const user = await this.userData.findFirst({
-        where: {
-          id
-        }
-      })
-      if (!user) {
-        throw new RpcException({
-          status: 400,
-          message: "no se encontro el usuario con id " + id
-        })
-      }
-      return {
-        status: 200,
-        data: user
-      }
-    } catch (error) {
-      throw new RpcException({
-        status: 400,
-        message: error.message
-      })
-    }
-  }
-
-
-  async exampleUserdata() {
-    return "example module modifier"
-  }
-}
diff --git a/launcher/auth-ms-broken-backup/src/users/users.module.ts b/launcher/auth-ms-broken-backup/src/users/users.module.ts
deleted file mode 100644
index 433c766..0000000
--- a/launcher/auth-ms-broken-backup/src/users/users.module.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { Module } from '@nestjs/common';
-import { UsersService } from './services/users.service';
-import { UsersController } from './controllers/users.controller';
-import { UsersFavoriteServices } from './services/users.favorites.service';
-import { UsersFavoritesController } from './controllers/user.favorites.controller';
-import { NatsModule } from './transport/nast.module';
- 
-
-@Module({
-  imports:[NatsModule],
-  controllers: [UsersController,UsersFavoritesController],
-  providers: [UsersService,UsersFavoriteServices],
-})
-export class UsersModule {}
diff --git a/launcher/auth-ms-broken-backup/test/app.e2e-spec.ts b/launcher/auth-ms-broken-backup/test/app.e2e-spec.ts
deleted file mode 100644
index 4df6580..0000000
--- a/launcher/auth-ms-broken-backup/test/app.e2e-spec.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import { Test, TestingModule } from '@nestjs/testing';
-import { INestApplication } from '@nestjs/common';
-import * as request from 'supertest';
-import { App } from 'supertest/types';
-import { AppModule } from './../src/app.module';
-
-describe('AppController (e2e)', () => {
-  let app: INestApplication<App>;
-
-  beforeEach(async () => {
-    const moduleFixture: TestingModule = await Test.createTestingModule({
-      imports: [AppModule],
-    }).compile();
-
-    app = moduleFixture.createNestApplication();
-    await app.init();
-  });
-
-  it('/ (GET)', () => {
-    return request(app.getHttpServer())
-      .get('/')
-      .expect(200)
-      .expect('Hello World!');
-  });
-});
diff --git a/launcher/auth-ms-broken-backup/test/jest-e2e.json b/launcher/auth-ms-broken-backup/test/jest-e2e.json
deleted file mode 100644
index e9d912f..0000000
--- a/launcher/auth-ms-broken-backup/test/jest-e2e.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-  "moduleFileExtensions": ["js", "json", "ts"],
-  "rootDir": ".",
-  "testEnvironment": "node",
-  "testRegex": ".e2e-spec.ts$",
-  "transform": {
-    "^.+\\.(t|j)s$": "ts-jest"
-  }
-}
diff --git a/launcher/auth-ms-broken-backup/tsconfig.build.json b/launcher/auth-ms-broken-backup/tsconfig.build.json
deleted file mode 100644
index 64f86c6..0000000
--- a/launcher/auth-ms-broken-backup/tsconfig.build.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-  "extends": "./tsconfig.json",
-  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
-}
diff --git a/launcher/auth-ms-broken-backup/tsconfig.json b/launcher/auth-ms-broken-backup/tsconfig.json
deleted file mode 100644
index 2169963..0000000
--- a/launcher/auth-ms-broken-backup/tsconfig.json
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-  "compilerOptions": {
-    "module": "commonjs",
-    "declaration": true,
-    "removeComments": true,
-    "emitDecoratorMetadata": true,
-    "experimentalDecorators": true,
-    "allowSyntheticDefaultImports": true,
-    "target": "ES2021",
-    "sourceMap": true,
-    "outDir": "./dist",
-    "baseUrl": "./",
-    "incremental": true,
-    "skipLibCheck": true,
-    "strictNullChecks": true,
-    "forceConsistentCasingInFileNames": true,
-    "noImplicitAny": false,
-    "strictBindCallApply": false,
-    "noFallthroughCasesInSwitch": false
-  }
-}
diff --git a/launcher/auth-ms/.env.template b/launcher/auth-ms/.env.template
index 4579d71..32f38d2 100644
--- a/launcher/auth-ms/.env.template
+++ b/launcher/auth-ms/.env.template
@@ -1,3 +1,11 @@
-PORT=3002
+PORT=3001
 NATS_SERVERS="nats://localhost:4222"
-DATABASE_URL="postgresql://postgres:123456@localhost:5432/docdb?schema=public"
\ No newline at end of file
+JWT_SECRET='Estoesunstringsegurojeje'
+# This was inserted by `prisma init`:
+# Environment variables declared in this file are automatically made available to Prisma.
+# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema
+
+# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
+# See the documentation for all the connection string options: https://pris.ly/d/connection-strings
+
+DATABASE_URL="postgresql://postgres:123456@localhost:5433/docdb?schema=public"
\ No newline at end of file
diff --git a/launcher/auth-ms/dockerfile b/launcher/auth-ms/dockerfile
index 06b4876..873ab15 100644
--- a/launcher/auth-ms/dockerfile
+++ b/launcher/auth-ms/dockerfile
@@ -2,15 +2,15 @@ FROM node:21-alpine3.19
 
 WORKDIR /usr/src/app
 
-# Copiar solo package.json
-COPY package.json ./
+# Instala herramientas necesarias para compilar bcrypt (correcto)
+RUN apk add --no-cache openssl python3 make g++
 
-# Instalar dependencias con legacy-peer-deps para evitar conflictos
-RUN npm install --legacy-peer-deps
+# Copia archivos de dependencias
+COPY package.json package-lock.json ./
+RUN npm install && npm rebuild bcrypt --build-from-source
 
-# Copiar el resto del código
+# Copia el resto del código
 COPY . .
 
+# Expone el puerto 3001
 EXPOSE 3001
-
-CMD ["npm", "run", "start:dev"]
diff --git a/launcher/auth-ms-broken-backup/package-lock.json b/launcher/auth-ms/package-lock.json
similarity index 93%
rename from launcher/auth-ms-broken-backup/package-lock.json
rename to launcher/auth-ms/package-lock.json
index 4022a63..a17d883 100644
--- a/launcher/auth-ms-broken-backup/package-lock.json
+++ b/launcher/auth-ms/package-lock.json
@@ -1,20 +1,22 @@
 {
-  "name": "user-ms",
+  "name": "auth-ms",
   "version": "0.0.1",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
-      "name": "user-ms",
+      "name": "auth-ms",
       "version": "0.0.1",
       "license": "UNLICENSED",
       "dependencies": {
         "@nestjs/common": "^11.0.1",
         "@nestjs/core": "^11.0.1",
+        "@nestjs/jwt": "^11.0.0",
         "@nestjs/mapped-types": "*",
         "@nestjs/microservices": "^11.0.11",
         "@nestjs/platform-express": "^11.0.1",
         "@prisma/client": "^6.8.2",
+        "bcrypt": "^5.1.1",
         "class-transformer": "^0.5.1",
         "class-validator": "^0.14.1",
         "dotenv": "^16.4.7",
@@ -31,6 +33,7 @@
         "@nestjs/testing": "^11.0.1",
         "@swc/cli": "^0.6.0",
         "@swc/core": "^1.10.7",
+        "@types/bcrypt": "^5.0.2",
         "@types/express": "^5.0.0",
         "@types/jest": "^29.5.14",
         "@types/node": "^22.10.7",
@@ -813,16 +816,6 @@
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@eslint/config-helpers": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.1.0.tgz",
-      "integrity": "sha512-kLrdPDJE1ckPo94kmPPf9Hfd0DU0Jw6oKYrhe+pwSC0iTUInmTa+w6fw8sGgcfkFJGNdWOUeOaDM4quW4a7OkA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
     "node_modules/@eslint/core": {
       "version": "0.12.0",
       "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
@@ -874,9 +867,9 @@
       }
     },
     "node_modules/@eslint/js": {
-      "version": "9.22.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.22.0.tgz",
-      "integrity": "sha512-vLFajx9o8d1/oL2ZkpMYbkLv8nDB6yaIwFNt7nI4+I80U/z03SxmfOMsLbvWr3p7C+Wnoh//aOu2pQW8cS0HCQ==",
+      "version": "9.21.0",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.21.0.tgz",
+      "integrity": "sha512-BqStZ3HX8Yz6LvsF5ByXYrtigrV5AXADWLAGc7PH/1SxOb7/FIYYMszZZWiUou/GB9P2lXWk2SV4d+Z8h0nknw==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -989,15 +982,15 @@
       }
     },
     "node_modules/@inquirer/checkbox": {
-      "version": "4.1.3",
-      "resolved": "https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-4.1.3.tgz",
-      "integrity": "sha512-KU1MGwf24iABJjGESxhyj+/rlQYSRoCfcuHDEHXfZ1DENmbuSRfyrUb+LLjHoee5TNOFKwaFxDXc5/zRwJUPMQ==",
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-4.1.2.tgz",
+      "integrity": "sha512-PL9ixC5YsPXzXhAZFUPmkXGxfgjkdfZdPEPPmt4kFwQ4LBMDG9n/nHXYRGGZSKZJs+d1sGKWgS2GiPzVRKUdtQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/figures": "^1.0.11",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/figures": "^1.0.10",
+        "@inquirer/type": "^3.0.4",
         "ansi-escapes": "^4.3.2",
         "yoctocolors-cjs": "^2.1.2"
       },
@@ -1014,14 +1007,14 @@
       }
     },
     "node_modules/@inquirer/confirm": {
-      "version": "5.1.7",
-      "resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-5.1.7.tgz",
-      "integrity": "sha512-Xrfbrw9eSiHb+GsesO8TQIeHSMTP0xyvTCeeYevgZ4sKW+iz9w/47bgfG9b0niQm+xaLY2EWPBINUPldLwvYiw==",
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-5.1.6.tgz",
+      "integrity": "sha512-6ZXYK3M1XmaVBZX6FCfChgtponnL0R6I7k8Nu+kaoNkT828FVZTcca1MqmWQipaW2oNREQl5AaPCUOOCVNdRMw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5"
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4"
       },
       "engines": {
         "node": ">=18"
@@ -1036,14 +1029,14 @@
       }
     },
     "node_modules/@inquirer/core": {
-      "version": "10.1.8",
-      "resolved": "https://registry.npmjs.org/@inquirer/core/-/core-10.1.8.tgz",
-      "integrity": "sha512-HpAqR8y715zPpM9e/9Q+N88bnGwqqL8ePgZ0SMv/s3673JLMv3bIkoivGmjPqXlEgisUksSXibweQccUwEx4qQ==",
+      "version": "10.1.7",
+      "resolved": "https://registry.npmjs.org/@inquirer/core/-/core-10.1.7.tgz",
+      "integrity": "sha512-AA9CQhlrt6ZgiSy6qoAigiA1izOa751ugX6ioSjqgJ+/Gd+tEN/TORk5sUYNjXuHWfW0r1n/a6ak4u/NqHHrtA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/figures": "^1.0.11",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/figures": "^1.0.10",
+        "@inquirer/type": "^3.0.4",
         "ansi-escapes": "^4.3.2",
         "cli-width": "^4.1.0",
         "mute-stream": "^2.0.0",
@@ -1064,14 +1057,14 @@
       }
     },
     "node_modules/@inquirer/editor": {
-      "version": "4.2.8",
-      "resolved": "https://registry.npmjs.org/@inquirer/editor/-/editor-4.2.8.tgz",
-      "integrity": "sha512-UkGKbMFlQw5k4ZLjDwEi5z8NIVlP/3DAlLHta0o0pSsdpPThNmPtUL8mvGCHUaQtR+QrxR9yRYNWgKMsHkfIUA==",
+      "version": "4.2.7",
+      "resolved": "https://registry.npmjs.org/@inquirer/editor/-/editor-4.2.7.tgz",
+      "integrity": "sha512-gktCSQtnSZHaBytkJKMKEuswSk2cDBuXX5rxGFv306mwHfBPjg5UAldw9zWGoEyvA9KpRDkeM4jfrx0rXn0GyA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4",
         "external-editor": "^3.1.0"
       },
       "engines": {
@@ -1087,14 +1080,14 @@
       }
     },
     "node_modules/@inquirer/expand": {
-      "version": "4.0.10",
-      "resolved": "https://registry.npmjs.org/@inquirer/expand/-/expand-4.0.10.tgz",
-      "integrity": "sha512-leyBouGJ77ggv51Jb/OJmLGGnU2HYc13MZ2iiPNLwe2VgFgZPVqsrRWSa1RAHKyazjOyvSNKLD1B2K7A/iWi1g==",
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@inquirer/expand/-/expand-4.0.9.tgz",
+      "integrity": "sha512-Xxt6nhomWTAmuSX61kVgglLjMEFGa+7+F6UUtdEUeg7fg4r9vaFttUUKrtkViYYrQBA5Ia1tkOJj2koP9BuLig==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4",
         "yoctocolors-cjs": "^2.1.2"
       },
       "engines": {
@@ -1110,9 +1103,9 @@
       }
     },
     "node_modules/@inquirer/figures": {
-      "version": "1.0.11",
-      "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.11.tgz",
-      "integrity": "sha512-eOg92lvrn/aRUqbxRyvpEWnrvRuTYRifixHkYVpJiygTgVSBIHDqLh0SrMQXkafvULg3ck11V7xvR+zcgvpHFw==",
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.10.tgz",
+      "integrity": "sha512-Ey6176gZmeqZuY/W/nZiUyvmb1/qInjcpiZjXWi6nON+nxJpD1bxtSoBxNliGISae32n6OwbY+TSXPZ1CfS4bw==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -1120,14 +1113,14 @@
       }
     },
     "node_modules/@inquirer/input": {
-      "version": "4.1.7",
-      "resolved": "https://registry.npmjs.org/@inquirer/input/-/input-4.1.7.tgz",
-      "integrity": "sha512-rCQAipJNA14UTH84df/z4jDJ9LZ54H6zzuCAi7WZ0qVqx3CSqLjfXAMd5cpISIxbiHVJCPRB81gZksq6CZsqDg==",
+      "version": "4.1.6",
+      "resolved": "https://registry.npmjs.org/@inquirer/input/-/input-4.1.6.tgz",
+      "integrity": "sha512-1f5AIsZuVjPT4ecA8AwaxDFNHny/tSershP/cTvTDxLdiIGTeILNcKozB0LaYt6mojJLUbOYhpIxicaYf7UKIQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5"
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4"
       },
       "engines": {
         "node": ">=18"
@@ -1142,14 +1135,14 @@
       }
     },
     "node_modules/@inquirer/number": {
-      "version": "3.0.10",
-      "resolved": "https://registry.npmjs.org/@inquirer/number/-/number-3.0.10.tgz",
-      "integrity": "sha512-GLsdnxzNefjCJUmWyjaAuNklHgDpCTL4RMllAVhVvAzBwRW9g38eZ5tWgzo1lirtSDTpsh593hqXVhxvdrjfwA==",
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/@inquirer/number/-/number-3.0.9.tgz",
+      "integrity": "sha512-iN2xZvH3tyIYXLXBvlVh0npk1q/aVuKXZo5hj+K3W3D4ngAEq/DkLpofRzx6oebTUhBvOgryZ+rMV0yImKnG3w==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5"
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4"
       },
       "engines": {
         "node": ">=18"
@@ -1164,14 +1157,14 @@
       }
     },
     "node_modules/@inquirer/password": {
-      "version": "4.0.10",
-      "resolved": "https://registry.npmjs.org/@inquirer/password/-/password-4.0.10.tgz",
-      "integrity": "sha512-JC538ujqeYKkFqLoWZ0ILBteIUO2yajBMVEUZSxjl9x6fiEQtM+I5Rca7M2D8edMDbyHLnXifGH1hJZdh8V5rA==",
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@inquirer/password/-/password-4.0.9.tgz",
+      "integrity": "sha512-xBEoOw1XKb0rIN208YU7wM7oJEHhIYkfG7LpTJAEW913GZeaoQerzf5U/LSHI45EVvjAdgNXmXgH51cUXKZcJQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4",
         "ansi-escapes": "^4.3.2"
       },
       "engines": {
@@ -1217,14 +1210,14 @@
       }
     },
     "node_modules/@inquirer/rawlist": {
-      "version": "4.0.10",
-      "resolved": "https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-4.0.10.tgz",
-      "integrity": "sha512-vOQbQkmhaCsF2bUmjoyRSZJBz77UnIF/F3ZS2LMgwbgyaG2WgwKHh0WKNj0APDB72WDbZijhW5nObQbk+TnbcA==",
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-4.0.9.tgz",
+      "integrity": "sha512-+5t6ebehKqgoxV8fXwE49HkSF2Rc9ijNiVGEQZwvbMI61/Q5RcD+jWD6Gs1tKdz5lkI8GRBL31iO0HjGK1bv+A==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/type": "^3.0.4",
         "yoctocolors-cjs": "^2.1.2"
       },
       "engines": {
@@ -1240,15 +1233,15 @@
       }
     },
     "node_modules/@inquirer/search": {
-      "version": "3.0.10",
-      "resolved": "https://registry.npmjs.org/@inquirer/search/-/search-3.0.10.tgz",
-      "integrity": "sha512-EAVKAz6P1LajZOdoL+R+XC3HJYSU261fbJzO4fCkJJ7UPFcm+nP+gzC+DDZWsb2WK9PQvKsnaKiNKsY8B6dBWQ==",
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/@inquirer/search/-/search-3.0.9.tgz",
+      "integrity": "sha512-DWmKztkYo9CvldGBaRMr0ETUHgR86zE6sPDVOHsqz4ISe9o1LuiWfgJk+2r75acFclA93J/lqzhT0dTjCzHuoA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/figures": "^1.0.11",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/figures": "^1.0.10",
+        "@inquirer/type": "^3.0.4",
         "yoctocolors-cjs": "^2.1.2"
       },
       "engines": {
@@ -1264,15 +1257,15 @@
       }
     },
     "node_modules/@inquirer/select": {
-      "version": "4.0.10",
-      "resolved": "https://registry.npmjs.org/@inquirer/select/-/select-4.0.10.tgz",
-      "integrity": "sha512-Tg8S9nESnCfISu5tCZSuXpXq0wHuDVimj7xyHstABgR34zcJnLdq/VbjB2mdZvNAMAehYBnNzSjxB06UE8LLAA==",
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@inquirer/select/-/select-4.0.9.tgz",
+      "integrity": "sha512-BpJyJe7Dkhv2kz7yG7bPSbJLQuu/rqyNlF1CfiiFeFwouegfH+zh13KDyt6+d9DwucKo7hqM3wKLLyJxZMO+Xg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@inquirer/core": "^10.1.8",
-        "@inquirer/figures": "^1.0.11",
-        "@inquirer/type": "^3.0.5",
+        "@inquirer/core": "^10.1.7",
+        "@inquirer/figures": "^1.0.10",
+        "@inquirer/type": "^3.0.4",
         "ansi-escapes": "^4.3.2",
         "yoctocolors-cjs": "^2.1.2"
       },
@@ -1289,9 +1282,9 @@
       }
     },
     "node_modules/@inquirer/type": {
-      "version": "3.0.5",
-      "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-3.0.5.tgz",
-      "integrity": "sha512-ZJpeIYYueOz/i/ONzrfof8g89kNdO2hjGuvULROo3O8rlB2CRtSseE5KeirnyE4t/thAn/EwvS/vuQeJCn+NZg==",
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-3.0.4.tgz",
+      "integrity": "sha512-2MNFrDY8jkFYc9Il9DgLsHhMzuHnOYM1+CUYVWbzu9oT0hC7V7EcYvdCKeoll/Fcci04A+ERZ9wcc7cQ8lTkIA==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -1930,6 +1923,50 @@
         "node": ">=8"
       }
     },
+    "node_modules/@mapbox/node-pre-gyp": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
+      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "detect-libc": "^2.0.0",
+        "https-proxy-agent": "^5.0.0",
+        "make-dir": "^3.1.0",
+        "node-fetch": "^2.6.7",
+        "nopt": "^5.0.0",
+        "npmlog": "^5.0.1",
+        "rimraf": "^3.0.2",
+        "semver": "^7.3.5",
+        "tar": "^6.1.11"
+      },
+      "bin": {
+        "node-pre-gyp": "bin/node-pre-gyp"
+      }
+    },
+    "node_modules/@mapbox/node-pre-gyp/node_modules/make-dir": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
+      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@mapbox/node-pre-gyp/node_modules/make-dir/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/@napi-rs/nice": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/@napi-rs/nice/-/nice-1.0.1.tgz",
@@ -2365,6 +2402,19 @@
         }
       }
     },
+    "node_modules/@nestjs/jwt": {
+      "version": "11.0.0",
+      "resolved": "https://registry.npmjs.org/@nestjs/jwt/-/jwt-11.0.0.tgz",
+      "integrity": "sha512-v7YRsW3Xi8HNTsO+jeHSEEqelX37TVWgwt+BcxtkG/OfXJEOs6GZdbdza200d6KqId1pJQZ6UPj1F0M6E+mxaA==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/jsonwebtoken": "9.0.7",
+        "jsonwebtoken": "9.0.2"
+      },
+      "peerDependencies": {
+        "@nestjs/common": "^8.0.0 || ^9.0.0 || ^10.0.0 || ^11.0.0"
+      }
+    },
     "node_modules/@nestjs/mapped-types": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/@nestjs/mapped-types/-/mapped-types-2.1.0.tgz",
@@ -2872,9 +2922,9 @@
       }
     },
     "node_modules/@swc/core": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core/-/core-1.11.8.tgz",
-      "integrity": "sha512-UAL+EULxrc0J73flwYHfu29mO8CONpDJiQv1QPDXsyCvDUcEhqAqUROVTgC+wtJCFFqMQdyr4stAA5/s0KSOmA==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core/-/core-1.11.7.tgz",
+      "integrity": "sha512-ICuzjyfz8Hh3U16Mb21uCRJeJd/lUgV999GjgvPhJSISM1L8GDSB5/AMNcwuGs7gFywTKI4vAeeXWyCETUXHAg==",
       "dev": true,
       "hasInstallScript": true,
       "license": "Apache-2.0",
@@ -2890,16 +2940,16 @@
         "url": "https://opencollective.com/swc"
       },
       "optionalDependencies": {
-        "@swc/core-darwin-arm64": "1.11.8",
-        "@swc/core-darwin-x64": "1.11.8",
-        "@swc/core-linux-arm-gnueabihf": "1.11.8",
-        "@swc/core-linux-arm64-gnu": "1.11.8",
-        "@swc/core-linux-arm64-musl": "1.11.8",
-        "@swc/core-linux-x64-gnu": "1.11.8",
-        "@swc/core-linux-x64-musl": "1.11.8",
-        "@swc/core-win32-arm64-msvc": "1.11.8",
-        "@swc/core-win32-ia32-msvc": "1.11.8",
-        "@swc/core-win32-x64-msvc": "1.11.8"
+        "@swc/core-darwin-arm64": "1.11.7",
+        "@swc/core-darwin-x64": "1.11.7",
+        "@swc/core-linux-arm-gnueabihf": "1.11.7",
+        "@swc/core-linux-arm64-gnu": "1.11.7",
+        "@swc/core-linux-arm64-musl": "1.11.7",
+        "@swc/core-linux-x64-gnu": "1.11.7",
+        "@swc/core-linux-x64-musl": "1.11.7",
+        "@swc/core-win32-arm64-msvc": "1.11.7",
+        "@swc/core-win32-ia32-msvc": "1.11.7",
+        "@swc/core-win32-x64-msvc": "1.11.7"
       },
       "peerDependencies": {
         "@swc/helpers": "*"
@@ -2911,9 +2961,9 @@
       }
     },
     "node_modules/@swc/core-darwin-arm64": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-darwin-arm64/-/core-darwin-arm64-1.11.8.tgz",
-      "integrity": "sha512-rrSsunyJWpHN+5V1zumndwSSifmIeFQBK9i2RMQQp15PgbgUNxHK5qoET1n20pcUrmZeT6jmJaEWlQchkV//Og==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-darwin-arm64/-/core-darwin-arm64-1.11.7.tgz",
+      "integrity": "sha512-3+LhCP2H50CLI6yv/lhOtoZ5B/hi7Q/23dye1KhbSDeDprLTm/KfLJh/iQqwaHUponf5m8C2U0y6DD+HGLz8Yw==",
       "cpu": [
         "arm64"
       ],
@@ -2928,9 +2978,9 @@
       }
     },
     "node_modules/@swc/core-darwin-x64": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-darwin-x64/-/core-darwin-x64-1.11.8.tgz",
-      "integrity": "sha512-44goLqQuuo0HgWnG8qC+ZFw/qnjCVVeqffhzFr9WAXXotogVaxM8ze6egE58VWrfEc8me8yCcxOYL9RbtjhS/Q==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-darwin-x64/-/core-darwin-x64-1.11.7.tgz",
+      "integrity": "sha512-1diWpJqwX1XmOghf9ENFaeRaTtqLiqlZIW56RfOqmeZ7tPp3qS7VygWb9akptBsO5pEA5ZwNgSerD6AJlQcjAw==",
       "cpu": [
         "x64"
       ],
@@ -2945,9 +2995,9 @@
       }
     },
     "node_modules/@swc/core-linux-arm-gnueabihf": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm-gnueabihf/-/core-linux-arm-gnueabihf-1.11.8.tgz",
-      "integrity": "sha512-Mzo8umKlhTWwF1v8SLuTM1z2A+P43UVhf4R8RZDhzIRBuB2NkeyE+c0gexIOJBuGSIATryuAF4O4luDu727D1w==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm-gnueabihf/-/core-linux-arm-gnueabihf-1.11.7.tgz",
+      "integrity": "sha512-MV8+hLREf0NN23NuSKemsjFaWjl/HnqdOkE7uhXTnHzg8WTwp6ddVtU5Yriv15+d/ktfLWPVAOhLHQ4gzaoa8A==",
       "cpu": [
         "arm"
       ],
@@ -2962,9 +3012,9 @@
       }
     },
     "node_modules/@swc/core-linux-arm64-gnu": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm64-gnu/-/core-linux-arm64-gnu-1.11.8.tgz",
-      "integrity": "sha512-EyhO6U+QdoGYC1MeHOR0pyaaSaKYyNuT4FQNZ1eZIbnuueXpuICC7iNmLIOfr3LE5bVWcZ7NKGVPlM2StJEcgA==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm64-gnu/-/core-linux-arm64-gnu-1.11.7.tgz",
+      "integrity": "sha512-5GNs8ZjHQy/UTSnzzn+gm1RCUpCYo43lsxYOl8mpcnZSfxkNFVpjfylBv0QuJ5qhdfZ2iU55+v4iJCwCMtw0nA==",
       "cpu": [
         "arm64"
       ],
@@ -2979,9 +3029,9 @@
       }
     },
     "node_modules/@swc/core-linux-arm64-musl": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm64-musl/-/core-linux-arm64-musl-1.11.8.tgz",
-      "integrity": "sha512-QU6wOkZnS6/QuBN1MHD6G2BgFxB0AclvTVGbqYkRA7MsVkcC29PffESqzTXnypzB252/XkhQjoB2JIt9rPYf6A==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm64-musl/-/core-linux-arm64-musl-1.11.7.tgz",
+      "integrity": "sha512-cTydaYBwDbVV5CspwVcCp9IevYWpGD1cF5B5KlBdjmBzxxeWyTAJRtKzn8w5/UJe/MfdAptarpqMPIs2f33YEQ==",
       "cpu": [
         "arm64"
       ],
@@ -2996,9 +3046,9 @@
       }
     },
     "node_modules/@swc/core-linux-x64-gnu": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-linux-x64-gnu/-/core-linux-x64-gnu-1.11.8.tgz",
-      "integrity": "sha512-r72onUEIU1iJi9EUws3R28pztQ/eM3EshNpsPRBfuLwKy+qn3et55vXOyDhIjGCUph5Eg2Yn8H3h6MTxDdLd+w==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-linux-x64-gnu/-/core-linux-x64-gnu-1.11.7.tgz",
+      "integrity": "sha512-YAX2KfYPlbDsnZiVMI4ZwotF3VeURUrzD+emJgFf1g26F4eEmslldgnDrKybW7V+bObsH22cDqoy6jmQZgpuPQ==",
       "cpu": [
         "x64"
       ],
@@ -3013,9 +3063,9 @@
       }
     },
     "node_modules/@swc/core-linux-x64-musl": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-linux-x64-musl/-/core-linux-x64-musl-1.11.8.tgz",
-      "integrity": "sha512-294k8cLpO103++f4ZUEDr3vnBeUfPitW6G0a3qeVZuoXFhFgaW7ANZIWknUc14WiLOMfMecphJAEiy9C8OeYSw==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-linux-x64-musl/-/core-linux-x64-musl-1.11.7.tgz",
+      "integrity": "sha512-mYT6FTDZyYx5pailc8xt6ClS2yjKmP8jNHxA9Ce3K21n5qkKilI5M2N7NShwXkd3Ksw3F29wKrg+wvEMXTRY/A==",
       "cpu": [
         "x64"
       ],
@@ -3030,9 +3080,9 @@
       }
     },
     "node_modules/@swc/core-win32-arm64-msvc": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-win32-arm64-msvc/-/core-win32-arm64-msvc-1.11.8.tgz",
-      "integrity": "sha512-EbjOzQ+B85rumHyeesBYxZ+hq3ZQn+YAAT1ZNE9xW1/8SuLoBmHy/K9YniRGVDq/2NRmp5kI5+5h5TX0asIS9A==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-win32-arm64-msvc/-/core-win32-arm64-msvc-1.11.7.tgz",
+      "integrity": "sha512-uLDQEcv0BHcepypstyxKkNsW6KfLyI5jVxTbcxka+B2UnMcFpvoR87nGt2JYW0grO2SNZPoFz+UnoKL9c6JxpA==",
       "cpu": [
         "arm64"
       ],
@@ -3047,9 +3097,9 @@
       }
     },
     "node_modules/@swc/core-win32-ia32-msvc": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-win32-ia32-msvc/-/core-win32-ia32-msvc-1.11.8.tgz",
-      "integrity": "sha512-Z+FF5kgLHfQWIZ1KPdeInToXLzbY0sMAashjd/igKeP1Lz0qKXVAK+rpn6ASJi85Fn8wTftCGCyQUkRVn0bTDg==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-win32-ia32-msvc/-/core-win32-ia32-msvc-1.11.7.tgz",
+      "integrity": "sha512-wiq5G3fRizdxAJVFcon7zpyfbfrb+YShuTy+TqJ4Nf5PC0ueMOXmsmeuyQGApn6dVWtGCyymYQYt77wHeQajdA==",
       "cpu": [
         "ia32"
       ],
@@ -3064,9 +3114,9 @@
       }
     },
     "node_modules/@swc/core-win32-x64-msvc": {
-      "version": "1.11.8",
-      "resolved": "https://registry.npmjs.org/@swc/core-win32-x64-msvc/-/core-win32-x64-msvc-1.11.8.tgz",
-      "integrity": "sha512-j6B6N0hChCeAISS6xp/hh6zR5CSCr037BAjCxNLsT8TGe5D+gYZ57heswUWXRH8eMKiRDGiLCYpPB2pkTqxCSw==",
+      "version": "1.11.7",
+      "resolved": "https://registry.npmjs.org/@swc/core-win32-x64-msvc/-/core-win32-x64-msvc-1.11.7.tgz",
+      "integrity": "sha512-/zQdqY4fHkSORxEJ2cKtRBOwglvf/8gs6Tl4Q6VMx2zFtFpIOwFQstfY5u8wBNN2Z+PkAzyUCPoi8/cQFK8HLQ==",
       "cpu": [
         "x64"
       ],
@@ -3190,6 +3240,16 @@
         "@babel/types": "^7.20.7"
       }
     },
+    "node_modules/@types/bcrypt": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.2.tgz",
+      "integrity": "sha512-6atioO8Y75fNcbmj0G7UjI9lXN2pQ/IGJ2FWT4a/btd0Lk9lQalHLKhkgKVZ3r+spnmWUKfbMi1GEe9wyHQfNQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/body-parser": {
       "version": "1.19.5",
       "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
@@ -3342,6 +3402,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/@types/jsonwebtoken": {
+      "version": "9.0.7",
+      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.7.tgz",
+      "integrity": "sha512-ugo316mmTYBl2g81zDFnZ7cfxlut3o+/EQdaP7J8QN2kY6lJ22hmQYCK5EHcJHbrW+dkCGSCPgbG8JtYj6qSrg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/methods": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/@types/methods/-/methods-1.1.4.tgz",
@@ -3357,10 +3426,9 @@
       "license": "MIT"
     },
     "node_modules/@types/node": {
-      "version": "22.13.10",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.10.tgz",
-      "integrity": "sha512-I6LPUvlRH+O6VRUqYOcMudhaIdUVWfsjnZavnsraHvpBwaEyMN29ry+0UVJhImYL16xsscu0aske3yA+uPOWfw==",
-      "dev": true,
+      "version": "22.13.9",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.9.tgz",
+      "integrity": "sha512-acBjXdRJ3A6Pb3tqnw9HZmyR3Fiol3aGxRCK1x3d+6CDAMjl7I649wpSd+yNURCjbOUGu9tqtLKnTGxmK6CyGw==",
       "license": "MIT",
       "dependencies": {
         "undici-types": "~6.20.0"
@@ -3996,6 +4064,12 @@
       "dev": true,
       "license": "Apache-2.0"
     },
+    "node_modules/abbrev": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
+      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
+      "license": "ISC"
+    },
     "node_modules/accepts": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz",
@@ -4045,6 +4119,18 @@
         "node": ">=0.4.0"
       }
     },
+    "node_modules/agent-base": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
+      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 6.0.0"
+      }
+    },
     "node_modules/ajv": {
       "version": "6.12.6",
       "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
@@ -4212,6 +4298,12 @@
       "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
       "license": "MIT"
     },
+    "node_modules/aproba": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
+      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==",
+      "license": "ISC"
+    },
     "node_modules/arch": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/arch/-/arch-3.0.0.tgz",
@@ -4233,6 +4325,34 @@
       ],
       "license": "MIT"
     },
+    "node_modules/are-we-there-yet": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
+      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
+      "deprecated": "This package is no longer supported.",
+      "license": "ISC",
+      "dependencies": {
+        "delegates": "^1.0.0",
+        "readable-stream": "^3.6.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/are-we-there-yet/node_modules/readable-stream": {
+      "version": "3.6.2",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
+      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.3",
+        "string_decoder": "^1.1.1",
+        "util-deprecate": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/arg": {
       "version": "4.1.3",
       "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
@@ -4412,7 +4532,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
       "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/bare-events": {
@@ -4444,6 +4563,20 @@
       ],
       "license": "MIT"
     },
+    "node_modules/bcrypt": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz",
+      "integrity": "sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "@mapbox/node-pre-gyp": "^1.0.11",
+        "node-addon-api": "^5.0.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
     "node_modules/bin-version": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/bin-version/-/bin-version-6.0.0.tgz",
@@ -4558,7 +4691,6 @@
       "version": "1.1.11",
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
       "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "balanced-match": "^1.0.0",
@@ -4669,6 +4801,12 @@
         "node": "*"
       }
     },
+    "node_modules/buffer-equal-constant-time": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/buffer-from": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
@@ -4844,6 +4982,15 @@
         "url": "https://paulmillr.com/funding/"
       }
     },
+    "node_modules/chownr": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
+      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/chrome-trace-event": {
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
@@ -5050,6 +5197,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/color-support": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
+      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
+      "license": "ISC",
+      "bin": {
+        "color-support": "bin.js"
+      }
+    },
     "node_modules/combined-stream": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
@@ -5104,7 +5260,6 @@
       "version": "0.0.1",
       "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
       "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/concat-stream": {
@@ -5131,6 +5286,12 @@
         "node": "^14.18.0 || >=16.10.0"
       }
     },
+    "node_modules/console-control-strings": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
+      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
+      "license": "ISC"
+    },
     "node_modules/content-disposition": {
       "version": "0.5.4",
       "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
@@ -5386,6 +5547,12 @@
         "node": ">=0.4.0"
       }
     },
+    "node_modules/delegates": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
+      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
+      "license": "MIT"
+    },
     "node_modules/depd": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
@@ -5405,6 +5572,15 @@
         "npm": "1.2.8000 || >= 1.4.16"
       }
     },
+    "node_modules/detect-libc": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
+      "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/detect-newline": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
@@ -5479,6 +5655,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/ecdsa-sig-formatter": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
+      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
     "node_modules/ee-first": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
@@ -5502,9 +5687,9 @@
       }
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.5.113",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.113.tgz",
-      "integrity": "sha512-wjT2O4hX+wdWPJ76gWSkMhcHAV2PTMX+QetUCPYEdCIe+cxmgzzSSiGRCKW8nuh4mwKZlpv0xvoW7OF2X+wmHg==",
+      "version": "1.5.112",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.112.tgz",
+      "integrity": "sha512-oen93kVyqSb3l+ziUgzIOlWt/oOuy4zRmpwestMn4rhFWAoFJeFuCVte9F2fASjeZZo7l/Cif9TiyrdW4CwEMA==",
       "dev": true,
       "license": "ISC"
     },
@@ -5525,7 +5710,6 @@
       "version": "8.0.0",
       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/encodeurl": {
@@ -5644,19 +5828,18 @@
       }
     },
     "node_modules/eslint": {
-      "version": "9.22.0",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.22.0.tgz",
-      "integrity": "sha512-9V/QURhsRN40xuHXWjV64yvrzMjcz7ZyNoF2jJFmy9j/SLk0u1OLSZgXi28MrXjymnjEGSR80WCdab3RGMDveQ==",
+      "version": "9.21.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.21.0.tgz",
+      "integrity": "sha512-KjeihdFqTPhOMXTt7StsDxriV4n66ueuF/jfPNC3j/lduHwr/ijDwJMsF+wyMJethgiKi5wniIE243vi07d3pg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.2.0",
         "@eslint-community/regexpp": "^4.12.1",
         "@eslint/config-array": "^0.19.2",
-        "@eslint/config-helpers": "^0.1.0",
         "@eslint/core": "^0.12.0",
         "@eslint/eslintrc": "^3.3.0",
-        "@eslint/js": "9.22.0",
+        "@eslint/js": "9.21.0",
         "@eslint/plugin-kit": "^0.2.7",
         "@humanfs/node": "^0.16.6",
         "@humanwhocodes/module-importer": "^1.0.1",
@@ -5668,7 +5851,7 @@
         "cross-spawn": "^7.0.6",
         "debug": "^4.3.2",
         "escape-string-regexp": "^4.0.0",
-        "eslint-scope": "^8.3.0",
+        "eslint-scope": "^8.2.0",
         "eslint-visitor-keys": "^4.2.0",
         "espree": "^10.3.0",
         "esquery": "^1.5.0",
@@ -5705,13 +5888,13 @@
       }
     },
     "node_modules/eslint-config-prettier": {
-      "version": "10.1.1",
-      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-10.1.1.tgz",
-      "integrity": "sha512-4EQQr6wXwS+ZJSzaR5ZCrYgLxqvUjdXctaEtBqHcbkW944B1NQyO4qpdHQbXBONfwxXdkAY81HH4+LUfrg+zPw==",
+      "version": "10.0.2",
+      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-10.0.2.tgz",
+      "integrity": "sha512-1105/17ZIMjmCOJOPNfVdbXafLCLj3hPmkmB7dLgt7XsQ/zkxSuDerE/xgO3RxoHysR1N1whmquY0lSn2O0VLg==",
       "dev": true,
       "license": "MIT",
       "bin": {
-        "eslint-config-prettier": "bin/cli.js"
+        "eslint-config-prettier": "build/bin/cli.js"
       },
       "peerDependencies": {
         "eslint": ">=7.0.0"
@@ -5749,9 +5932,9 @@
       }
     },
     "node_modules/eslint-scope": {
-      "version": "8.3.0",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
-      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
+      "version": "8.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.2.0.tgz",
+      "integrity": "sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==",
       "dev": true,
       "license": "BSD-2-Clause",
       "dependencies": {
@@ -6588,6 +6771,36 @@
         "node": ">=12"
       }
     },
+    "node_modules/fs-minipass": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
+      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/fs-minipass/node_modules/minipass": {
+      "version": "3.3.6",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
+      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/fs-minipass/node_modules/yallist": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "license": "ISC"
+    },
     "node_modules/fs-monkey": {
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/fs-monkey/-/fs-monkey-1.0.6.tgz",
@@ -6599,7 +6812,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
       "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
-      "dev": true,
       "license": "ISC"
     },
     "node_modules/fsevents": {
@@ -6626,6 +6838,54 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/gauge": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
+      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
+      "deprecated": "This package is no longer supported.",
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^1.0.3 || ^2.0.0",
+        "color-support": "^1.1.2",
+        "console-control-strings": "^1.0.0",
+        "has-unicode": "^2.0.1",
+        "object-assign": "^4.1.1",
+        "signal-exit": "^3.0.0",
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1",
+        "wide-align": "^1.1.2"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/gauge/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/gauge/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "license": "ISC"
+    },
+    "node_modules/gauge/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/gensync": {
       "version": "1.0.0-beta.2",
       "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
@@ -6889,6 +7149,12 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/has-unicode": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
+      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
+      "license": "ISC"
+    },
     "node_modules/hasown": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
@@ -6955,6 +7221,19 @@
         "node": ">=10.19.0"
       }
     },
+    "node_modules/https-proxy-agent": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
+      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "6",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/human-signals": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
@@ -7060,7 +7339,6 @@
       "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
       "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
       "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
-      "dev": true,
       "license": "ISC",
       "dependencies": {
         "once": "^1.3.0",
@@ -7142,7 +7420,6 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -8148,6 +8425,49 @@
         "graceful-fs": "^4.1.6"
       }
     },
+    "node_modules/jsonwebtoken": {
+      "version": "9.0.2",
+      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
+      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
+      "license": "MIT",
+      "dependencies": {
+        "jws": "^3.2.2",
+        "lodash.includes": "^4.3.0",
+        "lodash.isboolean": "^3.0.3",
+        "lodash.isinteger": "^4.0.4",
+        "lodash.isnumber": "^3.0.3",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.isstring": "^4.0.1",
+        "lodash.once": "^4.0.0",
+        "ms": "^2.1.1",
+        "semver": "^7.5.4"
+      },
+      "engines": {
+        "node": ">=12",
+        "npm": ">=6"
+      }
+    },
+    "node_modules/jwa": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
+      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer-equal-constant-time": "1.0.1",
+        "ecdsa-sig-formatter": "1.0.11",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/jws": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
+      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
+      "license": "MIT",
+      "dependencies": {
+        "jwa": "^1.4.1",
+        "safe-buffer": "^5.0.1"
+      }
+    },
     "node_modules/keyv": {
       "version": "4.5.4",
       "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
@@ -8248,6 +8568,42 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/lodash.includes": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
+      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isboolean": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
+      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isinteger": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
+      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isnumber": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
+      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isplainobject": {
+      "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isstring": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
+      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
+      "license": "MIT"
+    },
     "node_modules/lodash.memoize": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
@@ -8262,6 +8618,12 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/lodash.once": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
+      "license": "MIT"
+    },
     "node_modules/log-symbols": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
@@ -8502,7 +8864,6 @@
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
       "license": "ISC",
       "dependencies": {
         "brace-expansion": "^1.1.7"
@@ -8530,6 +8891,37 @@
         "node": ">=16 || 14 >=14.17"
       }
     },
+    "node_modules/minizlib": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
+      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^3.0.0",
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/minizlib/node_modules/minipass": {
+      "version": "3.3.6",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
+      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/minizlib/node_modules/yallist": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "license": "ISC"
+    },
     "node_modules/mkdirp": {
       "version": "0.5.6",
       "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
@@ -8673,6 +9065,12 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/node-addon-api": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
+      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==",
+      "license": "MIT"
+    },
     "node_modules/node-emoji": {
       "version": "1.11.0",
       "resolved": "https://registry.npmjs.org/node-emoji/-/node-emoji-1.11.0.tgz",
@@ -8683,6 +9081,26 @@
         "lodash": "^4.17.21"
       }
     },
+    "node_modules/node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/node-int64": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
@@ -8697,6 +9115,21 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/nopt": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
+      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
+      "license": "ISC",
+      "dependencies": {
+        "abbrev": "1"
+      },
+      "bin": {
+        "nopt": "bin/nopt.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/normalize-path": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
@@ -8733,6 +9166,19 @@
         "node": ">=8"
       }
     },
+    "node_modules/npmlog": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
+      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
+      "deprecated": "This package is no longer supported.",
+      "license": "ISC",
+      "dependencies": {
+        "are-we-there-yet": "^2.0.0",
+        "console-control-strings": "^1.1.0",
+        "gauge": "^3.0.0",
+        "set-blocking": "^2.0.0"
+      }
+    },
     "node_modules/object-assign": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
@@ -8980,7 +9426,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
       "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
@@ -9633,6 +10078,43 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/rimraf": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
+      "deprecated": "Rimraf versions prior to v4 are no longer supported",
+      "license": "ISC",
+      "dependencies": {
+        "glob": "^7.1.3"
+      },
+      "bin": {
+        "rimraf": "bin.js"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/rimraf/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/router": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/router/-/router-2.1.0.tgz",
@@ -9753,7 +10235,6 @@
       "version": "7.7.1",
       "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
       "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
       "license": "ISC",
       "bin": {
         "semver": "bin/semver.js"
@@ -9869,6 +10350,12 @@
         "node": ">= 18"
       }
     },
+    "node_modules/set-blocking": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
+      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
+      "license": "ISC"
+    },
     "node_modules/setprototypeof": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
@@ -10174,7 +10661,6 @@
       "version": "4.2.3",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "emoji-regex": "^8.0.0",
@@ -10228,7 +10714,6 @@
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -10238,7 +10723,6 @@
       "version": "6.0.1",
       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ansi-regex": "^5.0.1"
@@ -10447,6 +10931,23 @@
         "node": ">=6"
       }
     },
+    "node_modules/tar": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
+      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
+      "license": "ISC",
+      "dependencies": {
+        "chownr": "^2.0.0",
+        "fs-minipass": "^2.0.0",
+        "minipass": "^5.0.0",
+        "minizlib": "^2.1.1",
+        "mkdirp": "^1.0.3",
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/tar-stream": {
       "version": "3.1.7",
       "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
@@ -10459,6 +10960,33 @@
         "streamx": "^2.15.0"
       }
     },
+    "node_modules/tar/node_modules/minipass": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
+      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/tar/node_modules/mkdirp": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
+      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
+      "license": "MIT",
+      "bin": {
+        "mkdirp": "bin/cmd.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/tar/node_modules/yallist": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "license": "ISC"
+    },
     "node_modules/terser": {
       "version": "5.39.0",
       "resolved": "https://registry.npmjs.org/terser/-/terser-5.39.0.tgz",
@@ -10740,6 +11268,12 @@
         "url": "https://github.com/sponsors/Borewit"
       }
     },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
+      "license": "MIT"
+    },
     "node_modules/tree-kill": {
       "version": "1.2.2",
       "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
@@ -11063,7 +11597,6 @@
       "version": "6.20.0",
       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
       "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/universalify": {
@@ -11228,6 +11761,12 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
+      "license": "BSD-2-Clause"
+    },
     "node_modules/webpack": {
       "version": "5.98.0",
       "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.98.0.tgz",
@@ -11417,6 +11956,16 @@
         "url": "https://opencollective.com/webpack"
       }
     },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "license": "MIT",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
     "node_modules/which": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
@@ -11433,6 +11982,15 @@
         "node": ">= 8"
       }
     },
+    "node_modules/wide-align": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
+      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^1.0.2 || 2 || 3 || 4"
+      }
+    },
     "node_modules/word-wrap": {
       "version": "1.2.5",
       "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
diff --git a/launcher/auth-ms/package.json b/launcher/auth-ms/package.json
index d3f65b7..c0514b2 100644
--- a/launcher/auth-ms/package.json
+++ b/launcher/auth-ms/package.json
@@ -6,11 +6,11 @@
   "private": true,
   "license": "UNLICENSED",
   "scripts": {
-    "docker:start": "npx prisma migrate deploy && npx prisma generate",
     "build": "nest build",
     "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
     "start": "nest start",
     "start:dev": "npm run docker:start && nest start --watch",
+    "docker:start": "npx prisma migrate deploy && npx prisma generate",
     "start:debug": "nest start --debug --watch",
     "start:prod": "node dist/main",
     "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
@@ -24,6 +24,7 @@
     "@nestjs/common": "^11.0.1",
     "@nestjs/core": "^11.0.1",
     "@nestjs/jwt": "^11.0.0",
+    "@nestjs/mapped-types": "*",
     "@nestjs/microservices": "^11.0.11",
     "@nestjs/platform-express": "^11.0.1",
     "@prisma/client": "^6.8.2",
@@ -37,9 +38,13 @@
     "rxjs": "^7.8.1"
   },
   "devDependencies": {
+    "@eslint/eslintrc": "^3.2.0",
+    "@eslint/js": "^9.18.0",
     "@nestjs/cli": "^11.0.0",
     "@nestjs/schematics": "^11.0.0",
     "@nestjs/testing": "^11.0.1",
+    "@swc/cli": "^0.6.0",
+    "@swc/core": "^1.10.7",
     "@types/bcrypt": "^5.0.2",
     "@types/express": "^5.0.0",
     "@types/jest": "^29.5.14",
@@ -48,6 +53,7 @@
     "eslint": "^9.18.0",
     "eslint-config-prettier": "^10.0.1",
     "eslint-plugin-prettier": "^5.2.2",
+    "globals": "^15.14.0",
     "jest": "^29.7.0",
     "prettier": "^3.4.2",
     "prisma": "^6.8.2",
@@ -56,14 +62,24 @@
     "ts-jest": "^29.2.5",
     "ts-loader": "^9.5.2",
     "ts-node": "^10.9.2",
-    "typescript": "^5.7.3"
+    "tsconfig-paths": "^4.2.0",
+    "typescript": "^5.7.3",
+    "typescript-eslint": "^8.20.0"
   },
   "jest": {
-    "moduleFileExtensions": ["js", "json", "ts"],
+    "moduleFileExtensions": [
+      "js",
+      "json",
+      "ts"
+    ],
     "rootDir": "src",
     "testRegex": ".*\\.spec\\.ts$",
-    "transform": { "^.+\\.(t|j)s$": "ts-jest" },
-    "collectCoverageFrom": ["**/*.(t|j)s"],
+    "transform": {
+      "^.+\\.(t|j)s$": "ts-jest"
+    },
+    "collectCoverageFrom": [
+      "**/*.(t|j)s"
+    ],
     "coverageDirectory": "../coverage",
     "testEnvironment": "node"
   }
diff --git a/launcher/auth-ms/prisma/migrations/20250529090929_sync_changes/migration.sql b/launcher/auth-ms/prisma/migrations/20250529090929_sync_changes/migration.sql
new file mode 100644
index 0000000..0e4520b
--- /dev/null
+++ b/launcher/auth-ms/prisma/migrations/20250529090929_sync_changes/migration.sql
@@ -0,0 +1,37 @@
+-- CreateEnum
+CREATE TYPE "Role" AS ENUM ('USER', 'USER_PARTNER', 'ADMIN', 'SUPER_ADMIN', 'DELETED_USER', 'DELETED_USER_PARTNER', 'PENDING_DELETE', 'PENDING_PARTNER');
+
+-- CreateEnum
+CREATE TYPE "StatusPendingPartner" AS ENUM ('PENDING', 'ACCEPTED', 'REJECTED');
+
+-- CreateTable
+CREATE TABLE "User" (
+    "id" TEXT NOT NULL,
+    "email" TEXT NOT NULL,
+    "names" TEXT NOT NULL,
+    "lastnames" TEXT NOT NULL,
+    "password" TEXT NOT NULL,
+    "role" "Role",
+
+    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
+);
+
+-- CreateTable
+CREATE TABLE "PendingPartner" (
+    "id" TEXT NOT NULL,
+    "email" TEXT NOT NULL,
+    "names" TEXT NOT NULL,
+    "lastnames" TEXT NOT NULL,
+    "password" TEXT NOT NULL,
+    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" TIMESTAMP(3) NOT NULL,
+    "status" "StatusPendingPartner" NOT NULL DEFAULT 'PENDING',
+
+    CONSTRAINT "PendingPartner_pkey" PRIMARY KEY ("id")
+);
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "PendingPartner_email_key" ON "PendingPartner"("email");
diff --git a/launcher/auth-ms/prisma/migrations/20250529092534_sync_changes/migration.sql b/launcher/auth-ms/prisma/migrations/20250529092534_sync_changes/migration.sql
deleted file mode 100644
index 106ea7c..0000000
--- a/launcher/auth-ms/prisma/migrations/20250529092534_sync_changes/migration.sql
+++ /dev/null
@@ -1,28 +0,0 @@
--- CreateTable
-CREATE TABLE "UserData" (
-    "id" TEXT NOT NULL,
-    "perfilPhoto" TEXT,
-    "birthDay" INTEGER,
-    "birthMonth" INTEGER,
-    "birthYear" INTEGER,
-    "phone" TEXT,
-    "contactEmail" TEXT,
-    "contactNames" TEXT,
-    "contactLastnames" TEXT,
-    "contactPhone" TEXT,
-    "sex" TEXT,
-
-    CONSTRAINT "UserData_pkey" PRIMARY KEY ("id")
-);
-
--- CreateTable
-CREATE TABLE "Favorites" (
-    "id" TEXT NOT NULL,
-    "idProfessional" TEXT NOT NULL,
-    "userId" TEXT NOT NULL,
-
-    CONSTRAINT "Favorites_pkey" PRIMARY KEY ("id")
-);
-
--- AddForeignKey
-ALTER TABLE "Favorites" ADD CONSTRAINT "Favorites_userId_fkey" FOREIGN KEY ("userId") REFERENCES "UserData"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
diff --git a/launcher/auth-ms/prisma/migrations/20250611011840_create_pendings/migration.sql b/launcher/auth-ms/prisma/migrations/20250611011840_create_pendings/migration.sql
new file mode 100644
index 0000000..d463cda
--- /dev/null
+++ b/launcher/auth-ms/prisma/migrations/20250611011840_create_pendings/migration.sql
@@ -0,0 +1,12 @@
+/*
+  Warnings:
+
+  - Added the required column `side_back` to the `PendingPartner` table without a default value. This is not possible if the table is not empty.
+  - Added the required column `side_front` to the `PendingPartner` table without a default value. This is not possible if the table is not empty.
+  - Added the required column `title` to the `PendingPartner` table without a default value. This is not possible if the table is not empty.
+
+*/
+-- AlterTable
+ALTER TABLE "PendingPartner" ADD COLUMN     "side_back" TEXT NOT NULL,
+ADD COLUMN     "side_front" TEXT NOT NULL,
+ADD COLUMN     "title" TEXT NOT NULL;
diff --git a/launcher/auth-ms/prisma/migrations/20250611012643_create_pendings/migration.sql b/launcher/auth-ms/prisma/migrations/20250611012643_create_pendings/migration.sql
new file mode 100644
index 0000000..5d4216a
--- /dev/null
+++ b/launcher/auth-ms/prisma/migrations/20250611012643_create_pendings/migration.sql
@@ -0,0 +1,8 @@
+/*
+  Warnings:
+
+  - Added the required column `phone` to the `PendingPartner` table without a default value. This is not possible if the table is not empty.
+
+*/
+-- AlterTable
+ALTER TABLE "PendingPartner" ADD COLUMN     "phone" TEXT NOT NULL;
diff --git a/launcher/auth-ms/prisma/migrations/20250611031513_create_pendings/migration.sql b/launcher/auth-ms/prisma/migrations/20250611031513_create_pendings/migration.sql
new file mode 100644
index 0000000..de5a127
--- /dev/null
+++ b/launcher/auth-ms/prisma/migrations/20250611031513_create_pendings/migration.sql
@@ -0,0 +1,8 @@
+/*
+  Warnings:
+
+  - Added the required column `document` to the `PendingPartner` table without a default value. This is not possible if the table is not empty.
+
+*/
+-- AlterTable
+ALTER TABLE "PendingPartner" ADD COLUMN     "document" TEXT NOT NULL;
diff --git a/launcher/auth-ms/prisma/migrations/20250614185128_nombre_de_la_migracion/migration.sql b/launcher/auth-ms/prisma/migrations/20250614185128_nombre_de_la_migracion/migration.sql
deleted file mode 100644
index aa324c0..0000000
--- a/launcher/auth-ms/prisma/migrations/20250614185128_nombre_de_la_migracion/migration.sql
+++ /dev/null
@@ -1,3 +0,0 @@
--- AlterTable
-ALTER TABLE "UserData" ADD COLUMN     "city" TEXT,
-ADD COLUMN     "contactFamilly" TEXT;
diff --git a/launcher/auth-ms/prisma/migrations/20250614200551_nombre_de_la_migracion/migration.sql b/launcher/auth-ms/prisma/migrations/20250614200551_nombre_de_la_migracion/migration.sql
deleted file mode 100644
index dd2bf4e..0000000
--- a/launcher/auth-ms/prisma/migrations/20250614200551_nombre_de_la_migracion/migration.sql
+++ /dev/null
@@ -1,3 +0,0 @@
--- AlterTable
-ALTER TABLE "UserData" ADD COLUMN     "cityuser" TEXT,
-ADD COLUMN     "country" TEXT;
diff --git a/launcher/auth-ms/prisma/schema.prisma b/launcher/auth-ms/prisma/schema.prisma
index f6ac375..0e7128b 100644
--- a/launcher/auth-ms/prisma/schema.prisma
+++ b/launcher/auth-ms/prisma/schema.prisma
@@ -18,6 +18,12 @@ enum Role {
   PENDING_PARTNER
 }
 
+enum StatusPendingPartner {
+  PENDING
+  ACCEPTED
+  REJECTED
+}
+
 model User {
   id        String @id @default(uuid())
   email     String @unique
@@ -25,33 +31,20 @@ model User {
   lastnames String
   password  String
   role      Role?
-  createdAt DateTime @default(now())
-  updatedAt DateTime @updatedAt
-}
-
-model UserData {
-  id               String      @id
-  perfilPhoto      String?
-  birthDay         Int?
-  birthMonth       Int?
-  birthYear        Int?
-  contactEmail     String?
-  contactNames     String?
-  contactLastnames String?
-  contactPhone     String?
-  sex              String?
-  city             String?
-  familly          String?
-  cityuser         String?
-  country          String?
-  createdAt        DateTime    @default(now())
-  updatedAt        DateTime    @updatedAt
 }
 
-model Favorites {
-  id           String @id @default(cuid())
-  userId       String
-  partnerId    String
-  createdAt    DateTime @default(now())
-  updatedAt    DateTime @updatedAt
+model PendingPartner {
+  id         String               @id @default(uuid())
+  email      String               @unique
+  names      String
+  title      String
+  phone      String
+  lastnames  String
+  document   String
+  password   String
+  createdAt  DateTime             @default(now())
+  updatedAt  DateTime             @updatedAt
+  status     StatusPendingPartner @default(PENDING)
+  side_front String
+  side_back  String
 }
diff --git a/launcher/auth-ms/src/app.module.ts b/launcher/auth-ms/src/app.module.ts
index f91c5d7..d646e7d 100644
--- a/launcher/auth-ms/src/app.module.ts
+++ b/launcher/auth-ms/src/app.module.ts
@@ -1,7 +1,16 @@
 import { Module } from '@nestjs/common';
+ 
+
 import { AuthModule } from './auth/auth.module';
+import { RegisterProfessionalModule } from './register_professional/register_professional.module';
+ 
+ 
+ 
+ 
 
 @Module({
- imports: [AuthModule],
+  imports: [ AuthModule, RegisterProfessionalModule],
+
+ 
 })
 export class AppModule {}
diff --git a/launcher/auth-ms/src/auth/auth.controller.ts b/launcher/auth-ms/src/auth/auth.controller.ts
index fb958c5..e906b27 100644
--- a/launcher/auth-ms/src/auth/auth.controller.ts
+++ b/launcher/auth-ms/src/auth/auth.controller.ts
@@ -1,63 +1,90 @@
 import { Controller } from '@nestjs/common';
 import { AuthService } from './auth.service';
 import { MessagePattern, Payload } from '@nestjs/microservices';
+import { LoginUserDto, RegisterPartnerDto, RegisterUserDto, SetStatusPartnerDto, setStatusUserDto } from './dto';
+import { PaginationDto } from './commont/pagination.dto';
+import { auhPathcNameDto } from './dto/authPathNames.dto';
+
 
 @Controller()
 export class AuthController {
-  constructor(private readonly authService: AuthService) {}
+  constructor(private readonly authService: AuthService) { }
 
-  @MessagePattern('auth.register.user')
-  registerUser(@Payload() registerUserDto: any) {
-    return this.authService.registerUser(registerUserDto);
+  @MessagePattern('auth-ms.patch.names.user')
+  patchNameUsers(@Payload() patchName: auhPathcNameDto) {
+    return this.authService.patchNames(patchName)
   }
 
-  @MessagePattern('auth.register.partner')
-  registerPartner(@Payload() registerPartnerDto: any) {
-    return this.authService.registerPartner(registerPartnerDto);
-  }
 
-  @MessagePattern('auth-ms.create.user.superadmin')
-  createSuperAdmin(@Payload() registerUserDto: any) {
-    return this.authService.CreateSuperAdmin(registerUserDto);
+  @MessagePattern('auth.register.user')
+  registerUser(@Payload() RegisterUserDto: RegisterUserDto) {
+    return this.authService.registerUser(RegisterUserDto)
+  }
+  @MessagePattern('auth.register.partner')
+  registerPartner(@Payload() RegisterPartnerDto: RegisterPartnerDto) {
+    return this.authService.registerPartner(RegisterPartnerDto)
   }
-
   @MessagePattern('auth.login.user')
-  loginUser(@Payload() loginUserDto: any) {
-    return this.authService.LoginUser(loginUserDto);
+  loginUser(@Payload() LoginUserDto: LoginUserDto) {
+    return this.authService.LoginUser(LoginUserDto)
   }
-
   @MessagePattern('auth.verify.user')
   verifyUser(@Payload() token: string) {
-    return this.authService.verifyToken(token);
+    return this.authService.verifyToken(token)
   }
 
   @MessagePattern('auth.verify.user.data.token')
   refreshtoken(@Payload() token: string) {
-    return this.authService.verifyToken(token);
+    return this.authService.refreshtoken(token)
   }
 
+ 
   @MessagePattern('auth.get.basic.user.basic')
   basic_user_by_id(@Payload() { id }: { id: string }) {
-    return this.authService.get_data_basic_user(id);
+    return this.authService.get_data_basic_user(id)
   }
 
   @MessagePattern('auth.verify.email.basic.user')
+  verify_email_user(@Payload() { email }: { email: string }) {
+    return this.authService.verifyUserEmail(email)
+  }
+
+  @MessagePattern('auth.reset.password.by.email')
+  resetPasswordEmail(@Payload() { email, password }: { email: string, password: string }) {
+    return this.authService.resetPassword(email, password)
+  }
+
+  /**
+   * todo options admin
+   * 
+   *  
+   */
 
-  @MessagePattern("auth-ms.information.users.admin")
+  @MessagePattern('auth-ms.information.users.admin')
   get_information_users_admin(@Payload() { id }: { id: string }) {
     return this.authService.getInformationUsersAdmin(id);
   }
 
-  @MessagePattern("auth-ms.get.all.partner.pagination.admin")
-  get_all_partner_pagination_admin(@Payload() PaginationDto: any) {
+  @MessagePattern('auth-ms.create.user.superadmin')
+  create_super_admin(RegisterUserDto: RegisterUserDto) {
+    return this.authService.CreateSuperAdmin(RegisterUserDto)
+  }
+  @MessagePattern('auth-ms.get.all.partner.pagination.admin')
+  get_all_partner_pagination_admin(@Payload() PaginationDto: PaginationDto) {
+
     return this.authService.getAllUsersPartners(PaginationDto);
   }
+  @MessagePattern('auth-ms.get.all.user.pagination.admin')
+  get_all_user_pagination_admin(@Payload() PaginationDto: PaginationDto) {
+    return this.authService.getAllUsers(PaginationDto)
+  }
 
-  @MessagePattern("auth-ms.get.all.user.pagination.admin")
-  get_all_user_pagination_admin(@Payload() PaginationDto: any) {
-    return this.authService.getAllUsers(PaginationDto);
+  @MessagePattern('auth-ms.set.status.user.partner')
+  set_status_user_partner(@Payload() SetStatusPartnerDto: SetStatusPartnerDto) {
+    return this.authService.setStatusPartners(SetStatusPartnerDto)
   }
-  verify_email_user(@Payload() { email }: { email: string }) {
-    return this.authService.verifyUserEmail(email);
+  @MessagePattern('auth-ms.set.status.user.admin')
+  set_status_user_admin(@Payload() setStatusUserDto: setStatusUserDto) {
+    return this.authService.setStatusUser(setStatusUserDto)
   }
 }
diff --git a/launcher/auth-ms/src/auth/auth.module.ts b/launcher/auth-ms/src/auth/auth.module.ts
index 8188a56..9ef537c 100644
--- a/launcher/auth-ms/src/auth/auth.module.ts
+++ b/launcher/auth-ms/src/auth/auth.module.ts
@@ -3,18 +3,20 @@ import { AuthService } from './auth.service';
 import { AuthController } from './auth.controller';
 import { JwtModule } from '@nestjs/jwt';
 import { envs } from 'src/config';
-import { NatsModule } from '../transport/nats.module';
+import { NatsModule } from '../transport/nast.module';
 
 @Module({
   imports:[
     NatsModule,
     JwtModule.register({
-      global: true,
+      global:true,
       secret: envs.jwtSecret,
-      signOptions: { expiresIn: '2d' }
+      signOptions:{expiresIn:'2d'}
     })
   ],
   controllers: [AuthController],
   providers: [AuthService],
+  
+ 
 })
 export class AuthModule {}
diff --git a/launcher/auth-ms/src/auth/auth.service.ts b/launcher/auth-ms/src/auth/auth.service.ts
index a77d434..a9b996b 100644
--- a/launcher/auth-ms/src/auth/auth.service.ts
+++ b/launcher/auth-ms/src/auth/auth.service.ts
@@ -1,397 +1,711 @@
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient, Role } from '@prisma/client';
+import { Inject, Injectable, Logger, OnModuleInit } from '@nestjs/common';
 import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
+import { PrismaClient, Role, StatusPendingPartner } from '@prisma/client';
+import { LoginUserDto, RegisterUserDto, SetStatusPartnerDto, setStatusUserDto } from './dto';
 import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
-
-interface JwtPayload {
-  id: string;
-  email: string;
-  names: string;
-  lastnames: string;
-  role: Role | null;
-}
-
+import { JwtService } from '@nestjs/jwt';
+import { JwtPayload } from 'src/interfaces/payload.interface';
+import { envs, NATS_SERVICE } from 'src/config';
+import { RegisterPartnerDto } from './dto/Register-partner.dto copy';
+import { firstValueFrom } from 'rxjs';
+import { CreateUserPartnerDto } from './dto/CreateUserPartner.dto';
+import { PaginationDto } from './commont/pagination.dto';
+import { auhPathcNameDto } from './dto/authPathNames.dto';
 @Injectable()
 export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
-
-  async onModuleInit() {
-    await this.$connect();
-    console.log('🔌 AuthService connected to database');
-  }
-
-  async singJwt(payload: JwtPayload) {
-    return this.jwtservice.sign(payload);
-  }
-
-  async registerUser(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.USER
+
+    constructor(private readonly jwtservice: JwtService,
+        @Inject(NATS_SERVICE) private readonly client: ClientProxy,
+    ) {
+        super()
+    }
+
+
+
+    onModuleInit() {
+        this.$connect();
+
+    }
+
+    async singJwt(Payload: JwtPayload) {
+        return this.jwtservice.sign(Payload)
+    }
+    async patchNames(datas: auhPathcNameDto) {
+        try {
+            const { id, lastnames, names } = datas;
+            const user = await this.user.findUnique({
+                where: {
+                    id
+                }
+            })
+            if (!user) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El usuario existe'
+                })
+            }
+            const editData = await this.user.update({
+                where: {
+                    id
+                },
+                data: {
+                    names:names,lastnames:lastnames
+                },
+                select:{
+                    email:true,
+                    lastnames:true,
+                    names:true,
+                    id:true
+                }
+            })
+            return {
+                status: 200,
+                data: editData
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
         }
-      });
-
-      const { password: _, ...rest } = newUser;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
     }
-  }
-
-  async registerPartner(registerPartnerDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerPartnerDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El partner ya existe'
-        });
-      }
-
-      const newPartner = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.USER_PARTNER
+
+    async registerUser(RegisterUserDto: RegisterUserDto) {
+        try {
+            const { email, names, password, lastnames } = RegisterUserDto;
+            const user = await this.user.findUnique({
+                where: {
+                    email: email
+                }
+            });
+
+            if (user) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El usuario existe'
+                })
+            }
+            const Newuser = await this.user.create({
+                data: {
+                    email: email,
+                    password: bcrypt.hashSync(password, 10),
+                    names: names,
+                    lastnames: lastnames,
+                    role: 'USER'
+                }
+            });
+
+            // const dataUser = await firstValueFrom(
+            //     this.client.send('User.CreateUserData.User', {
+            //         userId: Newuser.id,
+            //     })
+            // )
+
+
+            const { password: __, ...rest } = Newuser;
+
+            return {
+                user: rest,
+                token: await this.singJwt(rest),
+                
+            };
+
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
+    }
+    async CreateSuperAdmin(RegisterUserDto: RegisterUserDto) {
+        try {
+            const { email, names, password, lastnames } = RegisterUserDto;
+            const user = await this.user.findUnique({
+                where: {
+                    email: email
+                }
+            });
+            const userAdmin = await this.user.findFirst({
+                where: {
+                    role: 'SUPER_ADMIN'
+                }
+            })
+            if (userAdmin) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'Solo puede existir un super admin'
+                })
+            }
+            if (user) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El usuario existe'
+                })
+            }
+            const Newuser = await this.user.create({
+                data: {
+                    email: email,
+                    password: bcrypt.hashSync(password, 10),
+                    names: names,
+                    lastnames: lastnames,
+                    role: 'SUPER_ADMIN'
+                }
+            });
+
+
+            const { password: __, ...rest } = Newuser;
+            return {
+                user: rest,
+                token: await this.singJwt(rest),
+                datauser: Newuser
+            };
+
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
         }
-      });
-
-      const { password: _, ...rest } = newPartner;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
     }
-  }
-
-  async CreateSuperAdmin(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const userAdmin = await this.user.findFirst({
-        where: { role: Role.SUPER_ADMIN }
-      });
-
-      if (userAdmin) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Solo puede existir un super admin'
-        });
-      }
 
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
 
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.SUPER_ADMIN
+
+
+
+    async resetPassword(email: string, password: string) {
+        try {
+            const user = await this.user.findFirst({
+                where: {
+                    email: email
+                }
+            })
+            if (!user) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'El usuario no existe'
+                })
+            }
+            const hashedPassword = await bcrypt.hash(password, 10); // Mejor usar await
+            await this.user.update({
+                where: {
+                    email: email
+                },
+                data: {
+                    password: hashedPassword
+                }
+            })
+            return {
+                status: 200,
+                data: 'Contraseña actualizada correctamente',
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
         }
-      });
-
-      const { password: _, ...rest } = newUser;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest)
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
     }
-  }
-
-  // LOGIN CON VALIDACIÓN REAL DE CONTRASEÑAS
-  async LoginUser(loginUserDto: any) {
-    try {
-      console.log("🔍 LoginUser called with:", loginUserDto);
-      
-      const { email, password } = loginUserDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      console.log("👤 User found:", user ? `${user.names} (${user.email})` : 'No user found');
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Usuario o contraseña no válida'
+
+
+    async registerPartner(RegisterUserDto: RegisterPartnerDto) {
+        const { email, names, password, lastnames, document, phone, title } = RegisterUserDto;
+        const user = await this.user.findUnique({
+            where: {
+                email: email
+            }
         });
-      }
+        if (user) {
+            throw new RpcException({
+                status: 400,
+                message: 'El usuario existe'
 
-      // VALIDACIÓN REAL DE CONTRASEÑA
-      console.log("🔐 Verificando contraseña contra base de datos...");
-      const isPasswordValid = bcrypt.compareSync(password, user.password);
-      console.log("🔐 Password válida:", isPasswordValid);
+            })
 
-      if (!isPasswordValid) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Correo o contraseña inválidos'
+        }
+        const Newuser = await this.user.create({
+            data: {
+                email: email,
+                password: bcrypt.hashSync(password, 10),
+                names: names,
+                lastnames: lastnames,
+                role: 'USER_PARTNER'
+            }
         });
-      }
-
-      const { password: _, ...rest } = user;
-      
-      console.log("✅ Credenciales válidas, generando token JWT...");
-      const token = await this.singJwt(rest);
-
-      return {
-        user: rest,
-        token
-      };
-    } catch (error) {
-      console.error("❌ Error en LoginUser:", error.message);
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
+        const { password: __, ...rest } = Newuser;
+        const dataNewPartner: CreateUserPartnerDto = {
+            id: Newuser.id,
+            document: document,
+            phone: phone,
+            title: title
+        }
+        const dataUser = await firstValueFrom(
+            this.client.send('update.partner.partner', {
+                id: dataNewPartner.id,
+                document: document,
+                phone: phone,
+                title: dataNewPartner.title,
+                name: names
+            })
+        )
+
+        return {
+            user: rest,
+            token: await this.singJwt(rest),
+            dataUser: dataUser
+        };
+
     }
-  }
-
-  async verifyToken(token: string) {
-    try {
-      const decoded = this.jwtservice.verify(token);
-      return {
-        user: decoded,
-        token: await this.singJwt(decoded),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 401,
-        message: 'Invalid token'
-      });
+
+
+    async LoginUser(LoginUserDto: LoginUserDto) {
+        try {
+            const { email, password } = LoginUserDto;
+            const user = await this.user.findUnique({
+                where: {
+                    email: email
+                }
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'Usuario o contrasena no valida'
+                })
+            }
+            if (user.role === 'DELETED_USER' || user.role === 'DELETED_USER_PARTNER') {
+                throw new RpcException({
+                    status: 400,
+                    message: 'EL usuario fue borrado'
+                })
+            }
+            const isPasswordValid = bcrypt.compareSync(password, user.password)
+            if (!isPasswordValid) {
+                throw new RpcException({
+                    status: 400,
+                    message: 'Correo o contraseña inválidos'
+                })
+            }
+            const { password: __, ...rest } = user;
+
+            return {
+                user: rest,
+                token: await this.singJwt(rest)
+            };
+
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
     }
-  }
-
-  async verifyUserEmail(email: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { email },
-        select: { id: true, email: true, names: true, lastnames: true }
-      });
-      return {
-        status: 200,
-        data: !!user
-      };
-    } catch (error) {
-      return {
-        status: 500,
-        data: false
-      };
+    async verifyToken(token: string) {
+        try {
+            const { sub, iat, exp, ...user } = this.jwtservice.verify(token, {
+                secret: envs.jwtSecret
+            })
+            return {
+                user: user,
+                token: await this.singJwt(user),
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 401,
+                message: 'Invalid token'
+            })
+        }
     }
-  }
-
-  async get_data_basic_user(id: string) {
-    try {
-      const user = await this.user.findFirst({
-        where: { id },
-        select: { names: true, lastnames: true, email: true }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 401,
-          message: 'No existe el usuario'
-        });
-      }
-
-      return {
-        status: 200,
-        data: user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 500,
-        message: error.message
-      });
+    async refreshtoken(token:string){
+         try {
+            const { sub, iat, exp, ...user } = this.jwtservice.verify(token, {
+                secret: envs.jwtSecret
+            })
+            const userdata = await this.user.findFirst({
+                where:{
+                    id:user.id
+                }
+            })
+            return {
+                user: userdata,
+                token: await this.singJwt(user),
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 401,
+                message: 'Invalid token'
+            })
+        }
     }
-  }
-
-  // MÉTODOS QUE EL CONTROLLER NECESITA:
-  async getInformationUsersAdmin(id: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { id },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          createdAt: true,
-          updatedAt: true
+    async verifyUserEmail(email: string) {
+        try {
+            const user = await this.user.findUnique({
+                where: { email: email },
+                select: {
+                    id: true,
+                    email: true,
+                    names: true,
+                    lastnames: true,
+                }
+            });
+            if (!user) {
+                return {
+                    return: 400,
+                    data: false
+                }
+            }
+            return {
+                status: 200,
+                data: true
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error interno al obtener el usuario',
+            });
         }
-      });
-      
-      if (!user) {
-        throw new RpcException({
-          statusCode: 404,
-          message: "Usuario no encontrado"
-        });
-      }
-      
-      const totalUsers = await this.user.count({
-        where: { role: Role.USER }
-      });
-      
-      const totalPartners = await this.user.count({
-        where: { role: Role.USER_PARTNER }
-      });
-      
-      return {
-        status: 200,
-        data: {
-          user: user,
-          totalUsers: totalUsers,
-          totalPartners: totalPartners
+    }
+    async get_data_basic_user(id: string) {
+        try {
+            const user = await this.user.findFirst({
+                where: { id: id },
+                select: {
+                    names: true,
+                    lastnames: true,
+                    email: true,
+                }
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 401,
+                    message: 'no existe el uruario '
+                })
+            }
+            return {
+                status: 200,
+                data: user
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error interno al obtener el usuario',
+            });
+        }
+    }
+
+
+
+
+
+    /**
+     * todo services admin
+     */
+    async getInformationUsersAdmin(id: string) {
+        try {
+            const user = await this.user.findFirst({
+                where: { id: id },
+                select: {
+                    id: true,
+                    email: true,
+                    names: true,
+                    role: true,
+                }
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 401,
+                    message: 'no existe el uruario '
+                })
+            }
+            if (user.role !== 'ADMIN' && user.role !== 'SUPER_ADMIN') {
+                throw new RpcException({
+                    status: 403,
+                    message: 'No tienes permisos para acceder a esta información',
+                });
+            }
+            const numberProfessionals = await this.user.count({
+                where: {
+                    role: 'USER_PARTNER'
+                }
+            });
+            const countUsers = await this.user.count({
+                where: {
+                    role: 'USER'
+                }
+            })
+            const countPendingDelete = await this.user.count({
+                where: {
+                    role: 'PENDING_DELETE'
+                }
+            })
+            const deleteUsers = await this.user.count({
+                where: {
+                    role: 'DELETED_USER'
+                }
+            })
+
+            const deleteUsersPartner = await this.user.count({
+                where: {
+                    role: 'DELETED_USER_PARTNER'
+                }
+            })
+
+            const reservations = await firstValueFrom(
+                this.client.send('reservation-ms.get.count.all', {})
+            );
+
+            const pending_partner = await this.pendingPartner.count({
+                where: {
+                    status: StatusPendingPartner.PENDING
+                }
+            });
+
+
+            return {
+                status: 200,
+                data: {
+                    numberProfessionals: numberProfessionals,
+                    countUsers: countUsers,
+                    countPendingDelete: countPendingDelete,
+                    deleteUsers: deleteUsers,
+                    deleteUsersPartner: deleteUsersPartner,
+                    reservations: reservations.data,
+                    pendingPartner: pending_partner
+                }
+            }
+
+
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error interno al obtener el usuario',
+            });
+        }
+    }
+
+    async deleteUser(id: string) {
+        try {
+            const user = await this.user.findFirst({
+                where: { id: id },
+                select: {
+                    id: true,
+                    email: true,
+                    names: true,
+                    role: true,
+                }
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 401,
+                    message: 'no existe el uruario '
+                })
+            }
+            if (user.role === 'USER') {
+                await this.user.update({
+                    where: { id: id },
+                    data: {
+                        role: 'DELETED_USER'
+                    }
+                })
+            }
+            if (user.role === 'USER_PARTNER') {
+                await this.user.update({
+                    where: { id: id },
+                    data: {
+                        role: 'DELETED_USER_PARTNER'
+                    }
+                })
+            }
+            return {
+                status: 200,
+                data: 'Usuario eliminado correctamente'
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error interno al eliminar el usuario',
+            });
+        }
+    }
+    async getAllUsersPartners(PaginationDto: PaginationDto) {
+        try {
+
+            const { page, limit } = PaginationDto;
+            const currentPage = page ?? 1;
+            const perPage = limit ?? 10;
+            const rolesToFilter = [Role.USER_PARTNER, Role.DELETED_USER_PARTNER];
+            const total = await this.user.count({
+                where: {
+                    role: {
+                        in: rolesToFilter,
+                    }
+                }
+            });
+
+            const result = await this.user.findMany({
+                skip: (currentPage - 1) * perPage,
+                take: perPage,
+                where: {
+                    role: {
+                        in: rolesToFilter,
+                    }
+                },
+                select: {
+                    id: true,
+                    email: true,
+                    names: true,
+                    lastnames: true,
+                    role: true,
+                },
+            });
+            return {
+                status: 200,
+                data: result,
+                meta: {
+                    total,
+                    page: currentPage,
+                    lastPage: Math.ceil(total / perPage)
+                }
+            };
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error interno al obtener los usuarios',
+            });
+        }
+    }
+
+    async getAllUsers(PaginationDto: PaginationDto) {
+        try {
+
+            const { page, limit } = PaginationDto;
+            const currentPage = page ?? 1;
+            const perPage = limit ?? 10;
+            const rolesToFilter = [Role.USER, Role.DELETED_USER];
+            const total = await this.user.count({
+                where: {
+                    role: {
+                        in: rolesToFilter,
+                    }
+                }
+            });
+
+            const result = await this.user.findMany({
+                skip: (currentPage - 1) * perPage,
+                take: perPage,
+                where: {
+                    role: {
+                        in: rolesToFilter,
+                    }
+                },
+                select: {
+                    id: true,
+                    email: true,
+                    names: true,
+                    lastnames: true,
+                    role: true
+                },
+            });
+            return {
+                status: 200,
+                data: result,
+                meta: {
+                    total,
+                    page: currentPage,
+                    lastPage: Math.ceil(total / perPage)
+                }
+            };
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error interno al obtener los usuarios',
+            });
         }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
     }
-  }
-
-  async getAllUsersPartners(PaginationDto: any) {
-    try {
-      const { page = 1, limit = 10 } = PaginationDto;
-      const currentPage = Math.max(1, Number(page));
-      const perPage = Math.max(1, Math.min(100, Number(limit)));
-      const offset = (currentPage - 1) * perPage;
-      
-      const users = await this.user.findMany({
-        where: { role: Role.USER_PARTNER },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          createdAt: true,
-          updatedAt: true
-        },
-        skip: offset,
-        take: perPage,
-        orderBy: { createdAt: "desc" }
-      });
-      
-      const total = await this.user.count({
-        where: { role: Role.USER_PARTNER }
-      });
-      
-      const totalPages = Math.ceil(total / perPage);
-      
-      return {
-        status: 200,
-        data: users,
-        meta: { total, page: currentPage, limit: perPage, totalPages }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
+
+    async setStatusPartners(SetStatusPartnerDto: SetStatusPartnerDto) {
+        try {
+            const { id, status } = SetStatusPartnerDto;
+            const user = await this.user.findFirst({
+                where: {
+                    id: id,
+                },
+                select: {
+                    id: true,
+                    email: true,
+                    names: true,
+                    role: true,
+                }
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 401,
+                    message: 'no existe el uruario '
+                })
+            }
+            if (user.role !== 'USER_PARTNER' && user.role !== 'DELETED_USER_PARTNER') {
+                throw new RpcException({
+                    status: 403,
+                    message: 'No tienes permisos para cambiar el estado del profesional',
+                });
+            }
+            const role = user.role === 'USER_PARTNER' ? 'DELETED_USER_PARTNER' : 'USER_PARTNER';
+            await this.user.update({
+                where: { id: id },
+                data: {
+                    role: role
+                }
+            })
+            return {
+                status: 200,
+                data: 'Estado del profesional actualizado correctamente'
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error al establecer el estado del professional',
+            });
+        }
     }
-  }
-
-  async getAllUsers(PaginationDto: any) {
-    try {
-      const { page = 1, limit = 10 } = PaginationDto;
-      const currentPage = Math.max(1, Number(page));
-      const perPage = Math.max(1, Math.min(100, Number(limit)));
-      const offset = (currentPage - 1) * perPage;
-      
-      const users = await this.user.findMany({
-        where: { role: Role.USER },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          createdAt: true,
-          updatedAt: true
-        },
-        skip: offset,
-        take: perPage,
-        orderBy: { createdAt: "desc" }
-      });
-      
-      const total = await this.user.count({
-        where: { role: Role.USER }
-      });
-      
-      const totalPages = Math.ceil(total / perPage);
-      
-      return {
-        status: 200,
-        data: users,
-        meta: { total, page: currentPage, limit: perPage, totalPages }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
+
+
+    async setStatusUser(setStatusUserDto: setStatusUserDto) {
+        try {
+            const { id, status } = setStatusUserDto;
+            const user = await this.user.findFirst({
+                where: {
+                    id: id,
+                },
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 401,
+                    message: 'no existe el usuario '
+                })
+            }
+            if (user.role !== 'USER' && user.role !== 'DELETED_USER') {
+                throw new RpcException({
+                    status: 403,
+                    message: 'No tienes permisos para cambiar el estado del usuario',
+                });
+            }
+            const role = user.role === 'USER' ? 'DELETED_USER' : 'USER';
+            await this.user.update({
+                where: { id: id },
+                data: {
+                    role: role
+                }
+            })
+            return {
+                status: 200,
+                data: 'Estado del usuario actualizado correctamente'
+            }
+        } catch (error) {
+            throw new RpcException({
+                status: 500,
+                message: 'Error al establecer el estado del usuario',
+            });
+        }
     }
-  }
 }
diff --git a/launcher/auth-ms/src/auth/auth.service.ts.backup b/launcher/auth-ms/src/auth/auth.service.ts.backup
deleted file mode 100644
index 905f83b..0000000
--- a/launcher/auth-ms/src/auth/auth.service.ts.backup
+++ /dev/null
@@ -1,144 +0,0 @@
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient } from '@prisma/client';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
-import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
-
-interface JwtPayload {
-  id: string;
-  email: string;
-  names: string;
-  lastnames: string;
-  role: string;
-}
-
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
-
-  onModuleInit() {
-    this.$connect();
-  }
-
-  async singJwt(payload: JwtPayload) {
-    return this.jwtservice.sign(payload);
-  }
-
-  async registerUser(registerUserDto: any) {
-    const { email, names, password, lastnames } = registerUserDto;
-    const existingUser = await this.user.findUnique({ where: { email } });
-    
-    if (existingUser) {
-      throw new RpcException({ statusCode: 400, message: 'El usuario ya existe' });
-    }
-
-    const newUser = await this.user.create({
-      data: { email, password: bcrypt.hashSync(password, 10), names, lastnames, role: 'USER' }
-    });
-
-    const { password: _, ...rest } = newUser;
-    const userForToken: JwtPayload = {
-      id: rest.id, email: rest.email, names: rest.names, lastnames: rest.lastnames, role: rest.role || 'USER'
-    };
-
-    return { user: rest, token: await this.singJwt(userForToken) };
-  }
-
-  async registerPartner(registerPartnerDto: any) {
-    const { email, names, password, lastnames } = registerPartnerDto;
-    const user = await this.user.findUnique({ where: { email } });
-    
-    if (user) {
-      throw new RpcException({ statusCode: 400, message: 'El usuario ya existe' });
-    }
-
-    const newUser = await this.user.create({
-      data: { email, password: bcrypt.hashSync(password, 10), names, lastnames, role: 'USER_PARTNER' }
-    });
-
-    const { password: _, ...rest } = newUser;
-    const userForToken: JwtPayload = {
-      id: rest.id, email: rest.email, names: rest.names, lastnames: rest.lastnames, role: rest.role || 'USER_PARTNER'
-    };
-
-    return { user: rest, token: await this.singJwt(userForToken) };
-  }
-
-  async CreateSuperAdmin(registerUserDto: any) {
-    const { email, names, password, lastnames } = registerUserDto;
-    const userAdmin = await this.user.findFirst({ where: { role: 'SUPER_ADMIN' } });
-    
-    if (userAdmin) {
-      throw new RpcException({ statusCode: 400, message: 'Solo puede existir un super admin' });
-    }
-
-    const user = await this.user.findUnique({ where: { email } });
-    if (user) {
-      throw new RpcException({ statusCode: 400, message: 'El usuario ya existe' });
-    }
-
-    const newUser = await this.user.create({
-      data: { email, password: bcrypt.hashSync(password, 10), names, lastnames, role: 'SUPER_ADMIN' }
-    });
-
-    const { password: _, ...rest } = newUser;
-    const userForToken: JwtPayload = {
-      id: rest.id, email: rest.email, names: rest.names, lastnames: rest.lastnames, role: rest.role || 'SUPER_ADMIN'
-    };
-
-    return { user: rest, token: await this.singJwt(userForToken) };
-  }
-
-  async LoginUser(loginUserDto: any) {
-    const { email, password } = loginUserDto;
-    const user = await this.user.findUnique({ where: { email } });
-
-    if (!user) {
-      throw new RpcException({ statusCode: 400, message: 'Usuario o contraseña no válida' });
-    }
-
-    const isPasswordValid = bcrypt.compareSync(password, user.password);
-    if (!isPasswordValid) {
-      throw new RpcException({ statusCode: 400, message: 'Correo o contraseña inválidos' });
-    }
-
-    const { password: _, ...rest } = user;
-    const userForToken: JwtPayload = {
-      id: rest.id, email: rest.email, names: rest.names, lastnames: rest.lastnames, role: rest.role || 'USER'
-    };
-
-    return { user: rest, token: await this.singJwt(userForToken) };
-  }
-
-  async verifyToken(token: string) {
-    const decoded = this.jwtservice.verify(token, {
-      secret: process.env.JWT_SECRET || 'EstoEsUnStringSeguroParaJWT2024'
-    });
-    return { user: decoded, token: await this.singJwt(decoded) };
-  }
-
-  async verifyUserEmail(email: string) {
-    const user = await this.user.findUnique({
-      where: { email },
-      select: { id: true, email: true, names: true, lastnames: true }
-    });
-    return { status: 200, data: !!user };
-  }
-
-  async get_data_basic_user(id: string) {
-    const user = await this.user.findFirst({
-      where: { id },
-      select: { names: true, lastnames: true, email: true }
-    });
-    if (!user) {
-      throw new RpcException({ statusCode: 401, message: 'No existe el usuario' });
-    }
-    return { status: 200, data: user };
-  }
-}
diff --git a/launcher/auth-ms/src/auth/auth.service.ts.backup2 b/launcher/auth-ms/src/auth/auth.service.ts.backup2
deleted file mode 100644
index 105f4ab..0000000
--- a/launcher/auth-ms/src/auth/auth.service.ts.backup2
+++ /dev/null
@@ -1,390 +0,0 @@
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient } from '@prisma/client';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
-import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
-
-interface JwtPayload {
-  id: string;
-  email: string;
-  names: string;
-  lastnames: string;
-  role: string;
-}
-
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
-
-  onModuleInit() {
-    this.$connect();
-  }
-
-  async singJwt(payload: JwtPayload) {
-    return this.jwtservice.sign(payload);
-  }
-
-  async registerUser(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'USER'
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'USER'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async registerPartner(registerPartnerDto: any) {
-    try {
-      const { email, names, password, lastnames, document, phone, title } = registerPartnerDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const Newuser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'USER_PARTNER'
-        }
-      });
-
-      const { password: _, ...rest } = Newuser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'USER_PARTNER'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken)
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async CreateSuperAdmin(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      const userAdmin = await this.user.findFirst({
-        where: { role: 'SUPER_ADMIN' }
-      });
-
-      if (userAdmin) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Solo puede existir un super admin'
-        });
-      }
-
-      if (user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const Newuser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'SUPER_ADMIN'
-        }
-      });
-
-      const { password: _, ...rest } = Newuser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'SUPER_ADMIN'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken)
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async LoginUser(loginUserDto: any) {
-    try {
-      const { email, password } = loginUserDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Usuario o contraseña no válida'
-        });
-      }
-
-      const isPasswordValid = bcrypt.compareSync(password, user.password);
-
-      if (!isPasswordValid) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Correo o contraseña inválidos'
-        });
-      }
-
-      const { password: _, ...rest } = user;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'USER'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken)
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async verifyToken(token: string) {
-    try {
-      const decoded = this.jwtservice.verify(token, {
-        secret: process.env.JWT_SECRET || 'EstoEsUnStringSeguroParaJWT2024'
-      });
-      return {
-        user: decoded,
-        token: await this.singJwt(decoded),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 401,
-        message: 'Invalid token'
-      });
-    }
-  }
-
-  async verifyUserEmail(email: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { email },
-        select: { id: true, email: true, names: true, lastnames: true }
-      });
-      return {
-        status: 200,
-        data: !!user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 500,
-        message: 'Error interno al obtener el usuario'
-      });
-    }
-  }
-
-  async get_data_basic_user(id: string) {
-    try {
-      const user = await this.user.findFirst({
-        where: { id },
-        select: { names: true, lastnames: true, email: true }
-      });
-      if (!user) {
-        throw new RpcException({
-          statusCode: 401,
-          message: 'No existe el usuario'
-        });
-      }
-      return {
-        status: 200,
-        data: user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-}
-
-  async getInformationUsersAdmin(id: string) {
-    try {
-      const user = await this.user.findFirst({
-        where: { id },
-        select: { names: true, lastnames: true, email: true, role: true, id: true }
-      });
-      if (!user) {
-        throw new RpcException({
-          statusCode: 401,
-          message: 'No existe el usuario'
-        });
-      }
-      if (user.role !== 'SUPER_ADMIN' && user.role !== 'ADMIN') {
-        throw new RpcException({
-          statusCode: 401,
-          message: 'Sin permisos de administrador'
-        });
-      }
-      const totalUsers = await this.user.count({
-        where: { role: 'USER' }
-      });
-      const totalPartner = await this.user.count({
-        where: { role: 'USER_PARTNER' }
-      });
-      return {
-        status: 200,
-        data: {
-          user: user,
-          totalUsers: totalUsers,
-          totalPartner: totalPartner
-        }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message,
-      });
-    }
-  }
-
-  async getAllUsersPartners(PaginationDto: any) {
-    try {
-      const { limit, page } = PaginationDto;
-      const currentPage = page ?? 1;
-      const perPage = limit ?? 10;
-      const offset = (currentPage - 1) * perPage;
-
-      const users = await this.user.findMany({
-        where: { role: 'USER_PARTNER' },
-        select: { names: true, lastnames: true, email: true, role: true, id: true },
-        skip: offset,
-        take: perPage,
-        orderBy: { email: 'asc' }
-      });
-
-      const total = await this.user.count({
-        where: { role: 'USER_PARTNER' }
-      });
-
-      const totalPages = Math.ceil(total / perPage);
-
-      return {
-        status: 200,
-        data: users,
-        meta: { total, page: currentPage, limit: perPage, totalPages }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message,
-      });
-    }
-  }
-
-  async getAllUsers(PaginationDto: any) {
-    try {
-      const { limit, page } = PaginationDto;
-      const currentPage = page ?? 1;
-      const perPage = limit ?? 10;
-      const offset = (currentPage - 1) * perPage;
-
-      const users = await this.user.findMany({
-        where: { role: 'USER' },
-        select: { names: true, lastnames: true, email: true, role: true, id: true },
-        skip: offset,
-        take: perPage,
-        orderBy: { email: 'asc' }
-      });
-
-      const total = await this.user.count({
-        where: { role: 'USER' }
-      });
-
-      const totalPages = Math.ceil(total / perPage);
-
-      return {
-        status: 200,
-        data: users,
-        meta: { total, page: currentPage, limit: perPage, totalPages }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message,
-      });
-    }
-  }
-}
diff --git a/launcher/auth-ms/src/auth/auth.service.ts.error-backup b/launcher/auth-ms/src/auth/auth.service.ts.error-backup
deleted file mode 100644
index f54e080..0000000
--- a/launcher/auth-ms/src/auth/auth.service.ts.error-backup
+++ /dev/null
@@ -1,116 +0,0 @@
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient } from '@prisma/client';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
-import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
-
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
-
-  async onModuleInit() {
-    await this.$connect();
-    console.log('🔌 AuthService connected');
-  }
-
-  async singJwt(payload: any) {
-    return this.jwtservice.sign(payload);
-  }
-
-  async registerUser(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'USER'
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async LoginUser(loginUserDto: any) {
-    try {
-      console.log("🔍 LoginUser called");
-      
-      const { email, password } = loginUserDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Usuario no encontrado'
-        });
-      }
-
-      const isPasswordValid = bcrypt.compareSync(password, user.password);
-
-      if (!isPasswordValid) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Credenciales inválidas'
-        });
-      }
-
-      const { password: _, ...rest } = user;
-      const token = await this.singJwt(rest);
-      
-      console.log("✅ Login successful");
-
-      return {
-        user: rest,
-        token,
-      };
-    } catch (error) {
-      console.error("❌ Login error:", error.message);
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async verifyToken(token: string) {
-    try {
-      const payload = this.jwtservice.verify(token);
-      return { valid: true, user: payload };
-    } catch (error) {
-      return { valid: false, user: null };
-    }
-  }
-}
diff --git a/launcher/auth-ms/src/auth/auth.service.ts.incomplete-backup b/launcher/auth-ms/src/auth/auth.service.ts.incomplete-backup
deleted file mode 100644
index 91ae3ca..0000000
--- a/launcher/auth-ms/src/auth/auth.service.ts.incomplete-backup
+++ /dev/null
@@ -1,97 +0,0 @@
-import { Inject, Injectable, Logger, OnModuleInit } from "@nestjs/common";
-import { ClientProxy, RpcException } from "@nestjs/microservices";
-import { PrismaClient, Role, StatusPendingPartner } from "@prisma/client";
-import { LoginUserDto, RegisterUserDto, SetStatusPartnerDto, setStatusUserDto } from "./dto";
-import * as bcrypt from "bcrypt";
-import { JwtService } from "@nestjs/jwt";
-import { JwtPayload } from "src/interfaces/payload.interface";
-import { envs, NATS_SERVICE } from "src/config";
-import { RegisterPartnerDto } from "./dto/Register-partner.dto copy";
-import { firstValueFrom } from "rxjs";
-import { CreateUserPartnerDto } from "./dto/CreateUserPartner.dto";
-import { PaginationDto } from "./commont/pagination.dto";
-import { auhPathcNameDto } from "./dto/authPathNames.dto";
-
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-    constructor(
-        private readonly jwtservice: JwtService,
-        @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-    ) {
-        super()
-    }
-
-    onModuleInit() {
-        this.$connect();
-    }
-
-    async singJwt(Payload: JwtPayload) {
-        return this.jwtservice.sign(Payload)
-    }
-
-    async registerUser(registerUserDto: RegisterUserDto) {
-        try {
-            const { email, names, password, lastnames } = registerUserDto;
-            const existingUser = await this.user.findUnique({
-                where: { email }
-            });
-            if (existingUser) {
-                throw new RpcException({
-                    statusCode: 400,
-                    message: "El usuario ya existe"
-                });
-            }
-            const newUser = await this.user.create({
-                data: {
-                    email,
-                    password: bcrypt.hashSync(password, 10),
-                    names,
-                    lastnames,
-                    role: Role.USER
-                }
-            });
-            const { password: _, ...rest } = newUser;
-            return {
-                user: rest,
-                token: await this.singJwt(rest)
-            };
-        } catch (error) {
-            throw new RpcException({
-                statusCode: 400,
-                message: error.message
-            });
-        }
-    }
-
-    async LoginUser(loginUserDto: LoginUserDto) {
-        try {
-            const { email, password } = loginUserDto;
-            const user = await this.user.findUnique({
-                where: { email }
-            });
-            if (!user) {
-                throw new RpcException({
-                    statusCode: 400,
-                    message: "Usuario no encontrado"
-                });
-            }
-            const isPasswordValid = bcrypt.compareSync(password, user.password);
-            if (!isPasswordValid) {
-                throw new RpcException({
-                    statusCode: 400,
-                    message: "Credenciales inválidas"
-                });
-            }
-            const { password: _, ...rest } = user;
-            return {
-                user: rest,
-                token: await this.singJwt(rest)
-            };
-        } catch (error) {
-            throw new RpcException({
-                statusCode: 400,
-                message: error.message
-            });
-        }
-    }
-}
diff --git a/launcher/auth-ms-broken-backup/src/commont/axceptions/RpcExceptionsFilters.ts b/launcher/auth-ms/src/auth/commont/axceptions/RpcExceptionsFilters.ts
similarity index 100%
rename from launcher/auth-ms-broken-backup/src/commont/axceptions/RpcExceptionsFilters.ts
rename to launcher/auth-ms/src/auth/commont/axceptions/RpcExceptionsFilters.ts
diff --git a/launcher/auth-ms/src/auth/commont/pagination.dto.ts b/launcher/auth-ms/src/auth/commont/pagination.dto.ts
index a0c4b45..058bee4 100644
--- a/launcher/auth-ms/src/auth/commont/pagination.dto.ts
+++ b/launcher/auth-ms/src/auth/commont/pagination.dto.ts
@@ -1,4 +1,14 @@
-export interface PaginationDto {
-  page?: number;
-  limit?: number;
-}
+import { Type } from "class-transformer";
+import { IsOptional, IsPositive } from "class-validator";
+
+export class PaginationDto {
+    @IsPositive()
+    @IsOptional()
+    @Type(()=>Number)
+    page ?: number = 1;
+
+    @IsPositive()
+    @IsOptional()
+    @Type(()=>Number)
+    limit?: number = 10;
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/auth/dto/CreateUserPartner.dto.ts b/launcher/auth-ms/src/auth/dto/CreateUserPartner.dto.ts
new file mode 100644
index 0000000..23c659c
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/CreateUserPartner.dto.ts
@@ -0,0 +1,18 @@
+import { IsString } from "class-validator";
+
+
+export class CreateUserPartnerDto {
+    
+    @IsString()
+    id:string
+ 
+    @IsString()
+    phone:string;
+
+    @IsString()
+    title:string;
+
+    @IsString()
+    document:string;  
+
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/auth/dto/Register-partner.dto copy.ts b/launcher/auth-ms/src/auth/dto/Register-partner.dto copy.ts
new file mode 100644
index 0000000..751b669
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/Register-partner.dto copy.ts	
@@ -0,0 +1,34 @@
+import { IsEmail, IsString , Matches } from "class-validator";
+
+export class RegisterPartnerDto{
+    @IsString()
+    names:string;
+
+    @IsString()
+    @IsEmail()
+    email:string;
+
+    @IsString()
+    @Matches(/^(?=.*[a-z])(?=.*[A-Z]).{8,}$/, {
+        message: 'La contraseña debe tener al menos 8 caracteres, una letra mayúscula y una letra minúscula',
+    })
+    password: string;
+
+    @IsString()
+    lastnames:string;
+    
+    @IsString()
+    phone:string;
+
+    
+    @IsString()
+    document:string;
+
+    @IsString()
+    title:string;
+
+
+
+    
+    
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/auth/dto/Register-user.dto.ts b/launcher/auth-ms/src/auth/dto/Register-user.dto.ts
new file mode 100644
index 0000000..8121cb8
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/Register-user.dto.ts
@@ -0,0 +1,26 @@
+import { IsEmail, IsString, IsStrongPassword, Matches } from "class-validator";
+
+export class RegisterUserDto{
+    @IsString()
+    names:string;
+
+    @IsString()
+    @IsEmail()
+    email:string;
+
+    @IsString()
+    @Matches(/^(?=.*[a-z])(?=.*[A-Z]).{8,}$/, {
+        message: 'La contraseña debe tener al menos 8 caracteres, una letra mayúscula y una letra minúscula',
+    })
+    password: string;
+
+    @IsString()
+    lastnames:string;
+    
+
+  
+
+
+    
+    
+}
\ No newline at end of file
diff --git a/launcher/auth-ms-broken-backup/src/users/dto/auth-ms/authPathNames.dto.ts b/launcher/auth-ms/src/auth/dto/authPathNames.dto.ts
similarity index 100%
rename from launcher/auth-ms-broken-backup/src/users/dto/auth-ms/authPathNames.dto.ts
rename to launcher/auth-ms/src/auth/dto/authPathNames.dto.ts
diff --git a/launcher/auth-ms/src/auth/dto/index.ts b/launcher/auth-ms/src/auth/dto/index.ts
new file mode 100644
index 0000000..86805c7
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/index.ts
@@ -0,0 +1,6 @@
+export * from './Register-user.dto'
+export * from './login-user.dto'
+export * from './Register-partner.dto copy'
+export * from './CreateUserPartner.dto'
+export * from './set_status_partner.dto'
+export * from './set_status_user.dto'
\ No newline at end of file
diff --git a/launcher/auth-ms/src/auth/dto/login-user.dto.ts b/launcher/auth-ms/src/auth/dto/login-user.dto.ts
new file mode 100644
index 0000000..412651d
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/login-user.dto.ts
@@ -0,0 +1,10 @@
+import { IsEmail, IsString, IsStrongPassword } from "class-validator";
+
+export class LoginUserDto{
+    @IsString()
+    @IsEmail()
+    email:string;
+    @IsString()
+    @IsStrongPassword()
+    password:string;
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/auth/dto/set_status_partner.dto.ts b/launcher/auth-ms/src/auth/dto/set_status_partner.dto.ts
new file mode 100644
index 0000000..55b4702
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/set_status_partner.dto.ts
@@ -0,0 +1,9 @@
+import { IsString } from "class-validator";
+
+export class SetStatusPartnerDto {
+  @IsString()
+  id: string;
+
+  @IsString()
+  status: "USER_PARTNER" | "DELETED_USER_PARTNER";
+}
diff --git a/launcher/auth-ms/src/auth/dto/set_status_user.dto.ts b/launcher/auth-ms/src/auth/dto/set_status_user.dto.ts
new file mode 100644
index 0000000..e96e279
--- /dev/null
+++ b/launcher/auth-ms/src/auth/dto/set_status_user.dto.ts
@@ -0,0 +1,9 @@
+import { IsString } from "class-validator";
+
+export class setStatusUserDto {
+  @IsString()
+  id: string;
+
+  @IsString()
+  status: "USER" | "DELETED_USER_PARTNER";
+}
diff --git a/launcher/auth-ms/src/commont/axceptions/RpcExceptionsFilters.ts b/launcher/auth-ms/src/commont/axceptions/RpcExceptionsFilters.ts
deleted file mode 100644
index 74d73d5..0000000
--- a/launcher/auth-ms/src/commont/axceptions/RpcExceptionsFilters.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { Catch, ExceptionFilter, ArgumentsHost } from '@nestjs/common';
-import { RpcException } from '@nestjs/microservices';
-
-@Catch(RpcException)
-export class RpcCustomExceptionsFilter implements ExceptionFilter {
-  catch(exception: RpcException, host: ArgumentsHost) {
-    const ctx = host.switchToHttp();
-    const response = ctx.getResponse();
-
-    // Obtener detalles del error
-    const errorResponse = exception.getError();
- 
-    const status = (errorResponse as any)?.status ?? 500;
-    const message = (errorResponse as any)?.message ?? 'Internal Server Error';
-
-    console.error('🚨 RPC Exception Filter:', JSON.stringify(errorResponse, null, 2));
-
-    // Enviar respuesta HTTP
-    response.status(status).json({
-      statusCode: status,
-      message,
-    });
-  }
-}
diff --git a/launcher/auth-ms/src/commont/cleardata.dto.ts b/launcher/auth-ms/src/commont/cleardata.dto.ts
deleted file mode 100644
index 374978d..0000000
--- a/launcher/auth-ms/src/commont/cleardata.dto.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { IsString } from "class-validator"
-
-export class clear_data {
-    @IsString()
-    id: string
-    @IsString()
-    idUser: string
-}
diff --git a/launcher/auth-ms/src/commont/confirm.data.dto.ts b/launcher/auth-ms/src/commont/confirm.data.dto.ts
deleted file mode 100644
index 1770ebf..0000000
--- a/launcher/auth-ms/src/commont/confirm.data.dto.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-export interface Confirm_data{
-    id:string;
-    userId:string;
-}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/commont/pagination.dto.ts b/launcher/auth-ms/src/commont/pagination.dto.ts
deleted file mode 100644
index 058bee4..0000000
--- a/launcher/auth-ms/src/commont/pagination.dto.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { Type } from "class-transformer";
-import { IsOptional, IsPositive } from "class-validator";
-
-export class PaginationDto {
-    @IsPositive()
-    @IsOptional()
-    @Type(()=>Number)
-    page ?: number = 1;
-
-    @IsPositive()
-    @IsOptional()
-    @Type(()=>Number)
-    limit?: number = 10;
-}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/config/envs.ts b/launcher/auth-ms/src/config/envs.ts
index ac1280d..f43dfca 100644
--- a/launcher/auth-ms/src/config/envs.ts
+++ b/launcher/auth-ms/src/config/envs.ts
@@ -1,31 +1,30 @@
+ 
 import 'dotenv/config';
 import * as joi from 'joi';
-
 interface EnvVars {
-    PORT: number;
-    NATS_SERVERS: string[];
-    JWT_SECRET: string;
+    PORT:number;
+    JWT_SECRET:string;
+    NATS_SERVERS:string[];
 }
 
 const envsShema = joi.object({
     PORT: joi.number().required(),
-    NATS_SERVERS: joi.array().items(joi.string()).required(),
-    JWT_SECRET: joi.string().required()
+    JWT_SECRET:joi.string().required(),
+    NATS_SERVERS:joi.array().items(joi.string()).required()
 }).unknown(true);
 
-const {error, value} = envsShema.validate({
+const {error,value} = envsShema.validate({
     ...process.env,
-    NATS_SERVERS: process.env.NATS_SERVERS?.split(',')  
-});
+    NATS_SERVERS :process.env.NATS_SERVERS?.split(',')  
+}  )
 
 if(error){
-    throw new Error(`Config validation error: ${error.message}`);
+    throw new Error(`Config validation error: ${error.message}`)
 }
-
 const envVars: EnvVars = value;
 
-export const envs = {
+export const  envs ={
     port: envVars.PORT, 
-    natsServers: envVars.NATS_SERVERS,
-    jwtSecret: envVars.JWT_SECRET,
-}
+    natsServers:envVars.NATS_SERVERS,
+    jwtSecret:envVars.JWT_SECRET
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/interfaces/index.ts b/launcher/auth-ms/src/interfaces/index.ts
index 60cbcf6..d49e741 100644
--- a/launcher/auth-ms/src/interfaces/index.ts
+++ b/launcher/auth-ms/src/interfaces/index.ts
@@ -1 +1 @@
-export * from './payload.interface';
+export * from './payload.interface'
\ No newline at end of file
diff --git a/launcher/auth-ms/src/interfaces/payload.interface.ts b/launcher/auth-ms/src/interfaces/payload.interface.ts
index efccd00..8312777 100644
--- a/launcher/auth-ms/src/interfaces/payload.interface.ts
+++ b/launcher/auth-ms/src/interfaces/payload.interface.ts
@@ -1,7 +1,6 @@
-export interface JwtPayload {
-  id: string;
-  email: string;
-  names: string;
-  lastnames: string;
-  role: string;
-}
+export interface JwtPayload{
+    id:string,
+    email:string,
+    names:string,
+    lastnames:string
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/main.ts b/launcher/auth-ms/src/main.ts
index fc5f840..af376b8 100644
--- a/launcher/auth-ms/src/main.ts
+++ b/launcher/auth-ms/src/main.ts
@@ -5,20 +5,18 @@ import { envs } from './config';
 import { ValidationPipe } from '@nestjs/common';
 
 async function bootstrap() {
- const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
-   transport: Transport.NATS,
-   options: {
-     servers: envs.natsServers
-   }
- });
- 
- app.useGlobalPipes(
-   new ValidationPipe({
-     whitelist: true,
-     forbidNonWhitelisted: true
-   })
- );
- 
- await app.listen();
+  const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule,{
+    transport:Transport.NATS,
+    options:{
+      servers:envs.natsServers
+    }
+  });
+  app.useGlobalPipes(
+    new ValidationPipe({
+      whitelist:true,
+      forbidNonWhitelisted:true
+    })
+  )
+  await app.listen();
 }
 bootstrap();
diff --git a/launcher/auth-ms/src/register_professional/controllers/register_professional.controller.ts b/launcher/auth-ms/src/register_professional/controllers/register_professional.controller.ts
new file mode 100644
index 0000000..888fc3b
--- /dev/null
+++ b/launcher/auth-ms/src/register_professional/controllers/register_professional.controller.ts
@@ -0,0 +1,25 @@
+import { Controller } from '@nestjs/common';
+import { RegisterProfessionalService } from '../services/register_professional.service';
+import { MessagePattern, Payload } from '@nestjs/microservices';
+import { CreateUserPartnerPendingDto } from '../dto/create_user_partner_pending.dto';
+import { filtersPendingDto } from '../dto/filters_pendings.dto';
+
+@Controller()
+export class RegisterProfessionalController {
+  constructor(private readonly registerProfessionalService: RegisterProfessionalService) { }
+
+
+  @MessagePattern('auth-ms.register.partner.pending.user')
+  registerUser(@Payload() CreateUserPartnerPendingDto: CreateUserPartnerPendingDto) {
+    return this.registerProfessionalService.register_user_pending(CreateUserPartnerPendingDto)
+  }
+
+  @MessagePattern('auth-ms.get.users.pendings')
+  get_users_pengins(@Payload() filtersPendingDto:filtersPendingDto){
+    return this.registerProfessionalService.get_all_pendinsUsers(filtersPendingDto)
+  }
+  @MessagePattern('auth-ms.aprovate.user.pengins')
+  aprivate_users(@Payload() {id}:{id:string}){
+    return this.registerProfessionalService.aprovate_User(id)
+  }
+}
diff --git a/launcher/auth-ms/src/register_professional/dto/create_user_partner_pending.dto.ts b/launcher/auth-ms/src/register_professional/dto/create_user_partner_pending.dto.ts
new file mode 100644
index 0000000..d0852ce
--- /dev/null
+++ b/launcher/auth-ms/src/register_professional/dto/create_user_partner_pending.dto.ts
@@ -0,0 +1,35 @@
+import { IsEmail, IsString, Matches } from "class-validator";
+
+export class CreateUserPartnerPendingDto {
+
+    @IsString()
+    names: string;
+
+    @IsString()
+    @IsEmail()
+    email: string;
+
+    @IsString()
+    @Matches(/^(?=.*[a-z])(?=.*[A-Z]).{8,}$/, {
+        message: 'La contraseña debe tener al menos 8 caracteres, una letra mayúscula y una letra minúscula',
+    })
+    password: string;
+
+    @IsString()
+    lastnames: string;
+
+    @IsString()
+    phone: string;
+
+
+    @IsString()
+    document: string;
+
+    @IsString()
+    title: string;
+    @IsString()
+    back_side: string
+    @IsString()
+    front_side: string
+
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/register_professional/dto/filters_pendings.dto.ts b/launcher/auth-ms/src/register_professional/dto/filters_pendings.dto.ts
new file mode 100644
index 0000000..bec0921
--- /dev/null
+++ b/launcher/auth-ms/src/register_professional/dto/filters_pendings.dto.ts
@@ -0,0 +1,12 @@
+import { IsIn, IsOptional, IsString } from "class-validator";
+import { PaginationDto } from "src/auth/commont/pagination.dto";
+type StatusType = 'PENDING' | 'ACCEPTED' | 'REJECTED';
+export class filtersPendingDto extends PaginationDto {
+    @IsOptional()
+    
+    @IsIn(['ACCEPTED', 'PENDING', 'REJECTED'], {
+        message: 'el tipo debe ser uno de los siguientes: pendiente, aceptado, rechazado',
+    })
+    type?: StatusType
+
+}
\ No newline at end of file
diff --git a/launcher/auth-ms/src/register_professional/register_professional.module.ts b/launcher/auth-ms/src/register_professional/register_professional.module.ts
new file mode 100644
index 0000000..f0c22a4
--- /dev/null
+++ b/launcher/auth-ms/src/register_professional/register_professional.module.ts
@@ -0,0 +1,11 @@
+import { Module } from '@nestjs/common';
+import { RegisterProfessionalService } from './services/register_professional.service';
+import { RegisterProfessionalController } from './controllers/register_professional.controller';
+import { NatsModule } from 'src/transport/nast.module';
+
+@Module({
+  imports:[NatsModule],
+  controllers: [RegisterProfessionalController],
+  providers: [RegisterProfessionalService],
+})
+export class RegisterProfessionalModule {}
diff --git a/launcher/auth-ms/src/register_professional/services/register_professional.service.ts b/launcher/auth-ms/src/register_professional/services/register_professional.service.ts
new file mode 100644
index 0000000..6fee5a5
--- /dev/null
+++ b/launcher/auth-ms/src/register_professional/services/register_professional.service.ts
@@ -0,0 +1,154 @@
+import { Inject, Injectable, OnModuleInit } from '@nestjs/common';
+import { JwtService } from '@nestjs/jwt';
+import { ClientProxy, RpcException } from '@nestjs/microservices';
+import { PrismaClient } from '@prisma/client';
+import { NATS_SERVICE } from 'src/config';
+import { CreateUserPartnerPendingDto } from '../dto/create_user_partner_pending.dto';
+import * as bcrypt from 'bcrypt';
+import { filtersPendingDto } from '../dto/filters_pendings.dto';
+import { firstValueFrom } from 'rxjs';
+import { RegisterPartnerDto } from 'src/auth/dto';
+@Injectable()
+export class RegisterProfessionalService extends PrismaClient implements OnModuleInit {
+    constructor(private readonly jwtservice: JwtService,
+        @Inject(NATS_SERVICE) private readonly client: ClientProxy,
+    ) {
+        super()
+    }
+    onModuleInit() {
+        this.$connect();
+    }
+    
+
+    async register_user_pending(createpartner: CreateUserPartnerPendingDto) {
+        try {
+            const { back_side, email, front_side, lastnames, names, password, phone, title, document } = createpartner;
+            const check_email = await this.pendingPartner.findFirst({
+                where: {
+                    email
+                }
+            })
+            if (check_email) {
+                throw new RpcException({
+                    status: 401,
+                    message: `Ya existe una cuenta registrada con este correo ${email} `
+                })
+            }
+            const new_partner_pending = await this.pendingPartner.create({
+                data: {
+                    email,
+                    lastnames,
+                    names,
+                    password: bcrypt.hashSync(password, 10),
+                    side_back: back_side,
+                    side_front: front_side,
+                    title,
+                    phone,
+                    document
+                }
+            })
+
+            return {
+                status: 200,
+                data: new_partner_pending
+            }
+
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
+    }
+
+
+    async get_all_pendinsUsers(filters: filtersPendingDto) {
+        try {
+            const { page, limit, type } = filters;
+            const perType = type ?? 'PENDING'
+            const currentPage = page ?? 1;
+            const perPage = limit ?? 10;
+
+            const total = await this.pendingPartner.count({
+                where: {
+                    status: perType
+                }
+            });
+
+            const result = await this.pendingPartner.findMany({
+                skip: (currentPage - 1) * perPage,
+                take: perPage,
+                where: {
+                    status: perType
+                },
+            });
+            return {
+                status: 200,
+                data: result,
+                meta: {
+                    total,
+                    page: currentPage,
+                    lastPage: Math.ceil(total / perPage)
+                }
+            };
+        } catch (error) {
+
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
+    }
+
+    async aprovate_User(id: string) {
+        try {
+            const user = await this.pendingPartner.findUnique({
+                where: {
+                    id,
+                }
+            });
+            if (!user) {
+                throw new RpcException({
+                    status: 401,
+                    message: 'no existe el uruario '
+                })
+            }
+            let send_Data: RegisterPartnerDto = {
+                phone: user.phone,
+                names: user.names,
+                email: user.email,
+                lastnames: user.lastnames,
+                document: user.document,
+                title: user.title,
+                password: user.password
+            };
+
+            const updateuser = await this.pendingPartner.update({
+                where: {
+                    id
+                },
+                data: {
+                    status: 'ACCEPTED'
+                }
+            })
+
+            await firstValueFrom(
+                this.client.send('auth.register.partner', send_Data)
+            );
+     
+            return {
+                status: 200,
+                data: updateuser
+            }
+
+        } catch (error) {
+            throw new RpcException({
+                status: 400,
+                message: error.message
+            })
+        }
+    }
+
+}
+
diff --git a/launcher/auth-ms-broken-backup/src/users/transport/nast.module.ts b/launcher/auth-ms/src/transport/nast.module.ts
similarity index 95%
rename from launcher/auth-ms-broken-backup/src/users/transport/nast.module.ts
rename to launcher/auth-ms/src/transport/nast.module.ts
index eec1626..9c2dc77 100644
--- a/launcher/auth-ms-broken-backup/src/users/transport/nast.module.ts
+++ b/launcher/auth-ms/src/transport/nast.module.ts
@@ -1,8 +1,7 @@
 import { ClientsModule, Transport } from "@nestjs/microservices";
 import { Module } from '@nestjs/common';
-import { envs, NATS_SERVICE } from "src/config";
 
- 
+import { envs, NATS_SERVICE } from "src/config";
 
  
 
diff --git a/launcher/auth-ms/src/transport/nats.module.ts b/launcher/auth-ms/src/transport/nats.module.ts
deleted file mode 100644
index b72c658..0000000
--- a/launcher/auth-ms/src/transport/nats.module.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import { ClientsModule, Transport } from "@nestjs/microservices";
-import { Module } from '@nestjs/common';
-import { envs, NATS_SERVICE } from "src/config";
-
-@Module({
-  imports: [
-    ClientsModule.register([
-      {
-        name: NATS_SERVICE,
-        transport: Transport.NATS,
-        options: {
-          servers: envs.natsServers,
-        },
-      },
-    ]),
-  ],
-  exports: [
-    ClientsModule.register([
-      {
-        name: NATS_SERVICE,
-        transport: Transport.NATS,
-        options: {
-          servers: envs.natsServers,
-        },
-      },
-    ]),
-  ],
-})
-export class NatsModule {}
diff --git a/launcher/auto-fix-patterns.sh b/launcher/auto-fix-patterns.sh
new file mode 100755
index 0000000..4ec3231
--- /dev/null
+++ b/launcher/auto-fix-patterns.sh
@@ -0,0 +1,42 @@
+#!/bin/bash
+
+echo "🔧 Auto-corrección de patrones de mensajes"
+echo "=========================================="
+
+# 1. Buscar el patrón actual en gateway
+echo "1️⃣ Buscando patrón actual en Gateway..."
+current_pattern=$(grep -r "login" gateway/src/auth/ | grep "send" | grep -oP "send\(['\"].*?['\"]" | sed "s/send(['\"]//g" | sed "s/['\"]//g" | head -1)
+
+if [ -z "$current_pattern" ]; then
+    echo "❌ No se encontró el patrón de login en el gateway"
+    echo "Buscando en todos los archivos..."
+    find gateway/src -name "*.ts" -exec grep -H "send.*login" {} \; | head -5
+else
+    echo "Patrón encontrado: '$current_pattern'"
+fi
+
+# 2. Verificar si coincide con auth-ms
+auth_pattern="auth.login.user"
+if [ "$current_pattern" != "$auth_pattern" ]; then
+    echo "⚠️  Los patrones NO coinciden!"
+    echo "   Gateway envía: '$current_pattern'"
+    echo "   Auth-MS espera: '$auth_pattern'"
+    
+    echo -e "\n2️⃣ Opciones de corrección:"
+    echo "   a) Modificar Gateway para usar 'auth.login.user'"
+    echo "   b) Modificar Auth-MS para aceptar '$current_pattern'"
+    
+    # Buscar el archivo exacto del gateway
+    gateway_file=$(find gateway/src -name "*.controller.ts" -exec grep -l "login" {} \; | head -1)
+    if [ -n "$gateway_file" ]; then
+        echo -e "\n📄 Archivo a modificar en Gateway: $gateway_file"
+        echo "   Buscar la línea con: send('...' y cambiar a: send('auth.login.user'"
+    fi
+else
+    echo "✅ Los patrones coinciden!"
+fi
+
+# 3. Reiniciar servicios después de cambios
+echo -e "\n3️⃣ Para aplicar cambios:"
+echo "   docker compose restart auth-ms gateway"
+
diff --git a/launcher/check-auth-service.sh b/launcher/check-auth-service.sh
new file mode 100755
index 0000000..0e65501
--- /dev/null
+++ b/launcher/check-auth-service.sh
@@ -0,0 +1,26 @@
+#!/bin/bash
+
+echo "🔍 Buscando implementación de LoginUser en auth-ms"
+echo "================================================="
+
+# Buscar el método LoginUser
+echo -e "\n1️⃣ Buscando método LoginUser:"
+if [ -f "auth-ms/src/auth/auth.service.ts" ]; then
+    grep -n "LoginUser" auth-ms/src/auth/auth.service.ts || echo "❌ No se encontró LoginUser"
+    
+    # Buscar variaciones
+    echo -e "\n2️⃣ Buscando variaciones del método:"
+    grep -n -i "login" auth-ms/src/auth/auth.service.ts | head -10
+else
+    echo "❌ No se encontró auth.service.ts"
+    find auth-ms/src -name "*.service.ts" -exec echo "Archivo: {}" \; -exec grep -l "login" {} \;
+fi
+
+# Ver imports
+echo -e "\n3️⃣ Verificando imports en auth.controller.ts:"
+head -20 auth-ms/src/auth/auth.controller.ts | grep import
+
+# Ver la declaración del servicio
+echo -e "\n4️⃣ Verificando inyección del servicio:"
+grep -A 5 "constructor" auth-ms/src/auth/auth.controller.ts
+
diff --git a/launcher/create-test-specialists.sh b/launcher/create-test-specialists.sh
deleted file mode 100755
index e9242de..0000000
--- a/launcher/create-test-specialists.sh
+++ /dev/null
@@ -1,133 +0,0 @@
-#!/bin/bash
-echo "Creating test specialists..."
-
-cd launcher
-
-# Especialista 1: CON PLAN ACTIVO
-echo "1. Creating specialist WITH active plan..."
-timestamp=$(date +%s)
-email1="specialist1_${timestamp}@docvisual.com"
-
-# Registrar especialista
-register1=$(curl -s -w "\nSTATUS:%{http_code}" \
-  -X POST http://localhost:3000/auth/registerpartner \
-  -H "Content-Type: application/json" \
-  -d "{
-    \"email\": \"$email1\",
-    \"password\": \"Test1234\",
-    \"names\": \"Dr. Juan\",
-    \"lastnames\": \"Pérez\",
-    \"document\": \"12345678\",
-    \"phone\": \"3001234567\",
-    \"title\": \"Oftalmólogo\"
-  }")
-
-user1_id=$(echo "$register1" | grep -v "STATUS:" | sed 's/.*"id":"\([^"]*\)".*/\1/')
-
-if [[ "$register1" == *"STATUS:201"* ]] || [[ "$register1" == *"STATUS:200"* ]]; then
-  echo "✅ Specialist 1 created: $email1"
-  
-  # Crear suscripción activa (30 días)
-  end_date=$(date -d "+30 days" -u +"%Y-%m-%dT%H:%M:%S.000Z")
-  
-  docker compose exec postgresdb psql -U docvisualadmin -d maindb -c "
-  INSERT INTO auth_shema.subscriptions (id, \"userId\", \"planType\", status, \"endDate\", amount, \"paymentId\")
-  VALUES (
-    gen_random_uuid(),
-    '$user1_id',
-    'STANDARD',
-    'ACTIVE',
-    '$end_date',
-    214200,
-    'test_payment_active'
-  );"
-  
-  echo "✅ Active subscription created for specialist 1"
-else
-  echo "❌ Failed to create specialist 1"
-fi
-
-# Especialista 2: SIN PLAN
-echo -e "\n2. Creating specialist WITHOUT plan..."
-email2="specialist2_${timestamp}@docvisual.com"
-
-register2=$(curl -s -w "\nSTATUS:%{http_code}" \
-  -X POST http://localhost:3000/auth/registerpartner \
-  -H "Content-Type: application/json" \
-  -d "{
-    \"email\": \"$email2\",
-    \"password\": \"Test1234\",
-    \"names\": \"Dra. María\",
-    \"lastnames\": \"González\",
-    \"document\": \"87654321\",
-    \"phone\": \"3007654321\",
-    \"title\": \"Optómetra\"
-  }")
-
-if [[ "$register2" == *"STATUS:201"* ]] || [[ "$register2" == *"STATUS:200"* ]]; then
-  echo "✅ Specialist 2 created (NO PLAN): $email2"
-else
-  echo "❌ Failed to create specialist 2"
-fi
-
-# Especialista 3: CON PLAN VENCIDO
-echo -e "\n3. Creating specialist WITH EXPIRED plan..."
-email3="specialist3_${timestamp}@docvisual.com"
-
-register3=$(curl -s -w "\nSTATUS:%{http_code}" \
-  -X POST http://localhost:3000/auth/registerpartner \
-  -H "Content-Type: application/json" \
-  -d "{
-    \"email\": \"$email3\",
-    \"password\": \"Test1234\",
-    \"names\": \"Dr. Carlos\",
-    \"lastnames\": \"Rodríguez\",
-    \"document\": \"11223344\",
-    \"phone\": \"3009876543\",
-    \"title\": \"Oftalmólogo Pediatra\"
-  }")
-
-user3_id=$(echo "$register3" | grep -v "STATUS:" | sed 's/.*"id":"\([^"]*\)".*/\1/')
-
-if [[ "$register3" == *"STATUS:201"* ]] || [[ "$register3" == *"STATUS:200"* ]]; then
-  echo "✅ Specialist 3 created: $email3"
-  
-  # Crear suscripción vencida (hace 10 días)
-  expired_date=$(date -d "-10 days" -u +"%Y-%m-%dT%H:%M:%S.000Z")
-  
-  docker compose exec postgresdb psql -U docvisualadmin -d maindb -c "
-  INSERT INTO auth_shema.subscriptions (id, \"userId\", \"planType\", status, \"endDate\", amount, \"paymentId\")
-  VALUES (
-    gen_random_uuid(),
-    '$user3_id',
-    'BASIC',
-    'EXPIRED',
-    '$expired_date',
-    178500,
-    'test_payment_expired'
-  );"
-  
-  echo "✅ Expired subscription created for specialist 3"
-else
-  echo "❌ Failed to create specialist 3"
-fi
-
-echo -e "\n📋 TEST SPECIALISTS SUMMARY:"
-echo "================================"
-echo "1. WITH ACTIVE PLAN:"
-echo "   📧 Email: $email1"
-echo "   🔑 Password: Test1234"
-echo "   📋 Plan: STANDARD (Active for 30 days)"
-echo ""
-echo "2. WITHOUT PLAN:"
-echo "   📧 Email: $email2"
-echo "   🔑 Password: Test1234"
-echo "   📋 Plan: None"
-echo ""
-echo "3. WITH EXPIRED PLAN:"
-echo "   📧 Email: $email3"
-echo "   🔑 Password: Test1234"
-echo "   📋 Plan: BASIC (Expired 10 days ago)"
-echo ""
-echo "🌐 Test URL: http://localhost:8080"
-echo "Use these credentials to test the subscription restrictions!"
diff --git a/launcher/debug-auth-service.sh b/launcher/debug-auth-service.sh
new file mode 100755
index 0000000..9e23d01
--- /dev/null
+++ b/launcher/debug-auth-service.sh
@@ -0,0 +1,44 @@
+#!/bin/bash
+
+echo "🐛 Debug del servicio de autenticación"
+echo "======================================"
+
+# 1. Verificar estructura del proyecto auth-ms
+echo "1️⃣ Estructura de auth-ms:"
+tree -L 3 auth-ms/src 2>/dev/null || find auth-ms/src -type f -name "*.ts" | head -20
+
+# 2. Ver el contenido completo del servicio
+echo -e "\n2️⃣ Contenido de auth.service.ts:"
+if [ -f "auth-ms/src/auth/auth.service.ts" ]; then
+    echo "Líneas totales: $(wc -l < auth-ms/src/auth/auth.service.ts)"
+    echo "Métodos encontrados:"
+    grep -n "async \|public \|private " auth-ms/src/auth/auth.service.ts | grep "(" | head -20
+else
+    echo "❌ No se encontró auth.service.ts"
+fi
+
+# 3. Buscar errores de compilación
+echo -e "\n3️⃣ Verificando errores de compilación:"
+docker compose exec auth-ms npm run build 2>&1 | grep -i error | head -10
+
+# 4. Ver logs detallados al intentar login
+echo -e "\n4️⃣ Capturando error detallado:"
+# Limpiar logs
+docker compose logs --tail=0 -f auth-ms > /tmp/auth-debug.log 2>&1 &
+LOG_PID=$!
+
+sleep 2
+
+# Intentar login
+curl -s -X POST http://localhost:3000/auth/login \
+  -H "Content-Type: application/json" \
+  -d '{"email":"test@test.com","password":"Test1234"}' > /dev/null 2>&1
+
+sleep 2
+kill $LOG_PID 2>/dev/null
+
+echo "Errores capturados:"
+grep -i "error\|exception\|undefined\|cannot" /tmp/auth-debug.log | tail -10
+
+rm -f /tmp/auth-debug.log
+
diff --git a/launcher/debug-login-flow.sh b/launcher/debug-login-flow.sh
new file mode 100755
index 0000000..690bcee
--- /dev/null
+++ b/launcher/debug-login-flow.sh
@@ -0,0 +1,90 @@
+#!/bin/bash
+
+echo "🔬 Debug detallado del flujo de login"
+echo "====================================="
+
+# 1. Verificar que el usuario existe
+echo "1️⃣ Verificando usuarios en la base de datos..."
+docker compose exec postgresdb psql -U docvisualadmin -d maindb -t -c "
+SET search_path TO auth_shema;
+SELECT COUNT(*) as total FROM users WHERE email LIKE '%test%';
+" 2>/dev/null | tr -d ' '
+
+# 2. Crear usuario de prueba con contraseña conocida
+echo -e "\n2️⃣ Creando usuario de prueba con hash conocido..."
+timestamp=$(date +%s)
+email="debug${timestamp}@test.com"
+password="Debug1234"
+
+# Registrar usuario
+register=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\",
+    \"names\": \"Debug\",
+    \"lastnames\": \"User\"
+  }")
+
+if echo "$register" | grep -q "token"; then
+    echo "✅ Usuario creado: $email"
+    
+    # 3. Verificar que se guardó en la DB
+    echo -e "\n3️⃣ Verificando en base de datos..."
+    docker compose exec postgresdb psql -U docvisualadmin -d maindb -t -c "
+    SET search_path TO auth_shema;
+    SELECT email, names, role FROM users WHERE email = '$email';
+    " 2>/dev/null
+    
+    # 4. Capturar logs detallados durante el login
+    echo -e "\n4️⃣ Intentando login con logs detallados..."
+    
+    # Iniciar captura de logs
+    docker compose logs --tail=0 -f gateway > /tmp/gateway-debug.log 2>&1 &
+    GATEWAY_PID=$!
+    docker compose logs --tail=0 -f auth-ms > /tmp/auth-debug.log 2>&1 &
+    AUTH_PID=$!
+    
+    sleep 2
+    
+    # Intentar login
+    login=$(curl -s -X POST http://localhost:3000/auth/login \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"$password\"
+      }" \
+      -w "\nSTATUS:%{http_code}")
+    
+    sleep 2
+    
+    # Detener logs
+    kill $GATEWAY_PID $AUTH_PID 2>/dev/null
+    
+    # Analizar resultado
+    status=$(echo "$login" | grep "STATUS:" | cut -d: -f2)
+    body=$(echo "$login" | grep -v "STATUS:")
+    
+    echo "Login status: $status"
+    
+    if [ "$status" != "201" ] && [ "$status" != "200" ]; then
+        echo "❌ Login falló"
+        echo "Respuesta: $body"
+        
+        echo -e "\n📋 Errores en Gateway:"
+        grep -i "error\|exception\|🔴" /tmp/gateway-debug.log | tail -10
+        
+        echo -e "\n📋 Errores en Auth-MS:"
+        grep -i "error\|exception" /tmp/auth-debug.log | tail -10
+    else
+        echo "✅ Login exitoso!"
+        echo "$body" | python3 -m json.tool
+    fi
+else
+    echo "❌ No se pudo crear el usuario"
+    echo "$register"
+fi
+
+# Limpiar
+rm -f /tmp/gateway-debug.log /tmp/auth-debug.log
+
diff --git a/launcher/deep-debug.sh b/launcher/deep-debug.sh
new file mode 100755
index 0000000..bcf5bfe
--- /dev/null
+++ b/launcher/deep-debug.sh
@@ -0,0 +1,89 @@
+#!/bin/bash
+
+echo "🔬 Debug Profundo del Sistema de Login"
+echo "======================================"
+
+# 1. Limpiar logs antiguos
+echo "1️⃣ Limpiando logs antiguos..."
+docker compose logs --tail=0 -f auth-ms > /tmp/auth-ms.log 2>&1 &
+AUTH_LOG_PID=$!
+docker compose logs --tail=0 -f gateway > /tmp/gateway.log 2>&1 &
+GATEWAY_LOG_PID=$!
+
+sleep 2
+
+# 2. Crear usuario de prueba único
+timestamp=$(date +%s)
+email="debug${timestamp}@test.com"
+password="Debug1234"
+
+echo -e "\n2️⃣ Creando usuario de prueba: $email"
+register_response=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\",
+    \"names\": \"Debug\",
+    \"lastnames\": \"User\"
+  }" \
+  -w "\nSTATUS:%{http_code}")
+
+register_status=$(echo "$register_response" | grep "STATUS:" | cut -d: -f2)
+
+if [ "$register_status" = "201" ] || [ "$register_status" = "200" ]; then
+    echo "✅ Usuario registrado exitosamente"
+else
+    echo "❌ Fallo el registro"
+    kill $AUTH_LOG_PID $GATEWAY_LOG_PID 2>/dev/null
+    exit 1
+fi
+
+# 3. Esperar un momento
+sleep 2
+
+# 4. Intentar login
+echo -e "\n3️⃣ Intentando login..."
+login_response=$(curl -s -X POST http://localhost:3000/auth/login \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\"
+  }" \
+  -w "\nSTATUS:%{http_code}")
+
+login_status=$(echo "$login_response" | grep "STATUS:" | cut -d: -f2)
+
+# 5. Detener captura de logs
+kill $AUTH_LOG_PID $GATEWAY_LOG_PID 2>/dev/null
+
+# 6. Analizar resultados
+echo -e "\n4️⃣ Resultados:"
+echo "Login Status: $login_status"
+echo "Login Response: $(echo "$login_response" | grep -v "STATUS:")"
+
+if [ "$login_status" != "201" ] && [ "$login_status" != "200" ]; then
+    echo -e "\n❌ Login falló. Analizando logs..."
+    
+    echo -e "\n📋 Errores en Auth-MS:"
+    grep -i "error\|exception\|failed" /tmp/auth-ms.log | tail -10
+    
+    echo -e "\n📋 Errores en Gateway:"
+    grep -i "error\|exception\|failed\|500" /tmp/gateway.log | tail -10
+    
+    echo -e "\n📋 Últimas líneas de Auth-MS:"
+    tail -20 /tmp/auth-ms.log
+else
+    echo "✅ Login exitoso!"
+fi
+
+# 7. Limpiar archivos temporales
+rm -f /tmp/auth-ms.log /tmp/gateway.log
+
+echo -e "\n5️⃣ Verificando comunicación NATS..."
+curl -s http://localhost:8222/connz | python3 -c "
+import sys, json
+data = json.load(sys.stdin)
+print(f\"Conexiones NATS: {len(data.get('connections', []))}\")
+for conn in data.get('connections', [])[:5]:
+    print(f\"  - {conn.get('name', 'unnamed')} desde {conn.get('ip', 'unknown')}\")"
+
diff --git a/launcher/diagnose-login.sh b/launcher/diagnose-login.sh
new file mode 100755
index 0000000..874b8d1
--- /dev/null
+++ b/launcher/diagnose-login.sh
@@ -0,0 +1,59 @@
+#!/bin/bash
+
+echo "🔍 Diagnóstico del Error de Login"
+echo "================================="
+
+# 1. Verificar NATS
+echo -e "\n1️⃣ Verificando NATS..."
+if curl -s http://localhost:8222/varz > /dev/null 2>&1; then
+    connections=$(curl -s http://localhost:8222/connz | python3 -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('connections', [])))" 2>/dev/null)
+    echo "✅ NATS activo con $connections conexiones"
+else
+    echo "❌ NATS no responde"
+fi
+
+# 2. Verificar que auth-ms está conectado a NATS
+echo -e "\n2️⃣ Verificando conexión auth-ms con NATS..."
+docker compose logs auth-ms --tail=20 | grep -i "microservice\|started\|error" | tail -5
+
+# 3. Verificar base de datos
+echo -e "\n3️⃣ Verificando base de datos..."
+docker compose exec postgresdb psql -U docvisualadmin -d maindb -c "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'auth_shema';" 2>/dev/null | grep auth_shema > /dev/null
+if [ $? -eq 0 ]; then
+    echo "✅ Schema auth_shema existe"
+else
+    echo "❌ Schema auth_shema NO existe - ejecutando migraciones..."
+    docker compose exec auth-ms npx prisma migrate deploy
+fi
+
+# 4. Probar comunicación directa con auth-ms
+echo -e "\n4️⃣ Verificando comunicación Gateway -> Auth-MS..."
+docker compose logs gateway --tail=50 | grep -i "auth\|login" | tail -10
+
+# 5. Reiniciar servicios
+echo -e "\n5️⃣ Reiniciando servicios problemáticos..."
+docker compose restart auth-ms
+sleep 5
+docker compose restart gateway
+sleep 5
+
+echo -e "\n6️⃣ Probando login nuevamente..."
+response=$(curl -s -X POST http://localhost:3000/auth/login \
+  -H "Content-Type: application/json" \
+  -d '{"email":"admin@docvisual.com","password":"Admin1234"}' \
+  -w "\nSTATUS:%{http_code}")
+
+status=$(echo "$response" | grep "STATUS:" | cut -d: -f2)
+body=$(echo "$response" | grep -v "STATUS:")
+
+if [ "$status" = "201" ] || [ "$status" = "200" ]; then
+    echo "✅ Login exitoso!"
+    echo "$body" | python3 -m json.tool
+else
+    echo "❌ Login sigue fallando (Status: $status)"
+    echo "Respuesta: $body"
+    
+    echo -e "\n📋 Últimos errores en logs:"
+    docker compose logs auth-ms --tail=10 | grep -i error
+fi
+
diff --git a/launcher/final-fix.sh b/launcher/final-fix.sh
index 5dcde5a..3356c63 100755
--- a/launcher/final-fix.sh
+++ b/launcher/final-fix.sh
@@ -1,461 +1,105 @@
 #!/bin/bash
 
-echo "🔧 Restaurando Auth Service COMPLETO"
-echo "===================================="
+echo "🔧 Aplicación Final de Correcciones"
+echo "==================================="
 
-# Crear el service completo con TODOS los métodos que necesita el controller
-docker compose exec -T auth-ms sh << 'EOF'
-# Backup del service actual
-cp src/auth/auth.service.ts src/auth/auth.service.ts.incomplete-backup
+# 1. Asegurar que todas las referencias están correctas
+echo "1️⃣ Corrigiendo todas las referencias..."
+docker compose exec auth-ms sh << 'SCRIPT'
+# Backup actual
+cp src/auth/auth.service.ts src/auth/auth.service.ts.final-backup
 
-# Crear service COMPLETO con todos los métodos
-cat > src/auth/auth.service.ts << 'COMPLETE_SERVICE'
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient } from '@prisma/client';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
-import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
+# Corregir absolutamente TODO
+sed -i 's/this\.User/this.user/g' src/auth/auth.service.ts
+sed -i 's/this\.Users/this.user/g' src/auth/auth.service.ts
 
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
+# Verificar
+echo "Referencias con User mayúscula (debe ser 0):"
+grep -c "this\.User" src/auth/auth.service.ts || echo "0"
 
-  async onModuleInit() {
-    await this.$connect();
-    console.log('🔌 AuthService connected to database');
-  }
+echo "Referencias correctas con user minúscula:"
+grep -c "this\.user\." src/auth/auth.service.ts
+SCRIPT
 
-  async singJwt(payload: any) {
-    return this.jwtservice.sign(payload);
-  }
-
-  // 1. MÉTODO EXISTENTE - registerUser
-  async registerUser(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'USER'
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 2. MÉTODO FALTANTE - registerPartner
-  async registerPartner(registerPartnerDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerPartnerDto;
-      
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El partner ya existe'
-        });
-      }
-
-      const newPartner = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'PARTNER'
-        }
-      });
-
-      const { password: _, ...rest } = newPartner;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 3. MÉTODO FALTANTE - CreateSuperAdmin
-  async CreateSuperAdmin(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El super admin ya existe'
-        });
-      }
-
-      const newSuperAdmin = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: 'SUPER_ADMIN'
-        }
-      });
-
-      const { password: _, ...rest } = newSuperAdmin;
-      
-      return {
-        user: rest,
-        token: await this.singJwt(rest),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 4. MÉTODO EXISTENTE - LoginUser
-  async LoginUser(loginUserDto: any) {
-    try {
-      console.log("🔍 LoginUser called");
-      
-      const { email, password } = loginUserDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Usuario no encontrado'
-        });
-      }
-
-      const isPasswordValid = bcrypt.compareSync(password, user.password);
-
-      if (!isPasswordValid) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Credenciales inválidas'
-        });
-      }
-
-      const { password: _, ...rest } = user;
-      const token = await this.singJwt(rest);
-
-      return {
-        user: rest,
-        token,
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 5. MÉTODO EXISTENTE - verifyToken
-  async verifyToken(token: string) {
-    try {
-      const payload = this.jwtservice.verify(token);
-      return { valid: true, user: payload };
-    } catch (error) {
-      return { valid: false, user: null };
-    }
-  }
-
-  // 6. MÉTODO FALTANTE - get_data_basic_user
-  async get_data_basic_user(id: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { id },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          emailVerified: true
-        }
-      });
-      
-      if (!user) {
-        throw new RpcException({
-          statusCode: 404,
-          message: "Usuario no encontrado"
-        });
-      }
-      
-      return {
-        status: 200,
-        data: user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 7. MÉTODO FALTANTE - getInformationUsersAdmin
-  async getInformationUsersAdmin(id: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { id },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          emailVerified: true,
-          createdAt: true,
-          updatedAt: true
-        }
-      });
-      
-      if (!user) {
-        throw new RpcException({
-          statusCode: 404,
-          message: "Usuario no encontrado"
-        });
-      }
-      
-      return {
-        status: 200,
-        data: user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 8. MÉTODO FALTANTE - getAllUsersPartners
-  async getAllUsersPartners(PaginationDto: any) {
-    try {
-      const { page = 1, limit = 10 } = PaginationDto;
-      const currentPage = Math.max(1, Number(page));
-      const perPage = Math.max(1, Math.min(100, Number(limit)));
-      const offset = (currentPage - 1) * perPage;
-      
-      const users = await this.user.findMany({
-        where: { role: "PARTNER" },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          emailVerified: true,
-          createdAt: true,
-          updatedAt: true
-        },
-        skip: offset,
-        take: perPage,
-        orderBy: { createdAt: "desc" }
-      });
-      
-      const total = await this.user.count({
-        where: { role: "PARTNER" }
-      });
-      
-      const totalPages = Math.ceil(total / perPage);
-      
-      return {
-        status: 200,
-        data: users,
-        meta: { total, page: currentPage, limit: perPage, totalPages }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 9. MÉTODO FALTANTE - getAllUsers
-  async getAllUsers(PaginationDto: any) {
-    try {
-      const { page = 1, limit = 10 } = PaginationDto;
-      const currentPage = Math.max(1, Number(page));
-      const perPage = Math.max(1, Math.min(100, Number(limit)));
-      const offset = (currentPage - 1) * perPage;
-      
-      const users = await this.user.findMany({
-        where: { role: "USER" },
-        select: {
-          id: true,
-          email: true,
-          names: true,
-          lastnames: true,
-          role: true,
-          emailVerified: true,
-          createdAt: true,
-          updatedAt: true
-        },
-        skip: offset,
-        take: perPage,
-        orderBy: { createdAt: "desc" }
-      });
-      
-      const total = await this.user.count({
-        where: { role: "USER" }
-      });
-      
-      const totalPages = Math.ceil(total / perPage);
-      
-      return {
-        status: 200,
-        data: users,
-        meta: { total, page: currentPage, limit: perPage, totalPages }
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // 10. MÉTODO EXISTENTE - verifyUserEmail
-  async verifyUserEmail(email: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-      return { data: !!user };
-    } catch (error) {
-      return { data: false };
-    }
-  }
-}
-COMPLETE_SERVICE
-
-echo "✅ Auth Service COMPLETO creado con TODOS los métodos"
-EOF
-
-echo -e "\n🔄 Reiniciando auth-ms..."
+# 2. Reiniciar
+echo -e "\n2️⃣ Reiniciando auth-ms..."
 docker compose restart auth-ms
 
-echo -e "\n⏳ Esperando compilación completa (25 segundos)..."
-sleep 25
-
-echo -e "\n📊 Verificando compilación..."
-compile_result=$(docker compose logs auth-ms --tail=10)
-
-if echo "$compile_result" | grep -q "Found 0 errors"; then
-    echo "✅ ¡COMPILACIÓN EXITOSA! - 0 errores"
+# 3. Esperar compilación
+echo "⏳ Esperando compilación completa (25 segundos)..."
+for i in {1..25}; do
+    echo -n "."
+    sleep 1
+done
+echo ""
+
+# 4. Verificar compilación
+echo -e "\n3️⃣ Verificando compilación..."
+compilation_status=$(docker compose logs auth-ms --tail=5 2>&1)
+if echo "$compilation_status" | grep -q "Found 0 errors"; then
+    echo "✅ Compilación exitosa"
     
-    if echo "$compile_result" | grep -q "successfully started"; then
-        echo "✅ ¡MICROSERVICIO ACTIVO!"
-        
-        echo -e "\n🧪 Probando funcionalidad..."
+    # 5. Verificar que está escuchando
+    if echo "$compilation_status" | grep -q "successfully started"; then
+        echo "✅ Microservicio activo"
+    fi
+    
+    # 6. Crear usuario de prueba
+    echo -e "\n4️⃣ Creando usuario de prueba final..."
+    timestamp=$(date +%s)
+    email="working${timestamp}@test.com"
+    password="Working123"
+    
+    register=$(curl -s -X POST http://localhost:3000/auth/register \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"$password\",
+        \"names\": \"Working\",
+        \"lastnames\": \"User\"
+      }" \
+      -w "\nSTATUS:%{http_code}")
+    
+    reg_status=$(echo "$register" | grep "STATUS:" | cut -d: -f2)
+    
+    if [ "$reg_status" = "201" ] || [ "$reg_status" = "200" ]; then
+        echo "✅ Usuario creado: $email"
         
-        # Crear usuario de prueba
-        timestamp=$(date +%s)
-        test_email="restored${timestamp}@test.com"
-        test_password="Test1234"
+        # 7. Probar login
+        echo -e "\n5️⃣ Probando login final..."
+        sleep 3
         
-        echo "Registrando usuario: $test_email"
-        register_response=$(curl -s -X POST http://localhost:3000/auth/register \
+        login=$(curl -s -X POST http://localhost:3000/auth/login \
           -H "Content-Type: application/json" \
           -d "{
-            \"email\": \"$test_email\",
-            \"password\": \"$test_password\",
-            \"names\": \"Restored\",
-            \"lastnames\": \"User\"
+            \"email\": \"$email\",
+            \"password\": \"$password\"
           }" \
-          -w "\nHTTP:%{http_code}")
+          -w "\nSTATUS:%{http_code}")
         
-        reg_code=$(echo "$register_response" | grep "HTTP:" | cut -d: -f2)
+        login_status=$(echo "$login" | grep "STATUS:" | cut -d: -f2)
+        login_body=$(echo "$login" | grep -v "STATUS:")
         
-        if [ "$reg_code" = "201" ] || [ "$reg_code" = "200" ]; then
-            echo "✅ Registro exitoso"
-            
-            sleep 3
-            echo "Probando login..."
-            
-            login_response=$(curl -s -X POST http://localhost:3000/auth/login \
-              -H "Content-Type: application/json" \
-              -d "{
-                \"email\": \"$test_email\",
-                \"password\": \"$test_password\"
-              }" \
-              -w "\nHTTP:%{http_code}")
-            
-            login_code=$(echo "$login_response" | grep "HTTP:" | cut -d: -f2)
-            
-            if [ "$login_code" = "201" ] || [ "$login_code" = "200" ]; then
-                echo "🎉 ¡¡¡LOGIN FUNCIONA PERFECTAMENTE!!!"
-                echo "=================================="
-                echo "✅ AUTH SERVICE COMPLETAMENTE RESTAURADO"
-                echo "✅ Todos los métodos implementados"
-                echo "✅ Login funcionando"
-                echo "✅ Registro funcionando"
-                echo "✅ Sistema listo para usar"
-                echo "=================================="
-                echo "📧 Email prueba: $test_email"
-                echo "🔑 Password: $test_password"
-                echo "🌐 Frontend: http://localhost:8080"
-            else
-                echo "❌ Login falló (HTTP: $login_code)"
-            fi
+        if [ "$login_status" = "201" ] || [ "$login_status" = "200" ]; then
+            echo "🎉 ¡¡¡LOGIN EXITOSO!!!"
+            echo "================================"
+            echo "$login_body" | python3 -m json.tool
+            echo "================================"
+            echo "✅ SISTEMA 100% FUNCIONAL"
+            echo "📧 Email: $email"
+            echo "🔑 Password: $password"
+            echo "🌐 URL: http://localhost:8080"
+            echo "================================"
         else
-            echo "❌ Registro falló (HTTP: $reg_code)"
+            echo "❌ Login falló"
+            echo "Status: $login_status"
+            echo "Respuesta: $login_body"
         fi
     else
-        echo "⚠️ Microservicio compiló pero no está activo"
-        docker compose logs auth-ms --tail=3
+        echo "❌ Registro falló"
     fi
 else
-    echo "❌ Aún hay errores de compilación:"
-    echo "$compile_result" | grep -i "Found.*errors"
-    echo "$compile_result" | grep -i "error TS" | head -3
-fi
\ No newline at end of file
+    echo "❌ Hay errores de compilación"
+    docker compose logs auth-ms --tail=20 | grep error
+fi
+
diff --git a/launcher/fix-all-auth-errors.sh b/launcher/fix-all-auth-errors.sh
deleted file mode 100755
index 017f7b6..0000000
--- a/launcher/fix-all-auth-errors.sh
+++ /dev/null
@@ -1,371 +0,0 @@
-#!/bin/bash
-
-echo "🔧 Corrección TOTAL de Auth-MS"
-echo "============================="
-
-# Primero, asegurar que el schema.prisma sea correcto
-docker compose exec -T auth-ms sh << 'SCHEMA_EOF'
-cat > prisma/schema.prisma << 'PRISMA_SCHEMA'
-generator client {
-  provider = "prisma-client-js"
-}
-
-datasource db {
-  provider = "postgresql"
-  url      = env("DATABASE_URL")
-}
-
-enum Role {
-  USER
-  USER_PARTNER
-  ADMIN
-  SUPER_ADMIN
-  DELETED_USER
-  DELETED_USER_PARTNER
-  PENDING_DELETE
-  PENDING_PARTNER
-}
-
-model User {
-  id        String @id @default(uuid())
-  email     String @unique
-  names     String
-  lastnames String
-  password  String
-  role      Role?
-  createdAt DateTime @default(now())
-  updatedAt DateTime @updatedAt
-}
-PRISMA_SCHEMA
-
-echo "✅ Schema.prisma actualizado"
-SCHEMA_EOF
-
-# Regenerar cliente Prisma
-echo -e "\n🔄 Regenerando cliente Prisma..."
-docker compose exec auth-ms npx prisma generate
-
-# Crear service SIN errores TypeScript
-docker compose exec -T auth-ms sh << 'SERVICE_EOF'
-cat > src/auth/auth.service.ts << 'CLEAN_SERVICE'
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient, Role } from '@prisma/client';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
-import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
-
-interface JwtPayload {
-  id: string;
-  email: string;
-  names: string;
-  lastnames: string;
-  role: string;
-}
-
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
-
-  async onModuleInit() {
-    await this.$connect();
-    console.log('🔌 AuthService connected to database');
-  }
-
-  async singJwt(payload: JwtPayload) {
-    return this.jwtservice.sign(payload);
-  }
-
-  async registerUser(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.USER
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async registerPartner(registerPartnerDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerPartnerDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El partner ya existe'
-        });
-      }
-
-      const newPartner = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.USER_PARTNER
-        }
-      });
-
-      const { password: _, ...rest } = newPartner;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async CreateSuperAdmin(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const userAdmin = await this.user.findFirst({
-        where: { role: Role.SUPER_ADMIN }
-      });
-
-      if (userAdmin) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Solo puede existir un super admin'
-        });
-      }
-
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.SUPER_ADMIN
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken)
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // *** MÉTODO LOGIN CON VALIDACIÓN REAL DE CONTRASEÑAS ***
-  async LoginUser(loginUserDto: any) {
-    try {
-      console.log("🔍 LoginUser called with:", loginUserDto);
-      
-      const { email, password } = loginUserDto;
-      
-      // Buscar usuario en la base de datos
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      console.log("👤 User found:", user ? `${user.names} (${user.email})` : 'No user found');
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Usuario o contraseña no válida'
-        });
-      }
-
-      // VALIDACIÓN REAL DE CONTRASEÑA
-      console.log("🔐 Verificando contraseña contra base de datos...");
-      const isPasswordValid = bcrypt.compareSync(password, user.password);
-      console.log("🔐 Password válida:", isPasswordValid);
-
-      if (!isPasswordValid) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Correo o contraseña inválidos'
-        });
-      }
-
-      // Preparar datos para el token
-      const { password: _, ...rest } = user;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role
-      };
-
-      console.log("✅ Credenciales válidas, generando token JWT...");
-      const token = await this.singJwt(userForToken);
-
-      return {
-        user: rest,
-        token
-      };
-    } catch (error) {
-      console.error("❌ Error en LoginUser:", error.message);
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async verifyToken(token: string) {
-    try {
-      const decoded = this.jwtservice.verify(token);
-      return {
-        user: decoded,
-        token: await this.singJwt(decoded),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 401,
-        message: 'Invalid token'
-      });
-    }
-  }
-
-  async verifyUserEmail(email: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { email },
-        select: { id: true, email: true, names: true, lastnames: true }
-      });
-      return {
-        status: 200,
-        data: !!user
-      };
-    } catch (error) {
-      return {
-        status: 500,
-        data: false
-      };
-    }
-  }
-
-  async get_data_basic_user(id: string) {
-    try {
-      const user = await this.user.findFirst({
-        where: { id },
-        select: { names: true, lastnames: true, email: true }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 401,
-          message: 'No existe el usuario'
-        });
-      }
-
-      return {
-        status: 200,
-        data: user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 500,
-        message: error.message
-      });
-    }
-  }
-}
-CLEAN_SERVICE
-
-echo "✅ AuthService restaurado completamente"
-SERVICE_EOF
-
-# Reiniciar servicios
-echo -e "\n🔄 Reiniciando todos los servicios..."
-docker compose restart auth-ms gateway
-
-# Esperar estabilización
-echo "⏳ Esperando estabilización (20 segundos)..."
-sleep 20
-
-# Verificar estado final
-echo -e "\n📊 Estado final:"
-docker compose logs auth-ms --tail=5
-
-echo -e "\n🎯 RESUMEN:"
-echo "✅ AuthService restaurado con VALIDACIÓN REAL"
-echo "✅ Login verifica contraseñas contra base de datos"
-echo "✅ Ya NO acepta cualquier contraseña"
-echo "✅ Genera tokens JWT correctos"
-echo ""
-echo "🧪 Prueba ahora el login con credenciales reales"
\ No newline at end of file
diff --git a/launcher/fix-auth.sh b/launcher/fix-auth.sh
new file mode 100755
index 0000000..0fe93a3
--- /dev/null
+++ b/launcher/fix-auth.sh
@@ -0,0 +1,74 @@
+#!/bin/bash
+
+echo "🔧 Reparando sistema de autenticación..."
+echo "======================================"
+
+# 1. Reiniciar solo los servicios necesarios
+echo "1️⃣ Reiniciando servicios en orden..."
+docker compose restart postgresdb
+sleep 10
+
+docker compose restart nats
+sleep 5
+
+docker compose restart auth-ms user-ms
+sleep 10
+
+docker compose restart gateway
+sleep 5
+
+# 2. Verificar servicios
+echo -e "\n2️⃣ Verificando servicios..."
+services=("postgresdb" "nats" "auth-ms" "user-ms" "gateway")
+for service in "${services[@]}"; do
+    if docker compose ps | grep -q "$service.*Up"; then
+        echo "✅ $service está corriendo"
+    else
+        echo "❌ $service NO está corriendo"
+        docker compose up -d $service
+    fi
+done
+
+# 3. Crear un usuario nuevo de prueba
+echo -e "\n3️⃣ Creando usuario de prueba..."
+timestamp=$(date +%s)
+email="test${timestamp}@docvisual.com"
+
+register=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"Test1234\",
+    \"names\": \"Test\",
+    \"lastnames\": \"User\"
+  }" \
+  -w "\nSTATUS:%{http_code}")
+
+status=$(echo "$register" | grep "STATUS:" | cut -d: -f2)
+if [ "$status" = "201" ] || [ "$status" = "200" ]; then
+    echo "✅ Usuario creado: $email"
+    
+    # Intentar login
+    echo -e "\n4️⃣ Probando login..."
+    login=$(curl -s -X POST http://localhost:3000/auth/login \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"Test1234\"
+      }")
+    
+    if echo "$login" | grep -q "token"; then
+        echo "✅ Login exitoso!"
+        echo -e "\n📧 Credenciales funcionando:"
+        echo "   Email: $email"
+        echo "   Password: Test1234"
+        echo -e "\n🌐 Usa estas credenciales en: http://localhost:8080"
+    else
+        echo "❌ Login falló"
+        echo "$login"
+    fi
+else
+    echo "❌ No se pudo crear el usuario"
+    echo "$register"
+fi
+
diff --git a/launcher/fix-message-patterns.sh b/launcher/fix-message-patterns.sh
new file mode 100755
index 0000000..7d8b9cd
--- /dev/null
+++ b/launcher/fix-message-patterns.sh
@@ -0,0 +1,31 @@
+#!/bin/bash
+
+echo "🔍 Verificando patrones de mensajes entre Gateway y Auth-MS"
+echo "=========================================================="
+
+# 1. Buscar patrones en auth-ms
+echo -e "\n1️⃣ Patrones en Auth-MS:"
+echo "Archivo: auth-ms/src/auth/auth.controller.ts"
+grep "@MessagePattern" auth-ms/src/auth/auth.controller.ts | grep -v "//" | sed 's/.*MessagePattern/Pattern:/'
+
+# 2. Buscar cómo se envían desde gateway
+echo -e "\n2️⃣ Mensajes enviados desde Gateway:"
+echo "Archivo: gateway/src/auth/auth.controller.ts"
+
+# Buscar el archivo del gateway
+if [ -f "gateway/src/auth/auth.controller.ts" ]; then
+    grep -A 5 "login" gateway/src/auth/auth.controller.ts | grep "send\|emit"
+else
+    echo "Buscando en otros archivos..."
+    find gateway/src -name "*.ts" -exec grep -l "login" {} \; | while read file; do
+        echo "  Archivo: $file"
+        grep -A 3 -B 3 "login" "$file" | grep "send\|emit" | head -5
+    done
+fi
+
+# 3. Mostrar el contenido del controlador del gateway
+echo -e "\n3️⃣ Contenido del endpoint login en Gateway:"
+if [ -f "gateway/src/auth/auth.controller.ts" ]; then
+    sed -n '/login/,/^  }/p' gateway/src/auth/auth.controller.ts | head -20
+fi
+
diff --git a/launcher/fix-rpc-error.sh b/launcher/fix-rpc-error.sh
new file mode 100755
index 0000000..0ad903d
--- /dev/null
+++ b/launcher/fix-rpc-error.sh
@@ -0,0 +1,40 @@
+#!/bin/bash
+
+echo "🔧 Corrigiendo formato de errores RPC"
+echo "===================================="
+
+# 1. Verificar cómo se está lanzando el error
+echo "1️⃣ Buscando RpcExceptions en auth.service.ts..."
+docker compose exec auth-ms grep -n "throw new RpcException" src/auth/auth.service.ts | head -5
+
+# 2. Corregir el formato de los errores
+echo -e "\n2️⃣ Corrigiendo formato de errores..."
+docker compose exec auth-ms sh << 'SCRIPT'
+# Backup
+cp src/auth/auth.service.ts src/auth/auth.service.ts.rpc-backup
+
+# Corregir el formato de RpcException para usar statusCode numérico
+# Cambiar {status: 400, ...} por {statusCode: 400, ...}
+sed -i 's/status: 400/statusCode: 400/g' src/auth/auth.service.ts
+sed -i 's/status: 401/statusCode: 401/g' src/auth/auth.service.ts
+sed -i 's/status: 404/statusCode: 404/g' src/auth/auth.service.ts
+sed -i 's/status: 500/statusCode: 500/g' src/auth/auth.service.ts
+
+# Si hay algún {status: "error"}, cambiarlo
+sed -i 's/status: "error"/statusCode: 500/g' src/auth/auth.service.ts
+
+echo "Correcciones aplicadas"
+SCRIPT
+
+# 3. Reiniciar
+echo -e "\n3️⃣ Reiniciando auth-ms..."
+docker compose restart auth-ms
+sleep 15
+
+# 4. Probar
+echo -e "\n4️⃣ Probando login..."
+curl -s -X POST http://localhost:3000/auth/login \
+  -H "Content-Type: application/json" \
+  -d '{"email":"test1755454423@docvisual.com","password":"Test1234"}' \
+  -w "\nStatus: %{http_code}\n"
+
diff --git a/launcher/frontend/src/Modules/price/BodyPrice.vue b/launcher/frontend/src/Modules/price/BodyPrice.vue
index a2995e1..eb1714d 100644
--- a/launcher/frontend/src/Modules/price/BodyPrice.vue
+++ b/launcher/frontend/src/Modules/price/BodyPrice.vue
@@ -196,42 +196,25 @@ const goToTerms = () => {
         <!-- SECCIÓN PERSONALIZADO -->
         <div class="w-[90%] mx-auto pb-12">
             <h1 class="mt-10 text-2xl lg:text-3xl font-bold text-[var(--blue-1)] text-center">Personalizado</h1>
+            <h1 class="w-full text-center mt-4">
+                Si alguno de los paquetes no es lo que estás buscando y necesitas algo más personalizado,
+                CONTÁCTANOS al
+                <span>
+                    <a href="https://wa.me/573124967421" target="_blank" rel="noopener noreferrer"
+                        class="text-[var(--blue-1)] hover:underline">
+                        312 4967421
+                    </a>
+                </span>
+            </h1>
             
-            <div class="w-full text-center mt-4 space-y-2">
-                <p class="text-gray-700">
-                    Si alguno de los paquetes no es lo que estás buscando y necesitas algo más personalizado,
-                </p>
-                <p class="text-gray-700">
-                    CONTÁCTANOS al
-                    <span>
-                        <a href="https://wa.me/573124967421" target="_blank" rel="noopener noreferrer"
-                            class="text-[var(--blue-1)] hover:underline font-semibold">
-                            312 4967421
-                        </a>
-                    </span>
-                    y una persona del equipo se pondrá en contacto contigo para
-                </p>
-                <p class="text-gray-700">
-                    poder orientarte y ofrecerte una solución a la medida.
-                </p>
-            </div>
-            
-            <div class="mt-8 text-center">
-                <p class="text-[var(--blue-1)] text-sm font-medium">
-                    Consulta las condiciones de los planes DOCVISUAL.
-                </p>
-                <p class="text-[var(--blue-1)] text-sm font-medium mt-1">
-                    Contrato mínimo 3 meses para lograr resultados.
-                </p>
-            </div>
+            <h1 class="text-center">
+                y una persona del equipo se pondrá en contacto contigo para
+                poder orientarte y ofrecerte una solución a la medida.
+            </h1>
             
-            <!-- Logo ICÓNICA Partner -->
-            <div class="w-full flex justify-center mt-10">
-                <div class="flex items-center space-x-3">
-                    <span class="text-gray-600 font-medium text-lg">Partner</span>
-                    <img class="h-12 w-auto object-contain" src="@/assets/images/IconicaPartner.webp" alt="ICÓNICA" />
-                </div>
-            </div>
+            <h1 class="w-full text-center mt-10 text-[var(--blue-1)] cursor-pointer hover:underline" @click="goToTerms">
+                Consulta las condiciones de los planes DOCVISUAL
+            </h1>
         </div>
     </div>
 </template>
\ No newline at end of file
diff --git a/launcher/frontend/src/Modules/services/BodyService.vue b/launcher/frontend/src/Modules/services/BodyService.vue
index 32762e6..100d276 100644
--- a/launcher/frontend/src/Modules/services/BodyService.vue
+++ b/launcher/frontend/src/Modules/services/BodyService.vue
@@ -158,43 +158,30 @@ const goToTerms = () => {
         
         <!-- SECCIÓN PERSONALIZADO -->
         <div class="w-[90%] mx-auto pb-12">
-            <h1 class="mt-10 text-2xl lg:text-3xl font-bold text-[var(--blue-1)] text-center">Personalizado</h1>
+            <h1 class="text-center mt-10 text-2xl lg:text-3xl font-bold text-[var(--blue-1)]">Personalizado</h1>
+            <h1 class="w-full text-center mt-4">
+                Si alguno de los paquetes no es lo que estás buscando y necesitas algo más personalizado,
+                CONTÁCTANOS al
+                <span>
+                    <a href="https://wa.me/573124967421" target="_blank" rel="noopener noreferrer"
+                        class="text-[var(--blue-3)] hover:underline">
+                        312 4967421
+                    </a>
+                </span>
+            </h1>
             
-            <div class="w-full text-center mt-4 space-y-2">
-                <p class="text-gray-700">
-                    Si alguno de los paquetes no es lo que estás buscando y necesitas algo más personalizado,
-                </p>
-                <p class="text-gray-700">
-                    CONTÁCTANOS al
-                    <span>
-                        <a href="https://wa.me/573124967421" target="_blank" rel="noopener noreferrer"
-                            class="text-[var(--blue-1)] hover:underline font-semibold">
-                            312 4967421
-                        </a>
-                    </span>
-                    y una persona del equipo se pondrá en contacto contigo para
-                </p>
-                <p class="text-gray-700">
-                    poder orientarte y ofrecerte una solución a la medida.
-                </p>
-            </div>
+            <h1 class="text-center mt-2">
+                y una persona del equipo se pondrá en contacto contigo para
+                poder orientarte y ofrecerte una solución a la medida.
+            </h1>
             
-            <div class="mt-8 text-center">
-                <p class="text-[var(--blue-1)] text-sm font-medium">
-                    Consulta las condiciones de los planes DOCVISUAL.
-                </p>
-                <p class="text-[var(--blue-1)] text-sm font-medium mt-1">
-                    Contrato mínimo 3 meses para lograr resultados.
-                </p>
+            <div class="origin-center mt-10 text-[var(--blue-1)]">
+                <h1 class="w-full text-center">Contrato mínimo 3 meses para lograr resultados.</h1>
             </div>
             
-            <!-- Logo ICÓNICA Partner -->
-            <div class="w-full flex justify-center mt-10">
-                <div class="flex items-center space-x-3">
-                    <span class="text-gray-600 font-medium text-lg">Partner</span>
-                    <img class="h-12 w-auto object-contain" src="@/assets/images/IconicaPartner.webp" alt="ICÓNICA" />
-                </div>
-            </div>
+            <h1 class="w-full text-center mt-10 text-[var(--blue-1)] cursor-pointer hover:underline" @click="goToTerms">
+                Consulta las condiciones de los planes DOCVISUAL
+            </h1>
         </div>
     </div>
 </template>
\ No newline at end of file
diff --git a/launcher/frontend/src/components/EpaycoComponent.vue b/launcher/frontend/src/components/EpaycoComponent.vue
index 6173d52..cf28e24 100644
--- a/launcher/frontend/src/components/EpaycoComponent.vue
+++ b/launcher/frontend/src/components/EpaycoComponent.vue
@@ -1,132 +1,27 @@
+<!-- EpaycoButton.vue -->
 <template>
   <div :id="containerId"></div>
 </template>
 
 <script setup lang="ts">
-import { onMounted, watch, ref, onUnmounted } from 'vue';
-import { useSubscriptionStore } from '@/store/subscription.store';
-import { useAuthStore } from '@/store/auth.store';
-import { toast } from 'vue3-toastify';
+import { onMounted, watch, ref } from 'vue';
 
 const props = defineProps<{
   amount: string;
   name: string;
   description: string;
-  planType?: string; // Agregar esta prop para el tipo de plan
 }>();
 
-const subscriptionStore = useSubscriptionStore();
-const authStore = useAuthStore();
-
 // ID único para evitar conflictos si hay varios botones en pantalla
 const containerId = `epayco-button-${Math.random().toString(36).substring(2, 10)}`;
 
-// Función para manejar el éxito del pago
-const handlePaymentSuccess = async (response: any) => {
-  try {
-    console.log('Payment Success Response:', response);
-    
-    // Solo crear suscripción si es un especialista y tiene planType
-    if (props.planType && authStore.user?.role === 'USER_PARTNER') {
-      
-      // Mostrar loading mientras se procesa
-      toast.info('Procesando su suscripción...', {
-        position: 'top-right',
-        autoClose: 5000,
-      });
-
-      // Determinar los meses según el plan
-      let months = 1; // Por defecto 1 mes
-      
-      // Puedes ajustar esto según tus reglas de negocio
-      switch (props.planType.toUpperCase()) {
-        case 'BASIC':
-          months = 1;
-          break;
-        case 'STANDARD':
-          months = 1;
-          break;
-        case 'PREMIUM':
-          months = 1;
-          break;
-        default:
-          months = 1;
-      }
-
-      // Crear la suscripción
-      await subscriptionStore.createSubscription({
-        planType: props.planType.toUpperCase(),
-        months: months,
-        amount: parseFloat(props.amount),
-        paymentId: response.transactionId || response.ref_payco || response.x_ref_payco
-      });
-
-      toast.success('¡Suscripción creada exitosamente!', {
-        position: 'top-right',
-        autoClose: 5000,
-      });
-
-      // Opcional: redirigir al panel del usuario después de un delay
-      setTimeout(() => {
-        window.location.href = '/paneluser';
-      }, 2000);
-
-    } else {
-      // Para pagos que no son suscripciones (servicios, etc.)
-      toast.success('¡Pago procesado exitosamente!', {
-        position: 'top-right',
-        autoClose: 3000,
-      });
-    }
-  } catch (error: any) {
-    console.error('Error creando suscripción:', error);
-    toast.error(`Error al procesar la suscripción: ${error.message || 'Error desconocido'}`, {
-      position: 'top-right',
-      autoClose: 8000,
-    });
-  }
-};
-
-// Función para manejar errores de pago
-const handlePaymentError = (error: any) => {
-  console.error('Payment Error:', error);
-  toast.error('Error en el procesamiento del pago. Por favor intente nuevamente.', {
-    position: 'top-right',
-    autoClose: 5000,
-  });
-};
-
-// Función para manejar pagos pendientes
-const handlePaymentPending = (response: any) => {
-  console.log('Payment Pending:', response);
-  toast.warning('Su pago está pendiente de confirmación. Recibirá una notificación cuando se complete.', {
-    position: 'top-right',
-    autoClose: 8000,
-  });
-};
+onMounted(() => {
+  insertEpaycoButton();
+});
 
-// Listener para eventos de ePayco
-const handleEPaycoResponse = (event: MessageEvent) => {
-  if (event.origin !== window.location.origin) return;
-  
-  const data = event.data;
-  
-  if (data && typeof data === 'object') {
-    switch (data.type) {
-      case 'epayco-payment-success':
-        handlePaymentSuccess(data);
-        break;
-      case 'epayco-payment-error':
-        handlePaymentError(data);
-        break;
-      case 'epayco-payment-pending':
-        handlePaymentPending(data);
-        break;
-      default:
-        console.log('Unhandled ePayco event:', data);
-    }
-  }
-};
+watch(() => [props.amount, props.name, props.description], () => {
+  insertEpaycoButton();
+});
 
 function insertEpaycoButton() {
   const container = document.getElementById(containerId);
@@ -152,64 +47,6 @@ function insertEpaycoButton() {
   script.setAttribute('data-epayco-confirmation', 'https://www.docvisual.co/confirmacion');
   script.setAttribute('data-epayco-button', 'https://multimedia.epayco.co/dashboard/btns/btn5.png');
 
-  // Agregar información adicional si es una suscripción
-  if (props.planType) {
-    script.setAttribute('data-epayco-extra1', `plan_type_${props.planType}`);
-    script.setAttribute('data-epayco-extra2', `user_id_${authStore.user?.id || ''}`);
-  }
-
   container.appendChild(script);
 }
-
-onMounted(() => {
-  insertEpaycoButton();
-  
-  // Agregar listener para eventos de ePayco
-  window.addEventListener('message', handleEPaycoResponse);
-  
-  // También escuchar eventos personalizados de ePayco si los usan
-  window.addEventListener('epayco-payment-success', (event: any) => {
-    handlePaymentSuccess(event.detail);
-  });
-  
-  window.addEventListener('epayco-payment-error', (event: any) => {
-    handlePaymentError(event.detail);
-  });
-  
-  window.addEventListener('epayco-payment-pending', (event: any) => {
-    handlePaymentPending(event.detail);
-  });
-});
-
-onUnmounted(() => {
-  // Limpiar listeners al desmontar el componente
-  window.removeEventListener('message', handleEPaycoResponse);
-  window.removeEventListener('epayco-payment-success', handlePaymentSuccess as any);
-  window.removeEventListener('epayco-payment-error', handlePaymentError as any);
-  window.removeEventListener('epayco-payment-pending', handlePaymentPending as any);
-});
-
-watch(() => [props.amount, props.name, props.description, props.planType], () => {
-  insertEpaycoButton();
-});
 </script>
-
-<style scoped>
-/* Estilos para el contenedor del botón de ePayco */
-#epayco-button {
-  display: flex;
-  justify-content: center;
-  align-items: center;
-}
-
-/* Personalizar el botón de ePayco si es necesario */
-:deep(.epayco-button) {
-  width: 100%;
-  max-width: 200px;
-  transition: transform 0.2s ease;
-}
-
-:deep(.epayco-button:hover) {
-  transform: scale(1.05);
-}
-</style>
\ No newline at end of file
diff --git a/launcher/frontend/src/components/SubscriptionModal.vue b/launcher/frontend/src/components/SubscriptionModal.vue
deleted file mode 100644
index d182b3b..0000000
--- a/launcher/frontend/src/components/SubscriptionModal.vue
+++ /dev/null
@@ -1,75 +0,0 @@
-<template>
-  <div 
-    v-if="show" 
-    class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
-    @click.self="closeModal"
-  >
-    <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 relative">
-      <button 
-        @click="closeModal"
-        class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 text-xl"
-      >
-        &times;
-      </button>
-      
-      <div class="text-center">
-        <div class="mb-6">
-          <svg class="mx-auto h-12 w-12 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
-            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-2.186-.833-2.956 0L3.857 16.5c-.77.833.192 2.5 1.732 2.5z" />
-          </svg>
-        </div>
-        
-        <h3 class="text-lg font-medium text-gray-900 mb-4">
-          {{ title }}
-        </h3>
-        
-        <p class="text-sm text-gray-500 mb-6">
-          {{ message }}
-        </p>
-        
-        <div class="space-y-3">
-          <button
-            @click="goToPlans"
-            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition duration-200"
-          >
-            {{ buttonText }}
-          </button>
-          
-          <button
-            @click="closeModal"
-            class="w-full bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium py-2 px-4 rounded-lg transition duration-200"
-          >
-            Cancelar
-          </button>
-        </div>
-      </div>
-    </div>
-  </div>
-</template>
-
-<script setup lang="ts">
-import { useRouter } from 'vue-router';
-
-interface Props {
-  show: boolean;
-  title: string;
-  message: string;
-  buttonText: string;
-}
-
-const props = defineProps<Props>();
-const emit = defineEmits<{
-  (e: 'close'): void;
-}>();
-
-const router = useRouter();
-
-const closeModal = () => {
-  emit('close');
-};
-
-const goToPlans = () => {
-  router.push('/planes');
-  closeModal();
-};
-</script>
\ No newline at end of file
diff --git a/launcher/frontend/src/composables/useSubscriptionGuard.ts b/launcher/frontend/src/composables/useSubscriptionGuard.ts
deleted file mode 100644
index e3a7cbd..0000000
--- a/launcher/frontend/src/composables/useSubscriptionGuard.ts
+++ /dev/null
@@ -1,77 +0,0 @@
-import { ref, computed } from 'vue';
-import { useAuthStore } from '@/store/auth.store';
-import { useSubscriptionStore } from '@/store/subscription.store';
-import { useRouter } from 'vue-router';
-
-export function useSubscriptionGuard() {
-  const authStore = useAuthStore();
-  const subscriptionStore = useSubscriptionStore();
-  const router = useRouter();
-  
-  const showModal = ref(false);
-  const modalData = ref({
-    title: '',
-    message: '',
-    buttonText: ''
-  });
-
-  const checkSubscriptionAccess = async () => {
-    const user = authStore.user;
-    
-    // Solo aplicar restricción a especialistas (USER_PARTNER)
-    if (!user || user.role !== 'USER_PARTNER') {
-      return true;
-    }
-
-    try {
-      await subscriptionStore.fetchUserSubscription();
-      
-      // Si no tiene suscripción
-      if (!subscriptionStore.hasSubscription) {
-        modalData.value = {
-          title: 'Adquiere tu Plan',
-          message: 'Usted aún no ha adquirido su plan. Por favor adquiéralo para acceder a todas las funcionalidades.',
-          buttonText: 'Ver Planes'
-        };
-        showModal.value = true;
-        return false;
-      }
-      
-      // Si la suscripción está vencida
-      if (subscriptionStore.isSubscriptionExpired) {
-        modalData.value = {
-          title: 'Plan Vencido',
-          message: 'Su plan se ha vencido. Por favor renueve o cambie de plan para continuar accediendo a las funcionalidades.',
-          buttonText: 'Renovar Plan'
-        };
-        showModal.value = true;
-        return false;
-      }
-      
-      return true;
-    } catch (error) {
-      console.error('Error verificando suscripción:', error);
-      // En caso de error, mostrar modal de plan no adquirido
-      modalData.value = {
-        title: 'Verificación Requerida',
-        message: 'No se pudo verificar su suscripción. Por favor verifique su plan.',
-        buttonText: 'Ver Planes'
-      };
-      showModal.value = true;
-      return false;
-    }
-  };
-
-  const closeModal = () => {
-    showModal.value = false;
-    // Redirigir a home o página anterior
-    router.push('/');
-  };
-
-  return {
-    showModal,
-    modalData,
-    checkSubscriptionAccess,
-    closeModal
-  };
-}
\ No newline at end of file
diff --git a/launcher/frontend/src/router/guards/subscriptionGuard.ts b/launcher/frontend/src/router/guards/subscriptionGuard.ts
deleted file mode 100644
index 6e600f8..0000000
--- a/launcher/frontend/src/router/guards/subscriptionGuard.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import { useAuthStore } from '@/store/auth.store';
-import { useSubscriptionStore } from '@/store/subscription.store';
-import type { NavigationGuardNext, RouteLocationNormalized } from 'vue-router';
-
-export const subscriptionGuard = async (
-  to: RouteLocationNormalized,
-  from: RouteLocationNormalized,
-  next: NavigationGuardNext
-) => {
-  const authStore = useAuthStore();
-  const subscriptionStore = useSubscriptionStore();
-  
-  const user = authStore.user;
-  
-  // Solo aplicar a usuarios USER_PARTNER (especialistas)
-  if (!user || user.role !== 'USER_PARTNER') {
-    return next();
-  }
-
-  try {
-    await subscriptionStore.fetchUserSubscription();
-    
-    // Si no tiene suscripción o está vencida, permitir acceso pero mostrar modal
-    // El modal se mostrará en el componente de la página
-    next();
-  } catch (error) {
-    // En caso de error, permitir acceso pero el modal se mostrará
-    next();
-  }
-};
\ No newline at end of file
diff --git a/launcher/frontend/src/router/index.ts b/launcher/frontend/src/router/index.ts
index 903ff34..5fdffed 100644
--- a/launcher/frontend/src/router/index.ts
+++ b/launcher/frontend/src/router/index.ts
@@ -21,8 +21,6 @@ import Reset_Password from '@/Modules/reset_password/Reset_Password.vue';
 import Confirmation from '@/Modules/confirmation/Confirmation.vue';
 import PanelAdmin from '@/views/panelAdmin/PanelAdmin.vue';
 import Services from '@/views/services/Services.vue';
-import { subscriptionGuard } from './guards/subscriptionGuard';
-
 const route = import.meta.env.BASE_URL || "http://localhost:8080";
 
 const router = createRouter({
@@ -115,8 +113,7 @@ const router = createRouter({
       path: '/paneluser',
       name: 'paneluser',
       component: panel_user_Professional,
-      meta: { requiresAuth: true, requiresPartner: true, requiresSubscription: true },
-      beforeEnter: subscriptionGuard
+      meta: { requiresAuth: true, requiresPartner: true }
     },
     {
       path: '/paneladmin',
diff --git a/launcher/frontend/src/store/auth.store.ts b/launcher/frontend/src/store/auth.store.ts
index 65107b1..bb6796a 100644
--- a/launcher/frontend/src/store/auth.store.ts
+++ b/launcher/frontend/src/store/auth.store.ts
@@ -122,7 +122,7 @@ export const useAuthStore = defineStore('auth', {
         async userAuth(authdto: authdto) {
             try {
                 this.state = http_status.LOADING
-                const response = await axios.post('/auth/register', {
+                const response = await axios.post('/auth/login', {
                     email: authdto.email,
                     password: authdto.password
                 })
diff --git a/launcher/frontend/src/store/subscription.store.ts b/launcher/frontend/src/store/subscription.store.ts
deleted file mode 100644
index 571584a..0000000
--- a/launcher/frontend/src/store/subscription.store.ts
+++ /dev/null
@@ -1,90 +0,0 @@
-import { defineStore } from 'pinia';
-import axios from 'axios';
-
-export interface Subscription {
-  id: string;
-  userId: string;
-  planType: 'BASIC' | 'STANDARD' | 'PREMIUM';
-  status: 'ACTIVE' | 'EXPIRED' | 'SUSPENDED';
-  startDate: string;
-  endDate: string;
-  amount: number;
-}
-
-export const useSubscriptionStore = defineStore('subscription', {
-  state: () => ({
-    subscription: null as Subscription | null,
-    loading: false,
-    error: null as string | null,
-  }),
-
-  getters: {
-    isSubscriptionActive: (state) => {
-      if (!state.subscription) return false;
-      return state.subscription.status === 'ACTIVE' && new Date(state.subscription.endDate) > new Date();
-    },
-    
-    isSubscriptionExpired: (state) => {
-      if (!state.subscription) return true;
-      return state.subscription.status === 'EXPIRED' || new Date(state.subscription.endDate) <= new Date();
-    },
-    
-    hasSubscription: (state) => {
-      return !!state.subscription;
-    }
-  },
-
-  actions: {
-    async fetchUserSubscription() {
-      this.loading = true;
-      this.error = null;
-      
-      try {
-        const response = await axios.get('/subscription');
-        this.subscription = response.data;
-      } catch (error: any) {
-        this.error = error.response?.data?.message || 'Error al cargar suscripción';
-        this.subscription = null;
-      } finally {
-        this.loading = false;
-      }
-    },
-
-    async createSubscription(data: { planType: string; months: number; amount: number; paymentId?: string }) {
-      this.loading = true;
-      this.error = null;
-      
-      try {
-        const response = await axios.post('/subscription/create', data);
-        this.subscription = response.data;
-        return response.data;
-      } catch (error: any) {
-        this.error = error.response?.data?.message || 'Error al crear suscripción';
-        throw error;
-      } finally {
-        this.loading = false;
-      }
-    },
-
-    async renewSubscription(data: { months: number; amount: number; paymentId?: string }) {
-      this.loading = true;
-      this.error = null;
-      
-      try {
-        const response = await axios.post('/subscription/renew', data);
-        this.subscription = response.data;
-        return response.data;
-      } catch (error: any) {
-        this.error = error.response?.data?.message || 'Error al renovar suscripción';
-        throw error;
-      } finally {
-        this.loading = false;
-      }
-    },
-
-    clearSubscription() {
-      this.subscription = null;
-      this.error = null;
-    }
-  }
-});
\ No newline at end of file
diff --git a/launcher/frontend/src/views/Panel_User_Professional/panel_user.vue b/launcher/frontend/src/views/Panel_User_Professional/panel_user.vue
index ff3160a..9faa4de 100644
--- a/launcher/frontend/src/views/Panel_User_Professional/panel_user.vue
+++ b/launcher/frontend/src/views/Panel_User_Professional/panel_user.vue
@@ -1,18 +1,64 @@
+<script setup lang="ts">
+import { ref } from "vue";
+import Swal from "sweetalert2";
+import Navbar_panel from '@/common/Navbar_panel.vue';
+import Panel_user_client_reviews from "@/Modules/Panel_User_Professional/Panel_user_client_reviews.vue";
+import Panel_user_diarie from "@/Modules/Panel_User_Professional/Panel_user_diarie.vue";
+import Panel_user_perfil from "@/Modules/Panel_User_Professional/Panel_user_perfil.vue";
+import Panel_user_notifications from "@/Modules/Panel_User_Professional/notification/Panel_user_notifications.vue";
+import { useAuthStore } from '@/store/auth.store';
+
+// Enum para los paneles
+enum PanelType {
+  CLIENT_REVIEW = "client_review",
+  DIARIE = "diarie",
+  PERFIL = "perfil",
+  NOTIFICATIONS = "notifications"
+}
+
+// Store
+const store = useAuthStore();
+
+// Estado
+const isOpen = ref(true);
+const panelselect = ref<PanelType>(PanelType.PERFIL);
+
+// Funciones
+const toggleSidebar = () => {
+  isOpen.value = !isOpen.value;
+};
+
+const showAlert = () => {
+  Swal.fire({
+    title: "¡Alerta!",
+    text: "¿Estás seguro de cerrar sesión?",
+    icon: "warning",
+    showCancelButton: true,
+    confirmButtonColor: "var(--blue-1)",
+    cancelButtonColor: "#d33",
+    confirmButtonText: "Sí",
+    cancelButtonText: "Cancelar"
+  }).then((result) => {
+    if (result.isConfirmed) {
+      store.close_session();
+    }
+  });
+};
+</script>
+
 <template>
-  <div class="relative">
-    <!-- Contenido normal del panel -->
-    <div :class="{ 'pointer-events-none filter blur-sm': showSubscriptionModal }">
-      <Navbar_panel :onAction="toggleSidebar" :isactive="isOpen" />
-      <div class="flex min-h-[90dvh] font-poppins text-base">
+    <Navbar_panel :onAction="toggleSidebar" :isactive="isOpen" />
+    <div class="flex  min-h-[90ddvh]  font-poppins text-base">
         <!-- Sidebar -->
         <aside :class="{
             'translate-x-0': isOpen,
             '-translate-x-full': !isOpen,
         }"
-            class="bg-white w-[80%] md:w-[20%] min-h-[90dvh] flex flex-col transition-transform duration-300 absolute left-0 bottom-0 z-50">
-            <div class="p-4 flex justify-end items-center bg-[var(--blue-1)]">
+            class="bg-white w-[80%] md:w-[20%]    min-h-[90dvh] flex flex-col transition-transform duration-300 absolute left-0 bottom-0 z-50">
+            <div class="p-4 flex justify-end items-center  bg-[var(--blue-1)]">
+
                 <button @click="toggleSidebar"
-                    class="text-white hover:text-cyan-400 focus:outline-none cursor-pointer">
+                    class="text-white hover:text-cyan-400     focus:outline-none cursor-pointer">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
@@ -25,33 +71,38 @@
                     <li class="animate-fade-in" style="animation-delay: 0.1s;">
                         <a @click="panelselect = PanelType.PERFIL"
                             :style="{ fontWeight: panelselect === PanelType.PERFIL ? 'bold' : 'normal' }"
-                            class="flex items-center p-3 text-white rounded-lg hover:bg-indigo-100 transition-colors duration-300 menu-item-hover cursor-pointer">
+                            class="flex items-center p-3 text-white   rounded-lg hover:bg-indigo-100    transition-colors duration-300 menu-item-hover">
+                            <!-- <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
+              </svg> -->
                             Perfil
                         </a>
                     </li>
                     <li class="animate-fade-in" style="animation-delay: 0.1s;">
                         <a @click="panelselect = PanelType.NOTIFICATIONS"
                             :style="{ fontWeight: panelselect === PanelType.NOTIFICATIONS ? 'bold' : 'normal' }"
-                            class="flex items-center p-3 text-white rounded-lg hover:bg-indigo-100 transition-colors duration-300 menu-item-hover cursor-pointer">
+                            class="flex items-center p-3 text-white  rounded-lg hover:bg-indigo-100    transition-colors duration-300 menu-item-hover">
                             Notificaciones
                         </a>
                     </li>
                     <li class="animate-fade-in" style="animation-delay: 0.1s;">
                         <a @click="panelselect = PanelType.CLIENT_REVIEW"
                             :style="{ fontWeight: panelselect === PanelType.CLIENT_REVIEW ? 'bold' : 'normal' }"
-                            class="flex items-center p-3 text-white rounded-lg hover:bg-indigo-100 transition-colors duration-300 menu-item-hover cursor-pointer">
+                            class="flex items-center p-3 text-white   rounded-lg hover:bg-indigo-100    transition-colors duration-300 menu-item-hover">
                             Valoraciones
                         </a>
                     </li>
-                    <li class="animate-fade-in" style="animation-delay: 0.1s;">
+                    <li class="animate-fade-in" style="animation-delay: 0.1s; ">
                         <a @click="panelselect = PanelType.DIARIE"
                             :style="{ fontWeight: panelselect === PanelType.DIARIE ? 'bold' : 'normal' }"
-                            class="flex items-center p-3 text-white rounded-lg hover:bg-indigo-100 transition-colors duration-300 menu-item-hover cursor-pointer">
+                            class="flex items-center p-3 text-white   rounded-lg hover:bg-indigo-100    transition-colors duration-300 menu-item-hover">
                             Agenda
                         </a>
                     </li>
-                    <li class="animate-fade-in cursor-pointer" style="animation-delay: 0.1s;" @click="showAlert">
-                        <a class="flex items-center p-3 text-white rounded-lg hover:bg-indigo-100 transition-colors duration-300 menu-item-hover">
+                    <li class="animate-fade-in cursor-pointer" style="animation-delay: 0.1s; " @click="showAlert">
+                        <a  
+                            
+                            class="flex items-center p-3 text-white   rounded-lg hover:bg-indigo-100    transition-colors duration-300 menu-item-hover">
                             Cerrar sesión
                         </a>
                     </li>
@@ -60,113 +111,61 @@
         </aside>
 
         <!-- Main Content -->
-        <main class="flex-1 max-h-dvh">
-            <div class="w-full flex justify-end transition-all duration-500">
-                <div :style="{ width: isOpen ? '80%' : '100%' }" 
-                     class="transition-all duration-500">
-                    <Panel_user_perfil v-if="panelselect === PanelType.PERFIL" />
-                    <Panel_user_notifications v-if="panelselect === PanelType.NOTIFICATIONS" />
-                    <Panel_user_client_reviews v-if="panelselect === PanelType.CLIENT_REVIEW" />
-                    <Panel_user_diarie v-if="panelselect === PanelType.DIARIE" />
+        <main class="flex-1  max-h-dvh    ">
+
+            <div class=" w-full  flex justify-end transition-all duration-500  ">
+                <div :style="{ width: isOpen ? '80%' : '100%' }" class="h-20 transition-all duration-500 ">
+
+                    <Panel_user_perfil v-if="panelselect === PanelType.PERFIL" 
+                        class="max-h-[90dvh] min-h-[90dvh] overflow-y-auto bg-gradient-to-r from-gray-50 to-gray-100" />
+                    <Panel_user_diarie v-if="panelselect === PanelType.DIARIE"
+                        class="max-h-[90dvh] min-h-[90dvh]   overflow-y-auto bg-gradient-to-r from-gray-50 to-gray-100" />
+                    <Panel_user_notifications v-if="panelselect === PanelType.NOTIFICATIONS"
+                        class="max-h-[90dvh] min-h-[90dvh] overflow-y-auto bg-gradient-to-r from-gray-50 to-gray-100" />
+                    <Panel_user_client_reviews v-if="panelselect === PanelType.CLIENT_REVIEW"
+                        class="max-h-[90dvh] min-h-[90dvh] overflow-y-auto bg-gradient-to-r from-gray-50 to-gray-100" />
                 </div>
             </div>
         </main>
-      </div>
+
     </div>
-    
-    <!-- Modal de suscripción flotante -->
-    <SubscriptionModal
-      :show="showSubscriptionModal"
-      :title="subscriptionModal.title"
-      :message="subscriptionModal.message"
-      :button-text="subscriptionModal.buttonText"
-      @close="handleModalClose"
-    />
-  </div>
 </template>
 
-<script setup lang="ts">
-import { ref, onMounted } from "vue";
-import Swal from "sweetalert2";
-import Navbar_panel from '@/common/Navbar_panel.vue';
-import Panel_user_client_reviews from "@/Modules/Panel_User_Professional/Panel_user_client_reviews.vue";
-import Panel_user_diarie from "@/Modules/Panel_User_Professional/Panel_user_diarie.vue";
-import Panel_user_perfil from "@/Modules/Panel_User_Professional/Panel_user_perfil.vue";
-import Panel_user_notifications from "@/Modules/Panel_User_Professional/notification/Panel_user_notifications.vue";
-import SubscriptionModal from '@/components/SubscriptionModal.vue';
-import { useAuthStore } from '@/store/auth.store';
-import { useSubscriptionGuard } from '@/composables/useSubscriptionGuard';
-
-// Enum para los paneles
-enum PanelType {
-  CLIENT_REVIEW = "client_review",
-  DIARIE = "diarie",
-  PERFIL = "perfil",
-  NOTIFICATIONS = "notifications"
-}
-
-// Stores
-const store = useAuthStore();
-const { 
-  showModal: showSubscriptionModal, 
-  modalData: subscriptionModal, 
-  checkSubscriptionAccess, 
-  closeModal 
-} = useSubscriptionGuard();
-
-// Estado
-const isOpen = ref(true);
-const panelselect = ref<PanelType>(PanelType.PERFIL);
-
-// Funciones
-const toggleSidebar = () => {
-  isOpen.value = !isOpen.value;
-};
-
-const showAlert = () => {
-  Swal.fire({
-    title: "¡Alerta!",
-    text: "¿Estás seguro de cerrar sesión?",
-    icon: "warning",
-    showCancelButton: true,
-    confirmButtonColor: "var(--blue-1)",
-    cancelButtonColor: "#d33",
-    confirmButtonText: "Sí",
-    cancelButtonText: "Cancelar"
-  }).then((result) => {
-    if (result.isConfirmed) {
-      store.close_session();
+<style scoped>
+@keyframes fadeIn {
+    from {
+        opacity: 0;
     }
-  });
-};
 
-const handleModalClose = () => {
-  closeModal();
-};
+    to {
+        opacity: 1;
+    }
+}
 
-// Verificación de suscripción al montar el componente
-onMounted(async () => {
-  await checkSubscriptionAccess();
-});
-</script>
+.animate-fade-in {
+    animation: fadeIn 0.5s ease-out forwards;
+}
 
-<style scoped>
-.menu-item-hover:hover {
-  background-color: rgba(255, 255, 255, 0.1);
+.menu-item-hover {
+    position: relative;
+    overflow: hidden;
 }
 
-.animate-fade-in {
-  animation: fadeIn 0.5s ease-in-out forwards;
+.menu-item-hover::after {
+    content: "";
+    position: absolute;
+    bottom: 0;
+    left: 0;
+    width: 100%;
+    height: 2px;
+    background-color: currentColor;
+    transform: scaleX(0);
+    transform-origin: right;
+    transition: transform 0.3s ease-out;
 }
 
-@keyframes fadeIn {
-  from {
-    opacity: 0;
-    transform: translateY(-10px);
-  }
-  to {
-    opacity: 1;
-    transform: translateY(0);
-  }
+.menu-item-hover:hover::after {
+    transform: scaleX(1);
+    transform-origin: left;
 }
-</style>
\ No newline at end of file
+</style>
diff --git a/launcher/gateway/src/app.module.ts b/launcher/gateway/src/app.module.ts
index e7c3b79..092edb3 100644
--- a/launcher/gateway/src/app.module.ts
+++ b/launcher/gateway/src/app.module.ts
@@ -7,7 +7,7 @@ import { ServeStaticModule } from '@nestjs/serve-static';
 import { join } from 'path';
 import { ReservationsModule } from './reservations/reservations.module';
 import { EmailsModule } from './emails/emails.module';
-import { SubscriptionModule } from './subscription/subscription.module';
+ 
  
 
 @Module({
@@ -19,7 +19,7 @@ import { SubscriptionModule } from './subscription/subscription.module';
     }),
     ReservationsModule,
     EmailsModule,
-    SubscriptionModule,
+
   ],
  
 })
diff --git a/launcher/gateway/src/auth/auth.controller.ts b/launcher/gateway/src/auth/auth.controller.ts
index d42e931..03daa30 100644
--- a/launcher/gateway/src/auth/auth.controller.ts
+++ b/launcher/gateway/src/auth/auth.controller.ts
@@ -1,64 +1,75 @@
-import { Body, Controller, ForbiddenException, Get, Inject, Param, Patch, Post, Query, UseGuards } from '@nestjs/common';
+import { Body, Controller, ForbiddenException, Get, Inject, Param, Patch, Post, Put, Query, Req, UseGuards } from '@nestjs/common';
 import { ClientProxy, RpcException } from '@nestjs/microservices';
 import { NATS_SERVICE } from 'src/config';
-import { catchError, throwError } from 'rxjs';
+import { LoginUserDto, RegisterPartnerDto, RegisterUserDto, SetStatusPartnerDto, setStatusUserDto } from './dto';
+import { catchError } from 'rxjs';
+import { throwError } from 'rxjs';
 import { AuthGuard } from 'src/guards/authGuards';
 import { Token, User } from './decorator';
 import { CurrentUser } from './interfaces/current-user.interfaces';
+import { PaginationDto } from 'src/commont/pagination.dto';
 
-// Interfaces (simplificadas para evitar errores de import)
-interface LoginUserDto { email: string; password: string; }
-interface RegisterUserDto { email: string; password: string; names: string; lastnames: string; }
-interface RegisterPartnerDto extends RegisterUserDto { document: string; phone: string; title: string; }
-interface PaginationDto { page?: number; limit?: number; }
-interface SetStatusPartnerDto { id: string; status: string; }
-interface setStatusUserDto { id: string; status: string; }
 
 @Controller('auth')
 export class AuthController {
-  constructor(@Inject(NATS_SERVICE) private readonly client: ClientProxy) {}
+  constructor(@Inject(NATS_SERVICE) private readonly client: ClientProxy) { }
 
   @Post('register')
   registerUser(@Body() RegisterUserDto: RegisterUserDto) {
-    return this.client.send('auth.register.user', RegisterUserDto).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+    return this.client.send('create.user.token.email', RegisterUserDto).pipe(
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 
   @Post('register-super-admin')
   registerSuperAdmin(@Body() RegisterUserDto: RegisterUserDto) {
     return this.client.send('auth-ms.create.user.superadmin', RegisterUserDto).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 
+
+  @Get('register/usertoken/:token')
+  registerUserToken(@Param('token') token: string) {
+    return this.client.send('confirm.register.user.token.email', { token }).pipe(
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
+    )
+  }
+
   @Post('registerpartner')
   registerPartner(@Body() RegisterPartnerDto: RegisterPartnerDto) {
     return this.client.send('auth.register.partner', RegisterPartnerDto).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 
   @Post('login')
   loginUser(@Body() LoginUserDto: LoginUserDto) {
     return this.client.send('auth.login.user', LoginUserDto).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
-
-  @Post('login-partner')
-  loginPartner(@Body() LoginUserDto: LoginUserDto) {
-    return this.client.send('auth.login.user', LoginUserDto).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
-    );
-  }
-
   @UseGuards(AuthGuard)
   @Get('verify')
   verifyUser(@User() user: CurrentUser, @Token() token: string) {
-    return this.client.send('auth.verify.user.data.token', token);
+    return this.client.send('auth.verify.user.data.token', token)
   }
 
+  /**
+   * @param token
+   * todo: options admin or super_admin
+   * 
+   */
   @Get('get-all-partner')
   @UseGuards(AuthGuard)
   get_all_partner(@User() user: CurrentUser, @Query() pagination: PaginationDto) {
@@ -66,10 +77,11 @@ export class AuthController {
       throw new ForbiddenException('Access denied');
     }
     return this.client.send('auth-ms.get.all.partner.pagination.admin', pagination).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
-
   @Get('panel-data-users')
   @UseGuards(AuthGuard)
   get_users_data(@User() user: CurrentUser) {
@@ -77,7 +89,9 @@ export class AuthController {
       throw new ForbiddenException('Access denied');
     }
     return this.client.send('auth-ms.information.users.admin', { id: user.id }).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 
@@ -88,7 +102,9 @@ export class AuthController {
       throw new ForbiddenException('Access denied');
     }
     return this.client.send('auth-ms.get.all.user.pagination.admin', pagination).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 
@@ -101,9 +117,14 @@ export class AuthController {
     if (body.status !== "USER" && body.status !== "DELETED_USER") {
       throw new ForbiddenException('el status no es ni professional ni eliminado');
     }
-    const sendData: setStatusUserDto = { id, status: body.status };
+    const sendData: setStatusUserDto = {
+      id,
+      status: body.status,
+    }
     return this.client.send('auth-ms.set.status.user.admin', sendData).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 
@@ -116,9 +137,14 @@ export class AuthController {
     if (body.status !== "USER_PARTNER" && body.status !== "DELETED_USER_PARTNER") {
       throw new ForbiddenException('el status no es ni partner ni eliminado');
     }
-    const sendData: SetStatusPartnerDto = { id, status: body.status };
+    const sendData: SetStatusPartnerDto = {
+      id,
+      status: body.status,
+    }
     return this.client.send('auth-ms.set.status.user.partner', sendData).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
+      catchError(error => {
+        return throwError(() => new RpcException(error));
+      })
     );
   }
 }
diff --git a/launcher/gateway/src/auth/auth.controller.ts.backup b/launcher/gateway/src/auth/auth.controller.ts.backup
deleted file mode 100644
index 088a8f8..0000000
--- a/launcher/gateway/src/auth/auth.controller.ts.backup
+++ /dev/null
@@ -1,161 +0,0 @@
-import { Body, Controller, ForbiddenException, Get, Inject, Param, Patch, Post, Put, Query, Req, UseGuards } from '@nestjs/common';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { NATS_SERVICE } from 'src/config';
-import { LoginUserDto, RegisterPartnerDto, RegisterUserDto, SetStatusPartnerDto, setStatusUserDto } from './dto';
-import { catchError } from 'rxjs';
-import { throwError } from 'rxjs';
-import { AuthGuard } from 'src/guards/authGuards';
-import { Token, User } from './decorator';
-import { CurrentUser } from './interfaces/current-user.interfaces';
-import { PaginationDto } from 'src/commont/pagination.dto';
-
-
-@Controller('auth')
-export class AuthController {
-  constructor(@Inject(NATS_SERVICE) private readonly client: ClientProxy) { }
-
-  @Post('register')
-  registerUser(@Body() RegisterUserDto: RegisterUserDto) {
-    return this.client.send('create.user.token.email', RegisterUserDto).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Post('register-super-admin')
-  registerSuperAdmin(@Body() RegisterUserDto: RegisterUserDto) {
-    return this.client.send('auth-ms.create.user.superadmin', RegisterUserDto).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-
-  @Get('register/usertoken/:token')
-  registerUserToken(@Param('token') token: string) {
-    return this.client.send('confirm.register.user.token.email', { token }).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    )
-  }
-
-  @Post('registerpartner')
-  registerPartner(@Body() RegisterPartnerDto: RegisterPartnerDto) {
-    return this.client.send('auth.register.partner', RegisterPartnerDto).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Post('login')
-  loginUser(@Body() LoginUserDto: LoginUserDto) {
-    return this.client.send('auth.register.user.login', LoginUserDto).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-  @UseGuards(AuthGuard)
-  @Get('verify')
-  verifyUser(@User() user: CurrentUser, @Token() token: string) {
-    return this.client.send('auth.verify.user.data.token', token)
-  }
-
-  /**
-   * @param token
-   * todo: options admin or super_admin
-   * 
-   */
-  @Get('get-all-partner')
-  @UseGuards(AuthGuard)
-  get_all_partner(@User() user: CurrentUser, @Query() pagination: PaginationDto) {
-    if (user.role !== 'SUPER_ADMIN' && user.role !== 'ADMIN') {
-      throw new ForbiddenException('Access denied');
-    }
-    return this.client.send('auth-ms.get.all.partner.pagination.admin', pagination).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-  @Get('panel-data-users')
-  @UseGuards(AuthGuard)
-  get_users_data(@User() user: CurrentUser) {
-    if (user.role !== 'SUPER_ADMIN' && user.role !== 'ADMIN') {
-      throw new ForbiddenException('Access denied');
-    }
-    return this.client.send('auth-ms.information.users.admin', { id: user.id }).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Get('get-all-users')
-  @UseGuards(AuthGuard)
-  get_all_users(@User() user: CurrentUser, @Query() pagination: PaginationDto) {
-    if (user.role !== 'SUPER_ADMIN' && user.role !== 'ADMIN') {
-      throw new ForbiddenException('Access denied');
-    }
-    return this.client.send('auth-ms.get.all.user.pagination.admin', pagination).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Patch('update-users/:id')
-  @UseGuards(AuthGuard)
-  update_user_status(@User() user: CurrentUser, @Param('id') id: string, @Body() body: { status: string }) {
-    if (user.role !== 'SUPER_ADMIN' && user.role !== 'ADMIN') {
-      throw new ForbiddenException('Access denied');
-    }
-    if (body.status !== "USER" && body.status !== "DELETED_USER") {
-      throw new ForbiddenException('el status no es ni professional ni eliminado');
-    }
-    const sendData: setStatusUserDto = {
-      id,
-      status: body.status,
-    }
-    return this.client.send('auth-ms.set.status.user.admin', sendData).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Patch('update-partner/:id')
-  @UseGuards(AuthGuard)
-  update_partner_status(@User() user: CurrentUser, @Param('id') id: string, @Body() body: { status: string }) {
-    if (user.role !== 'SUPER_ADMIN' && user.role !== 'ADMIN') {
-      throw new ForbiddenException('Access denied');
-    }
-    if (body.status !== "USER_PARTNER" && body.status !== "DELETED_USER_PARTNER") {
-      throw new ForbiddenException('el status no es ni partner ni eliminado');
-    }
-    const sendData: SetStatusPartnerDto = {
-      id,
-      status: body.status,
-    }
-    return this.client.send('auth-ms.set.status.user.partner', sendData).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-}
-
-  @Post("login-direct")
-  async loginDirect(@Body() loginDto: any) {
-    // Login directo via HTTP a auth-ms (puerto 3001)
-    const response = await fetch("http://auth-ms:3001/auth/login-http", {
-      method: "POST",
-      headers: {"Content-Type": "application/json"},
-      body: JSON.stringify(loginDto)
-    });
-    return response.json();
-  }
diff --git a/launcher/gateway/src/auth/dto/login-user.dto.ts b/launcher/gateway/src/auth/dto/login-user.dto.ts
index 315b0f8..8a02ed6 100644
--- a/launcher/gateway/src/auth/dto/login-user.dto.ts
+++ b/launcher/gateway/src/auth/dto/login-user.dto.ts
@@ -1,10 +1,12 @@
-import { IsEmail, IsString } from "class-validator";
+import { IsEmail, IsString, IsStrongPassword, Matches } from "class-validator";
 
 export class LoginUserDto {
     @IsString()
     @IsEmail()
     email: string;
-    
     @IsString()
+    @Matches(/^(?=.*[a-z])(?=.*[A-Z]).{8,}$/, {
+        message: 'La contraseña debe tener al menos 8 caracteres, una letra mayúscula y una letra minúscula',
+    })
     password: string;
-}
+}
\ No newline at end of file
diff --git a/launcher/gateway/src/emails/emails.module.ts b/launcher/gateway/src/emails/emails.module.ts
index 534ade7..bd70d78 100644
--- a/launcher/gateway/src/emails/emails.module.ts
+++ b/launcher/gateway/src/emails/emails.module.ts
@@ -3,15 +3,9 @@ import { EmailsController } from './emails.controller';
 import { NatsModule } from 'src/transport/nast.module';
 import { NotificationsController } from './notifications.controller';
 import { SupcriptionsController } from './supcription.controller';
-import { RemindersController } from './reminders.controller';
 
 @Module({
-  controllers: [
-    EmailsController,
-    NotificationsController,
-    SupcriptionsController,
-    RemindersController
-  ],
-  imports: [NatsModule]
+  controllers: [EmailsController,NotificationsController,SupcriptionsController],
+  imports:[NatsModule]
 })
-export class EmailsModule {}
\ No newline at end of file
+export class EmailsModule {}
diff --git a/launcher/gateway/src/emails/reminders.controller.ts b/launcher/gateway/src/emails/reminders.controller.ts
deleted file mode 100644
index e42c6ff..0000000
--- a/launcher/gateway/src/emails/reminders.controller.ts
+++ /dev/null
@@ -1,36 +0,0 @@
-import { Controller, Post, Get, Inject } from '@nestjs/common';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { catchError, throwError } from 'rxjs';
-import { NATS_SERVICE } from 'src/config';
-
-@Controller('reminders')
-export class RemindersController {
-  constructor(@Inject(NATS_SERVICE) private readonly client: ClientProxy) {}
-
-  @Post('send-daily')
-  async sendDailyReminders() {
-    return this.client.send('emails.reminders.send-daily', {}).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Get('status')
-  async getRemindersStatus() {
-    return this.client.send('emails.reminders.status', {}).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-
-  @Get('test-connection')
-  async testConnection() {
-    return this.client.send('emails.reminders.test-connection', {}).pipe(
-      catchError(error => {
-        return throwError(() => new RpcException(error));
-      })
-    );
-  }
-}
\ No newline at end of file
diff --git a/launcher/gateway/src/subscription/subscription.controller.ts b/launcher/gateway/src/subscription/subscription.controller.ts
deleted file mode 100644
index c76e719..0000000
--- a/launcher/gateway/src/subscription/subscription.controller.ts
+++ /dev/null
@@ -1,46 +0,0 @@
-import { Controller, Get, Post, Body, UseGuards } from '@nestjs/common';
-import { ClientProxy, Inject } from '@nestjs/microservices';
-import { AuthGuard } from '../auth/guards/auth.guard';
-import { User } from '../auth/decorators/user.decorator';
-import { CurrentUser } from '../auth/interfaces/current-user.interface';
-import { catchError, throwError } from 'rxjs';
-import { RpcException } from '@nestjs/microservices';
-
-@Controller('subscription')
-export class SubscriptionController {
-  constructor(
-    @Inject('NATS_SERVICE') private readonly client: ClientProxy,
-  ) {}
-
-  @UseGuards(AuthGuard)
-  @Get()
-  getUserSubscription(@User() user: CurrentUser) {
-    return this.client.send('auth.subscription.get', { userId: user.id }).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
-    );
-  }
-
-  @UseGuards(AuthGuard)
-  @Post('create')
-  createSubscription(@User() user: CurrentUser, @Body() body: any) {
-    const data = {
-      userId: user.id,
-      ...body
-    };
-    return this.client.send('auth.subscription.create', data).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
-    );
-  }
-
-  @UseGuards(AuthGuard)
-  @Post('renew')
-  renewSubscription(@User() user: CurrentUser, @Body() body: any) {
-    const data = {
-      userId: user.id,
-      ...body
-    };
-    return this.client.send('auth.subscription.renew', data).pipe(
-      catchError(error => throwError(() => new RpcException(error)))
-    );
-  }
-}
\ No newline at end of file
diff --git a/launcher/gateway/src/subscription/subscription.module.ts b/launcher/gateway/src/subscription/subscription.module.ts
deleted file mode 100644
index a82ead8..0000000
--- a/launcher/gateway/src/subscription/subscription.module.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { Module } from '@nestjs/common';
-import { SubscriptionController } from './subscription.controller';
-import { ClientsModule, Transport } from '@nestjs/microservices';
-
-@Module({
-  imports: [
-    ClientsModule.register([
-      {
-        name: 'NATS_SERVICE',
-        transport: Transport.NATS,
-        options: {
-          servers: process.env.NATS_SERVERS?.split(',') || ['nats://localhost:4222'],
-        },
-      },
-    ]),
-  ],
-  controllers: [SubscriptionController],
-})
-export class SubscriptionModule {}
\ No newline at end of file
diff --git a/launcher/package-lock.json b/launcher/package-lock.json
deleted file mode 100644
index 5a9c02c..0000000
--- a/launcher/package-lock.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "name": "launcher",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {}
-}
diff --git a/launcher/reservations-ms/package-lock.json b/launcher/reservations-ms/package-lock.json
index 32a21a0..5185377 100644
--- a/launcher/reservations-ms/package-lock.json
+++ b/launcher/reservations-ms/package-lock.json
@@ -15,14 +15,13 @@
         "@nestjs/mapped-types": "*",
         "@nestjs/microservices": "^11.0.12",
         "@nestjs/platform-express": "^11.0.1",
-        "@nestjs/schedule": "^6.0.0",
-        "@prisma/client": "^6.15.0",
-        "@types/cron": "^2.0.1",
+        "@prisma/client": "^6.5.0",
         "class-transformer": "^0.5.1",
         "class-validator": "^0.14.1",
         "dotenv": "^16.4.7",
         "joi": "^17.13.3",
         "nats": "^2.29.3",
+        "prisma": "^6.5.0",
         "reflect-metadata": "^0.2.2",
         "rxjs": "^7.8.1"
       },
@@ -44,7 +43,6 @@
         "globals": "^15.14.0",
         "jest": "^29.7.0",
         "prettier": "^3.4.2",
-        "prisma": "^6.15.0",
         "source-map-support": "^0.5.21",
         "supertest": "^7.0.0",
         "ts-jest": "^29.2.5",
@@ -759,6 +757,406 @@
         "@jridgewell/sourcemap-codec": "^1.4.10"
       }
     },
+    "node_modules/@esbuild/aix-ppc64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.1.tgz",
+      "integrity": "sha512-kfYGy8IdzTGy+z0vFGvExZtxkFlA4zAxgKEahG9KE1ScBjpQnFsNOX8KTU5ojNru5ed5CVoJYXFtoxaq5nFbjQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "aix"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/android-arm": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.1.tgz",
+      "integrity": "sha512-dp+MshLYux6j/JjdqVLnMglQlFu+MuVeNrmT5nk6q07wNhCdSnB7QZj+7G8VMUGh1q+vj2Bq8kRsuyA00I/k+Q==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/android-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.1.tgz",
+      "integrity": "sha512-50tM0zCJW5kGqgG7fQ7IHvQOcAn9TKiVRuQ/lN0xR+T2lzEFvAi1ZcS8DiksFcEpf1t/GYOeOfCAgDHFpkiSmA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/android-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.1.tgz",
+      "integrity": "sha512-GCj6WfUtNldqUzYkN/ITtlhwQqGWu9S45vUXs7EIYf+7rCiiqH9bCloatO9VhxsL0Pji+PF4Lz2XXCES+Q8hDw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/darwin-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.1.tgz",
+      "integrity": "sha512-5hEZKPf+nQjYoSr/elb62U19/l1mZDdqidGfmFutVUjjUZrOazAtwK+Kr+3y0C/oeJfLlxo9fXb1w7L+P7E4FQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/darwin-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.1.tgz",
+      "integrity": "sha512-hxVnwL2Dqs3fM1IWq8Iezh0cX7ZGdVhbTfnOy5uURtao5OIVCEyj9xIzemDi7sRvKsuSdtCAhMKarxqtlyVyfA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/freebsd-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.1.tgz",
+      "integrity": "sha512-1MrCZs0fZa2g8E+FUo2ipw6jw5qqQiH+tERoS5fAfKnRx6NXH31tXBKI3VpmLijLH6yriMZsxJtaXUyFt/8Y4A==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/freebsd-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.1.tgz",
+      "integrity": "sha512-0IZWLiTyz7nm0xuIs0q1Y3QWJC52R8aSXxe40VUxm6BB1RNmkODtW6LHvWRrGiICulcX7ZvyH6h5fqdLu4gkww==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-arm": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.1.tgz",
+      "integrity": "sha512-NdKOhS4u7JhDKw9G3cY6sWqFcnLITn6SqivVArbzIaf3cemShqfLGHYMx8Xlm/lBit3/5d7kXvriTUGa5YViuQ==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.1.tgz",
+      "integrity": "sha512-jaN3dHi0/DDPelk0nLcXRm1q7DNJpjXy7yWaWvbfkPvI+7XNSc/lDOnCLN7gzsyzgu6qSAmgSvP9oXAhP973uQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-ia32": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.1.tgz",
+      "integrity": "sha512-OJykPaF4v8JidKNGz8c/q1lBO44sQNUQtq1KktJXdBLn1hPod5rE/Hko5ugKKZd+D2+o1a9MFGUEIUwO2YfgkQ==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-loong64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.1.tgz",
+      "integrity": "sha512-nGfornQj4dzcq5Vp835oM/o21UMlXzn79KobKlcs3Wz9smwiifknLy4xDCLUU0BWp7b/houtdrgUz7nOGnfIYg==",
+      "cpu": [
+        "loong64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-mips64el": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.1.tgz",
+      "integrity": "sha512-1osBbPEFYwIE5IVB/0g2X6i1qInZa1aIoj1TdL4AaAb55xIIgbg8Doq6a5BzYWgr+tEcDzYH67XVnTmUzL+nXg==",
+      "cpu": [
+        "mips64el"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-ppc64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.1.tgz",
+      "integrity": "sha512-/6VBJOwUf3TdTvJZ82qF3tbLuWsscd7/1w+D9LH0W/SqUgM5/JJD0lrJ1fVIfZsqB6RFmLCe0Xz3fmZc3WtyVg==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-riscv64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.1.tgz",
+      "integrity": "sha512-nSut/Mx5gnilhcq2yIMLMe3Wl4FK5wx/o0QuuCLMtmJn+WeWYoEGDN1ipcN72g1WHsnIbxGXd4i/MF0gTcuAjQ==",
+      "cpu": [
+        "riscv64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-s390x": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.1.tgz",
+      "integrity": "sha512-cEECeLlJNfT8kZHqLarDBQso9a27o2Zd2AQ8USAEoGtejOrCYHNtKP8XQhMDJMtthdF4GBmjR2au3x1udADQQQ==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.1.tgz",
+      "integrity": "sha512-xbfUhu/gnvSEg+EGovRc+kjBAkrvtk38RlerAzQxvMzlB4fXpCFCeUAYzJvrnhFtdeyVCDANSjJvOvGYoeKzFA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/netbsd-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.1.tgz",
+      "integrity": "sha512-O96poM2XGhLtpTh+s4+nP7YCCAfb4tJNRVZHfIE7dgmax+yMP2WgMd2OecBuaATHKTHsLWHQeuaxMRnCsH8+5g==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/netbsd-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.1.tgz",
+      "integrity": "sha512-X53z6uXip6KFXBQ+Krbx25XHV/NCbzryM6ehOAeAil7X7oa4XIq+394PWGnwaSQ2WRA0KI6PUO6hTO5zeF5ijA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/openbsd-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.1.tgz",
+      "integrity": "sha512-Na9T3szbXezdzM/Kfs3GcRQNjHzM6GzFBeU1/6IV/npKP5ORtp9zbQjvkDJ47s6BCgaAZnnnu/cY1x342+MvZg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/openbsd-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.1.tgz",
+      "integrity": "sha512-T3H78X2h1tszfRSf+txbt5aOp/e7TAz3ptVKu9Oyir3IAOFPGV6O9c2naym5TOriy1l0nNf6a4X5UXRZSGX/dw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/sunos-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.1.tgz",
+      "integrity": "sha512-2H3RUvcmULO7dIE5EWJH8eubZAI4xw54H1ilJnRNZdeo8dTADEZ21w6J22XBkXqGJbe0+wnNJtw3UXRoLJnFEg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "sunos"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/win32-arm64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.1.tgz",
+      "integrity": "sha512-GE7XvrdOzrb+yVKB9KsRMq+7a2U/K5Cf/8grVFRAGJmfADr/e/ODQ134RK2/eeHqYV5eQRFxb1hY7Nr15fv1NQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/win32-ia32": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.1.tgz",
+      "integrity": "sha512-uOxSJCIcavSiT6UnBhBzE8wy3n0hOkJsBOzy7HDAuTDE++1DJMRRVCPGisULScHL+a/ZwdXPpXD3IyFKjA7K8A==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/win32-x64": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.1.tgz",
+      "integrity": "sha512-Y1EQdcfwMSeQN/ujR5VayLOJ1BHaK+ssyk0AEzPjC+t1lITgsnccPqFjb6V+LsTp/9Iov4ysfjxLaGJ9RPtkVg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
     "node_modules/@eslint-community/eslint-utils": {
       "version": "4.5.1",
       "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.5.1.tgz",
@@ -2530,19 +2928,6 @@
         "@nestjs/core": "^11.0.0"
       }
     },
-    "node_modules/@nestjs/schedule": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/@nestjs/schedule/-/schedule-6.0.0.tgz",
-      "integrity": "sha512-aQySMw6tw2nhitELXd3EiRacQRgzUKD9mFcUZVOJ7jPLqIBvXOyvRWLsK9SdurGA+jjziAlMef7iB5ZEFFoQpw==",
-      "license": "MIT",
-      "dependencies": {
-        "cron": "4.3.0"
-      },
-      "peerDependencies": {
-        "@nestjs/common": "^10.0.0 || ^11.0.0",
-        "@nestjs/core": "^10.0.0 || ^11.0.0"
-      }
-    },
     "node_modules/@nestjs/schematics": {
       "version": "11.0.2",
       "resolved": "https://registry.npmjs.org/@nestjs/schematics/-/schematics-11.0.2.tgz",
@@ -2760,9 +3145,9 @@
       }
     },
     "node_modules/@prisma/client": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-6.15.0.tgz",
-      "integrity": "sha512-wR2LXUbOH4cL/WToatI/Y2c7uzni76oNFND7+23ypLllBmIS8e3ZHhO+nud9iXSXKFt1SoM3fTZvHawg63emZw==",
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-6.5.0.tgz",
+      "integrity": "sha512-M6w1Ql/BeiGoZmhMdAZUXHu5sz5HubyVcKukbLs3l0ELcQb8hTUJxtGEChhv4SVJ0QJlwtLnwOLgIRQhpsm9dw==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "engines": {
@@ -2782,66 +3167,58 @@
       }
     },
     "node_modules/@prisma/config": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.15.0.tgz",
-      "integrity": "sha512-KMEoec9b2u6zX0EbSEx/dRpx1oNLjqJEBZYyK0S3TTIbZ7GEGoVyGyFRk4C72+A38cuPLbfQGQvgOD+gBErKlA==",
-      "devOptional": true,
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.5.0.tgz",
+      "integrity": "sha512-sOH/2Go9Zer67DNFLZk6pYOHj+rumSb0VILgltkoxOjYnlLqUpHPAN826vnx8HigqnOCxj9LRhT6U7uLiIIWgw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "c12": "3.1.0",
-        "deepmerge-ts": "7.1.5",
-        "effect": "3.16.12",
-        "empathic": "2.0.0"
+        "esbuild": ">=0.12 <1",
+        "esbuild-register": "3.6.0"
       }
     },
     "node_modules/@prisma/debug": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.15.0.tgz",
-      "integrity": "sha512-y7cSeLuQmyt+A3hstAs6tsuAiVXSnw9T55ra77z0nbNkA8Lcq9rNcQg6PI00by/+WnE/aMRJ/W7sZWn2cgIy1g==",
-      "devOptional": true,
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.5.0.tgz",
+      "integrity": "sha512-fc/nusYBlJMzDmDepdUtH9aBsJrda2JNErP9AzuHbgUEQY0/9zQYZdNlXmKoIWENtio+qarPNe/+DQtrX5kMcQ==",
       "license": "Apache-2.0"
     },
     "node_modules/@prisma/engines": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.15.0.tgz",
-      "integrity": "sha512-opITiR5ddFJ1N2iqa7mkRlohCZqVSsHhRcc29QXeldMljOf4FSellLT0J5goVb64EzRTKcIDeIsJBgmilNcKxA==",
-      "devOptional": true,
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.5.0.tgz",
+      "integrity": "sha512-FVPQYHgOllJklN9DUyujXvh3hFJCY0NX86sDmBErLvoZjy2OXGiZ5FNf3J/C4/RZZmCypZBYpBKEhx7b7rEsdw==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.15.0",
-        "@prisma/engines-version": "6.15.0-5.85179d7826409ee107a6ba334b5e305ae3fba9fb",
-        "@prisma/fetch-engine": "6.15.0",
-        "@prisma/get-platform": "6.15.0"
+        "@prisma/debug": "6.5.0",
+        "@prisma/engines-version": "6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60",
+        "@prisma/fetch-engine": "6.5.0",
+        "@prisma/get-platform": "6.5.0"
       }
     },
     "node_modules/@prisma/engines-version": {
-      "version": "6.15.0-5.85179d7826409ee107a6ba334b5e305ae3fba9fb",
-      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.15.0-5.85179d7826409ee107a6ba334b5e305ae3fba9fb.tgz",
-      "integrity": "sha512-a/46aK5j6L3ePwilZYEgYDPrhBQ/n4gYjLxT5YncUTJJNRnTCVjPF86QdzUOLRdYjCLfhtZp9aum90W0J+trrg==",
-      "devOptional": true,
+      "version": "6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60",
+      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60.tgz",
+      "integrity": "sha512-iK3EmiVGFDCmXjSpdsKGNqy9hOdLnvYBrJB61far/oP03hlIxrb04OWmDjNTwtmZ3UZdA5MCvI+f+3k2jPTflQ==",
       "license": "Apache-2.0"
     },
     "node_modules/@prisma/fetch-engine": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.15.0.tgz",
-      "integrity": "sha512-xcT5f6b+OWBq6vTUnRCc7qL+Im570CtwvgSj+0MTSGA1o9UDSKZ/WANvwtiRXdbYWECpyC3CukoG3A04VTAPHw==",
-      "devOptional": true,
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.5.0.tgz",
+      "integrity": "sha512-3LhYA+FXP6pqY8FLHCjewyE8pGXXJ7BxZw2rhPq+CZAhvflVzq4K8Qly3OrmOkn6wGlz79nyLQdknyCG2HBTuA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.15.0",
-        "@prisma/engines-version": "6.15.0-5.85179d7826409ee107a6ba334b5e305ae3fba9fb",
-        "@prisma/get-platform": "6.15.0"
+        "@prisma/debug": "6.5.0",
+        "@prisma/engines-version": "6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60",
+        "@prisma/get-platform": "6.5.0"
       }
     },
     "node_modules/@prisma/get-platform": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.15.0.tgz",
-      "integrity": "sha512-Jbb+Xbxyp05NSR1x2epabetHiXvpO8tdN2YNoWoA/ZsbYyxxu/CO/ROBauIFuMXs3Ti+W7N7SJtWsHGaWte9Rg==",
-      "devOptional": true,
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.5.0.tgz",
+      "integrity": "sha512-xYcvyJwNMg2eDptBYFqFLUCfgi+wZLcj6HDMsj0Qw0irvauG4IKmkbywnqwok0B+k+W+p+jThM2DKTSmoPCkzw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.15.0"
+        "@prisma/debug": "6.5.0"
       }
     },
     "node_modules/@sec-ant/readable-stream": {
@@ -2912,13 +3289,6 @@
         "@sinonjs/commons": "^3.0.0"
       }
     },
-    "node_modules/@standard-schema/spec": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
-      "integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/@swc/cli": {
       "version": "0.6.0",
       "resolved": "https://registry.npmjs.org/@swc/cli/-/cli-0.6.0.tgz",
@@ -3354,16 +3724,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/cron": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/@types/cron/-/cron-2.0.1.tgz",
-      "integrity": "sha512-WHa/1rtNtD2Q/H0+YTTZoty+/5rcE66iAFX2IY+JuUoOACsevYyFkSYu/2vdw+G5LrmO7Lxowrqm0av4k3qWNQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/luxon": "*",
-        "@types/node": "*"
-      }
-    },
     "node_modules/@types/eslint": {
       "version": "9.6.1",
       "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz",
@@ -3496,12 +3856,6 @@
         "@types/node": "*"
       }
     },
-    "node_modules/@types/luxon": {
-      "version": "3.7.1",
-      "resolved": "https://registry.npmjs.org/@types/luxon/-/luxon-3.7.1.tgz",
-      "integrity": "sha512-H3iskjFIAn5SlJU7OuxUmTEpebK6TKB8rxZShDslBMZJ5u9S//KM1sbdAisiSrqwLQncVjnpi2OK2J51h+4lsg==",
-      "license": "MIT"
-    },
     "node_modules/@types/methods": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/@types/methods/-/methods-1.1.4.tgz",
@@ -4860,35 +5214,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/c12": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/c12/-/c12-3.1.0.tgz",
-      "integrity": "sha512-uWoS8OU1MEIsOv8p/5a82c3H31LsWVR5qiyXVfBNOzfffjUWtPnhAb4BYI2uG2HfGmZmFjCtui5XNWaps+iFuw==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "chokidar": "^4.0.3",
-        "confbox": "^0.2.2",
-        "defu": "^6.1.4",
-        "dotenv": "^16.6.1",
-        "exsolve": "^1.0.7",
-        "giget": "^2.0.0",
-        "jiti": "^2.4.2",
-        "ohash": "^2.0.11",
-        "pathe": "^2.0.3",
-        "perfect-debounce": "^1.0.0",
-        "pkg-types": "^2.2.0",
-        "rc9": "^2.1.2"
-      },
-      "peerDependencies": {
-        "magicast": "^0.3.5"
-      },
-      "peerDependenciesMeta": {
-        "magicast": {
-          "optional": true
-        }
-      }
-    },
     "node_modules/cacheable-lookup": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-7.0.0.tgz",
@@ -5026,7 +5351,7 @@
       "version": "4.0.3",
       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
       "integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
-      "devOptional": true,
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "readdirp": "^4.0.1"
@@ -5064,16 +5389,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/citty": {
-      "version": "0.1.6",
-      "resolved": "https://registry.npmjs.org/citty/-/citty-0.1.6.tgz",
-      "integrity": "sha512-tskPPKEs8D2KPafUypv2gxwJP8h/OaJmC82QQGGDQcHvXX43xF2VDACcJVmZ0EuSxkpO9Kc4MlrA3q0+FG58AQ==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "consola": "^3.2.3"
-      }
-    },
     "node_modules/cjs-module-lexer": {
       "version": "1.4.3",
       "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
@@ -5326,13 +5641,6 @@
         "typedarray": "^0.0.6"
       }
     },
-    "node_modules/confbox": {
-      "version": "0.2.2",
-      "resolved": "https://registry.npmjs.org/confbox/-/confbox-0.2.2.tgz",
-      "integrity": "sha512-1NB+BKqhtNipMsov4xI/NnhCKp9XG9NamYp5PVm9klAT0fsrNPjaFICsCFhNhwZJKNh7zB/3q8qXz0E9oaMNtQ==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/consola": {
       "version": "3.4.2",
       "resolved": "https://registry.npmjs.org/consola/-/consola-3.4.2.tgz",
@@ -5471,25 +5779,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/cron": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/cron/-/cron-4.3.0.tgz",
-      "integrity": "sha512-ciiYNLfSlF9MrDqnbMdRWFiA6oizSF7kA1osPP9lRzNu0Uu+AWog1UKy7SkckiDY2irrNjeO6qLyKnXC8oxmrw==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/luxon": "~3.6.0",
-        "luxon": "~3.6.0"
-      },
-      "engines": {
-        "node": ">=18.x"
-      }
-    },
-    "node_modules/cron/node_modules/@types/luxon": {
-      "version": "3.6.2",
-      "resolved": "https://registry.npmjs.org/@types/luxon/-/luxon-3.6.2.tgz",
-      "integrity": "sha512-R/BdP7OxEMc44l2Ex5lSXHoIXTB2JLNa3y2QISIbr58U/YcsffyQrYW//hZSdrfxrjRZj3GcUoxMPGdO8gSYuw==",
-      "license": "MIT"
-    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
@@ -5583,16 +5872,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/deepmerge-ts": {
-      "version": "7.1.5",
-      "resolved": "https://registry.npmjs.org/deepmerge-ts/-/deepmerge-ts-7.1.5.tgz",
-      "integrity": "sha512-HOJkrhaYsweh+W+e74Yn7YStZOilkoPb6fycpwNLKzSPtruFs48nYis0zy5yJz1+ktUhHxoRDJ27RQAWLIJVJw==",
-      "devOptional": true,
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=16.0.0"
-      }
-    },
     "node_modules/defaults": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/defaults/-/defaults-3.0.0.tgz",
@@ -5616,13 +5895,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/defu": {
-      "version": "6.1.4",
-      "resolved": "https://registry.npmjs.org/defu/-/defu-6.1.4.tgz",
-      "integrity": "sha512-mEQCMmwJu317oSz8CwdIOdwf3xMif1ttiM8LTufzc3g6kR+9Pe236twL8j3IYT1F7GfRgGcW6MWxzZjLIkuHIg==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/delayed-stream": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
@@ -5642,13 +5914,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/destr": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/destr/-/destr-2.0.5.tgz",
-      "integrity": "sha512-ugFTXCtDZunbzasqBxrK93Ik/DRYsO6S/fedkWEMKqt04xZ4csmnmwGDBAb07QWNaGMAmnTIemsYZCksjATwsA==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/destroy": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
@@ -5701,9 +5966,9 @@
       }
     },
     "node_modules/dotenv": {
-      "version": "16.6.1",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
-      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
+      "version": "16.4.7",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
+      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
@@ -5748,17 +6013,6 @@
       "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
       "license": "MIT"
     },
-    "node_modules/effect": {
-      "version": "3.16.12",
-      "resolved": "https://registry.npmjs.org/effect/-/effect-3.16.12.tgz",
-      "integrity": "sha512-N39iBk0K71F9nb442TLbTkjl24FLUzuvx2i1I2RsEAQsdAdUTuUoW0vlfUXgkMTUOnYqKnWcFfqw4hK4Pw27hg==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "@standard-schema/spec": "^1.0.0",
-        "fast-check": "^3.23.1"
-      }
-    },
     "node_modules/ejs": {
       "version": "3.1.10",
       "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
@@ -5802,16 +6056,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/empathic": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/empathic/-/empathic-2.0.0.tgz",
-      "integrity": "sha512-i6UzDscO/XfAcNYD75CfICkmfLedpyPDdozrLMmQc5ORaQcdMoc21OnlEylMIqI7U8eniKrPMxxtj8k0vhmJhA==",
-      "devOptional": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/encodeurl": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
@@ -5898,6 +6142,58 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/esbuild": {
+      "version": "0.25.1",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.1.tgz",
+      "integrity": "sha512-BGO5LtrGC7vxnqucAe/rmvKdJllfGaYWdyABvyMoXQlfYMb2bbRuReWR5tEGE//4LcNJj9XrkovTqNYRFZHAMQ==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "bin": {
+        "esbuild": "bin/esbuild"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "optionalDependencies": {
+        "@esbuild/aix-ppc64": "0.25.1",
+        "@esbuild/android-arm": "0.25.1",
+        "@esbuild/android-arm64": "0.25.1",
+        "@esbuild/android-x64": "0.25.1",
+        "@esbuild/darwin-arm64": "0.25.1",
+        "@esbuild/darwin-x64": "0.25.1",
+        "@esbuild/freebsd-arm64": "0.25.1",
+        "@esbuild/freebsd-x64": "0.25.1",
+        "@esbuild/linux-arm": "0.25.1",
+        "@esbuild/linux-arm64": "0.25.1",
+        "@esbuild/linux-ia32": "0.25.1",
+        "@esbuild/linux-loong64": "0.25.1",
+        "@esbuild/linux-mips64el": "0.25.1",
+        "@esbuild/linux-ppc64": "0.25.1",
+        "@esbuild/linux-riscv64": "0.25.1",
+        "@esbuild/linux-s390x": "0.25.1",
+        "@esbuild/linux-x64": "0.25.1",
+        "@esbuild/netbsd-arm64": "0.25.1",
+        "@esbuild/netbsd-x64": "0.25.1",
+        "@esbuild/openbsd-arm64": "0.25.1",
+        "@esbuild/openbsd-x64": "0.25.1",
+        "@esbuild/sunos-x64": "0.25.1",
+        "@esbuild/win32-arm64": "0.25.1",
+        "@esbuild/win32-ia32": "0.25.1",
+        "@esbuild/win32-x64": "0.25.1"
+      }
+    },
+    "node_modules/esbuild-register": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/esbuild-register/-/esbuild-register-3.6.0.tgz",
+      "integrity": "sha512-H2/S7Pm8a9CL1uhp9OvjwrBh5Pvx0H8qVOxNu8Wed9Y7qv56MPtq+GGM8RJpq6glYJn9Wspr8uw7l55uyinNeg==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^4.3.4"
+      },
+      "peerDependencies": {
+        "esbuild": ">=0.12 <1"
+      }
+    },
     "node_modules/escalade": {
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
@@ -6294,13 +6590,6 @@
       "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
       "license": "MIT"
     },
-    "node_modules/exsolve": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/exsolve/-/exsolve-1.0.7.tgz",
-      "integrity": "sha512-VO5fQUzZtI6C+vx4w/4BWJpg3s/5l+6pRQEHzFRM8WFi4XffSP1Z+4qi7GbjWbvRQEbdIco5mIMq+zX4rPuLrw==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/ext-list": {
       "version": "2.2.2",
       "resolved": "https://registry.npmjs.org/ext-list/-/ext-list-2.2.2.tgz",
@@ -6356,29 +6645,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/fast-check": {
-      "version": "3.23.2",
-      "resolved": "https://registry.npmjs.org/fast-check/-/fast-check-3.23.2.tgz",
-      "integrity": "sha512-h5+1OzzfCC3Ef7VbtKdcv7zsstUQwUDlYpUTvjeUsJAssPgLn7QzbboPtL5ro04Mq0rPOsMzl7q5hIbRs2wD1A==",
-      "devOptional": true,
-      "funding": [
-        {
-          "type": "individual",
-          "url": "https://github.com/sponsors/dubzzz"
-        },
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/fast-check"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "pure-rand": "^6.1.0"
-      },
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
@@ -6929,7 +7195,6 @@
       "version": "2.3.3",
       "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
       "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
-      "dev": true,
       "hasInstallScript": true,
       "license": "MIT",
       "optional": true,
@@ -7029,24 +7294,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/giget": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/giget/-/giget-2.0.0.tgz",
-      "integrity": "sha512-L5bGsVkxJbJgdnwyuheIunkGatUF/zssUoxxjACCseZYAVbaqdh9Tsmmlkl8vYan09H7sbvKt4pS8GqKLBrEzA==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "citty": "^0.1.6",
-        "consola": "^3.4.0",
-        "defu": "^6.1.4",
-        "node-fetch-native": "^1.6.6",
-        "nypm": "^0.6.0",
-        "pathe": "^2.0.3"
-      },
-      "bin": {
-        "giget": "dist/cli.mjs"
-      }
-    },
     "node_modules/glob": {
       "version": "11.0.1",
       "resolved": "https://registry.npmjs.org/glob/-/glob-11.0.1.tgz",
@@ -8362,16 +8609,6 @@
         "url": "https://github.com/chalk/supports-color?sponsor=1"
       }
     },
-    "node_modules/jiti": {
-      "version": "2.5.1",
-      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.5.1.tgz",
-      "integrity": "sha512-twQoecYPiVA5K/h6SxtORw/Bs3ar+mLUtoPSc7iMXzQzK8d7eJ/R09wmTwAjiamETn1cXYPGfNnu7DMoHgu12w==",
-      "devOptional": true,
-      "license": "MIT",
-      "bin": {
-        "jiti": "lib/jiti-cli.mjs"
-      }
-    },
     "node_modules/joi": {
       "version": "17.13.3",
       "resolved": "https://registry.npmjs.org/joi/-/joi-17.13.3.tgz",
@@ -8737,15 +8974,6 @@
         "yallist": "^3.0.2"
       }
     },
-    "node_modules/luxon": {
-      "version": "3.6.1",
-      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.6.1.tgz",
-      "integrity": "sha512-tJLxrKJhO2ukZ5z0gyjY1zPh3Rh88Ej9P7jNrZiHMUXHae1yvI2imgOZtL1TO8TW6biMMKfTtAOoEJANgtWBMQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      }
-    },
     "node_modules/magic-string": {
       "version": "0.30.17",
       "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
@@ -9127,13 +9355,6 @@
         "lodash": "^4.17.21"
       }
     },
-    "node_modules/node-fetch-native": {
-      "version": "1.6.7",
-      "resolved": "https://registry.npmjs.org/node-fetch-native/-/node-fetch-native-1.6.7.tgz",
-      "integrity": "sha512-g9yhqoedzIUm0nTnTqAQvueMPVOuIY16bqgAJJC8XOOubYFNwz6IER9qs0Gq2Xd0+CecCKFjtdDTMA4u4xG06Q==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/node-int64": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
@@ -9184,26 +9405,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/nypm": {
-      "version": "0.6.1",
-      "resolved": "https://registry.npmjs.org/nypm/-/nypm-0.6.1.tgz",
-      "integrity": "sha512-hlacBiRiv1k9hZFiphPUkfSQ/ZfQzZDzC+8z0wL3lvDAOUu/2NnChkKuMoMjNur/9OpKuz2QsIeiPVN0xM5Q0w==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "citty": "^0.1.6",
-        "consola": "^3.4.2",
-        "pathe": "^2.0.3",
-        "pkg-types": "^2.2.0",
-        "tinyexec": "^1.0.1"
-      },
-      "bin": {
-        "nypm": "dist/cli.mjs"
-      },
-      "engines": {
-        "node": "^14.16.0 || >=16.10.0"
-      }
-    },
     "node_modules/object-assign": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
@@ -9225,13 +9426,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/ohash": {
-      "version": "2.0.11",
-      "resolved": "https://registry.npmjs.org/ohash/-/ohash-2.0.11.tgz",
-      "integrity": "sha512-RdR9FQrFwNBNXAr4GixM8YaRZRJ5PUWbKYbE5eOsrwAjJW0q2REGcf79oYPsLyskQCZG1PLN+S/K1V00joZAoQ==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/on-finished": {
       "version": "2.4.1",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
@@ -9527,13 +9721,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/pathe": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
-      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/peek-readable": {
       "version": "5.4.2",
       "resolved": "https://registry.npmjs.org/peek-readable/-/peek-readable-5.4.2.tgz",
@@ -9555,13 +9742,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/perfect-debounce": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/perfect-debounce/-/perfect-debounce-1.0.0.tgz",
-      "integrity": "sha512-xCy9V055GLEqoFaHoC1SoLIaLmWctgCUaBaWxDZ7/Zx4CTyX7cJQLJOok/orfjZAh9kEYpjJa4d0KcJmCbctZA==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/picocolors": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
@@ -9671,18 +9851,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/pkg-types": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-2.3.0.tgz",
-      "integrity": "sha512-SIqCzDRg0s9npO5XQ3tNZioRY1uK06lA41ynBC1YmFTmnY6FjUjVt6s4LoADmwoig1qqD0oK8h1p/8mlMx8Oig==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "confbox": "^0.2.2",
-        "exsolve": "^1.0.7",
-        "pathe": "^2.0.3"
-      }
-    },
     "node_modules/pluralize": {
       "version": "8.0.0",
       "resolved": "https://registry.npmjs.org/pluralize/-/pluralize-8.0.0.tgz",
@@ -9761,15 +9929,14 @@
       }
     },
     "node_modules/prisma": {
-      "version": "6.15.0",
-      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.15.0.tgz",
-      "integrity": "sha512-E6RCgOt+kUVtjtZgLQDBJ6md2tDItLJNExwI0XJeBc1FKL+Vwb+ovxXxuok9r8oBgsOXBA33fGDuE/0qDdCWqQ==",
-      "devOptional": true,
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.5.0.tgz",
+      "integrity": "sha512-yUGXmWqv5F4PByMSNbYFxke/WbnyTLjnJ5bKr8fLkcnY7U5rU9rUTh/+Fja+gOrRxEgtCbCtca94IeITj4j/pg==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/config": "6.15.0",
-        "@prisma/engines": "6.15.0"
+        "@prisma/config": "6.5.0",
+        "@prisma/engines": "6.5.0"
       },
       "bin": {
         "prisma": "build/index.js"
@@ -9777,6 +9944,9 @@
       "engines": {
         "node": ">=18.18"
       },
+      "optionalDependencies": {
+        "fsevents": "2.3.3"
+      },
       "peerDependencies": {
         "typescript": ">=5.1.0"
       },
@@ -9833,7 +10003,7 @@
       "version": "6.1.0",
       "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
       "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
-      "devOptional": true,
+      "dev": true,
       "funding": [
         {
           "type": "individual",
@@ -9941,17 +10111,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/rc9": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/rc9/-/rc9-2.1.2.tgz",
-      "integrity": "sha512-btXCnMmRIBINM2LDZoEmOogIZU7Qe7zn4BpomSKZ/ykbLObuBdvG+mFq11DL6fjH1DRwHhrlgtYWG96bJiC7Cg==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "defu": "^6.1.4",
-        "destr": "^2.0.3"
-      }
-    },
     "node_modules/react-is": {
       "version": "18.3.1",
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
@@ -9984,7 +10143,7 @@
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
       "integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
-      "devOptional": true,
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 14.18.0"
@@ -11195,13 +11354,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/tinyexec": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-1.0.1.tgz",
-      "integrity": "sha512-5uC6DDlmeqiOwCPmK9jMSdOuZTh8bU39Ys6yidB+UTt5hfZUPGAypSgFRiEp+jbi9qH40BLDvy85jIU88wKSqw==",
-      "devOptional": true,
-      "license": "MIT"
-    },
     "node_modules/tmp": {
       "version": "0.0.33",
       "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
diff --git a/launcher/reservations-ms/package.json b/launcher/reservations-ms/package.json
index 4e4d793..607aed4 100644
--- a/launcher/reservations-ms/package.json
+++ b/launcher/reservations-ms/package.json
@@ -27,14 +27,13 @@
     "@nestjs/mapped-types": "*",
     "@nestjs/microservices": "^11.0.12",
     "@nestjs/platform-express": "^11.0.1",
-    "@nestjs/schedule": "^6.0.0",
-    "@prisma/client": "^6.15.0",
-    "@types/cron": "^2.0.1",
+    "@prisma/client": "^6.5.0",
     "class-transformer": "^0.5.1",
     "class-validator": "^0.14.1",
     "dotenv": "^16.4.7",
     "joi": "^17.13.3",
     "nats": "^2.29.3",
+    "prisma": "^6.5.0",
     "reflect-metadata": "^0.2.2",
     "rxjs": "^7.8.1"
   },
@@ -56,7 +55,6 @@
     "globals": "^15.14.0",
     "jest": "^29.7.0",
     "prettier": "^3.4.2",
-    "prisma": "^6.15.0",
     "source-map-support": "^0.5.21",
     "supertest": "^7.0.0",
     "ts-jest": "^29.2.5",
diff --git a/launcher/reservations-ms/prisma/schema.prisma b/launcher/reservations-ms/prisma/schema.prisma
index a3a8805..d8847a8 100644
--- a/launcher/reservations-ms/prisma/schema.prisma
+++ b/launcher/reservations-ms/prisma/schema.prisma
@@ -1,3 +1,5 @@
+ 
+
 generator client {
   provider = "prisma-client-js"
 }
@@ -14,6 +16,7 @@ enum reservationStatus {
   COMPLETED
 }
 
+
 model ScheduleData {
   id       String        @id @default(uuid())
   officeId String        @unique()
@@ -25,7 +28,7 @@ model SheduleItem {
   day        String
   openTime   String
   closeTime  String
-  scheduleId String
+  scheduleId String // Clave foránea
   active     Boolean      @default(true)
   schedule   ScheduleData @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
 }
@@ -39,11 +42,9 @@ model Reservation {
   profecionalId  String
   price          Float
   payment        String
-  status         reservationStatus @default(ACTIVE)
-  calification   Calification?
-  calificationId String?
-  reminder_sent    Boolean   @default(false)
-  reminder_sent_at DateTime?
+  status         reservationStatus       @default(ACTIVE)
+  calification   Calification? // relación 1:1 sin definir fields/references aquí
+  calificationId String? // clave foránea opcional
 }
 
 model Calification {
@@ -60,4 +61,4 @@ model Calification {
   comments                  String?
   reservation               Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
   reservationId             String      @unique
-}
\ No newline at end of file
+}
diff --git a/launcher/reservations-ms/src/app.module.ts b/launcher/reservations-ms/src/app.module.ts
index 0c3f21d..b4bbcf3 100644
--- a/launcher/reservations-ms/src/app.module.ts
+++ b/launcher/reservations-ms/src/app.module.ts
@@ -1,13 +1,8 @@
 import { Module } from '@nestjs/common';
-import { ScheduleModule } from '@nestjs/schedule';
 import { ReservationModule } from './reservation/reservation.module';
-import { ReminderService } from './reminder/reminder.service';
-import { ReminderController } from './reminder/reminder.controller';
-import { ReminderCronService } from './reminder/reminder-cron.service';
+
 
 @Module({
-  imports: [ReservationModule, ScheduleModule.forRoot()],
-  controllers: [ReminderController],
-  providers: [ReminderService, ReminderCronService],
+  imports:[ReservationModule]
 })
 export class AppModule {}
diff --git a/launcher/reservations-ms/src/reminder/reminder-cron.service.ts b/launcher/reservations-ms/src/reminder/reminder-cron.service.ts
deleted file mode 100644
index 5b0c027..0000000
--- a/launcher/reservations-ms/src/reminder/reminder-cron.service.ts
+++ /dev/null
@@ -1,49 +0,0 @@
-import { Injectable, Logger } from '@nestjs/common';
-import { Cron } from '@nestjs/schedule';
-import { ReminderService } from './reminder.service';
-
-@Injectable()
-export class ReminderCronService {
-  private readonly logger = new Logger(ReminderCronService.name);
-
-  constructor(private reminderService: ReminderService) {}
-
-  @Cron('0 9 * * *', { timeZone: 'America/Bogota' })
-  async sendDailyReminders() {
-    this.logger.log('Iniciando envío de recordatorios diarios...');
-
-    try {
-      const appointments =
-        await this.reminderService.getAppointmentsForTomorrow();
-      this.logger.log(`Encontradas ${appointments.length} citas para recordar`);
-
-      let successCount = 0;
-
-      for (const appointment of appointments) {
-        try {
-          // Solo marcar como enviado - el envío real se haría aquí
-          await this.reminderService.markReminderSent(appointment.id);
-          successCount++;
-          this.logger.log(
-            `Recordatorio procesado para reserva ${appointment.id}`,
-          );
-        } catch (error) {
-          this.logger.error(
-            `Error procesando reserva ${appointment.id}:`,
-            error,
-          );
-        }
-      }
-
-      this.logger.log(`Procesados: ${successCount} recordatorios`);
-      return { sent: successCount, failed: 0 };
-    } catch (error) {
-      this.logger.error('Error general:', error);
-      throw error;
-    }
-  }
-
-  async sendRemindersManually() {
-    return await this.sendDailyReminders();
-  }
-}
diff --git a/launcher/reservations-ms/src/reminder/reminder.controller.ts b/launcher/reservations-ms/src/reminder/reminder.controller.ts
deleted file mode 100644
index cb3e009..0000000
--- a/launcher/reservations-ms/src/reminder/reminder.controller.ts
+++ /dev/null
@@ -1,69 +0,0 @@
-import { Controller } from '@nestjs/common';
-import { MessagePattern } from '@nestjs/microservices';
-import { ReminderService } from './reminder.service';
-
-@Controller()
-export class ReminderController {
-    constructor(private readonly reminderService: ReminderService) {}
-
-    @MessagePattern('get.appointments.for.tomorrow')
-    async getAppointmentsForTomorrow() {
-        try {
-            const appointments = await this.reminderService.getAppointmentsForTomorrow();
-            
-            return {
-                status: 200,
-                data: appointments,
-                count: appointments.length
-            };
-        } catch (error) {
-            return {
-                status: 400,
-                message: error.message,
-                data: []
-            };
-        }
-    }
-
-    @MessagePattern('mark.reminder.sent')
-    async markReminderSent(data: { reservationId: string }) {
-        try {
-            await this.reminderService.markReminderSent(data.reservationId);
-            return {
-                status: 200,
-                message: 'Recordatorio marcado como enviado'
-            };
-        } catch (error) {
-            return {
-                status: 400,
-                message: error.message
-            };
-        }
-    }
-
-    @MessagePattern('log.reminder.attempt')
-    async logReminderAttempt(data: { 
-        reservationId: string; 
-        email: string; 
-        status: 'SUCCESS' | 'FAILED'; 
-        errorMessage?: string; 
-    }) {
-        try {
-            await this.reminderService.logReminderAttempt(
-                data.reservationId, 
-                data.email, 
-                data.status, 
-                data.errorMessage
-            );
-            return {
-                status: 200,
-                message: 'Log guardado'
-            };
-        } catch (error) {
-            return {
-                status: 400,
-                message: error.message
-            };
-        }
-    }
-}
\ No newline at end of file
diff --git a/launcher/reservations-ms/src/reminder/reminder.service.ts b/launcher/reservations-ms/src/reminder/reminder.service.ts
deleted file mode 100644
index 3c4d998..0000000
--- a/launcher/reservations-ms/src/reminder/reminder.service.ts
+++ /dev/null
@@ -1,64 +0,0 @@
-import { Injectable } from '@nestjs/common';
-import { PrismaClient } from '@prisma/client';
-
-@Injectable()
-export class ReminderService extends PrismaClient {
-  async onModuleInit() {
-    await this.$connect();
-  }
-
-  async onModuleDestroy() {
-    await this.$disconnect();
-  }
-
-  // Obtener citas que necesitan recordatorio para mañana
-  async getAppointmentsForTomorrow() {
-    const tomorrow = new Date();
-    tomorrow.setDate(tomorrow.getDate() + 1);
-
-    const startOfTomorrow = new Date(tomorrow);
-    startOfTomorrow.setHours(0, 0, 0, 0);
-
-    const endOfTomorrow = new Date(tomorrow);
-    endOfTomorrow.setHours(23, 59, 59, 999);
-
-    return await this.reservation.findMany({
-      where: {
-        date: {
-          gte: startOfTomorrow,
-          lte: endOfTomorrow,
-        },
-        reminder_sent: false,
-        status: 'ACTIVE',
-      },
-    });
-  }
-
-  // Marcar recordatorio como enviado
-  async markReminderSent(reservationId: string) {
-    return await this.reservation.update({
-      where: { id: reservationId },
-      data: {
-        reminder_sent: true,
-        reminder_sent_at: new Date(),
-      },
-    });
-  }
-
-  // Log de intento de recordatorio
-  async logReminderAttempt(
-    reservationId: string,
-    email: string,
-    status: 'SUCCESS' | 'FAILED',
-    errorMessage?: string,
-  ) {
-    try {
-      await this.$executeRaw`
-                INSERT INTO reminder_logs (reservation_id, patient_email, status, error_message)
-                VALUES (${reservationId}, ${email}, ${status}, ${errorMessage || null})
-            `;
-    } catch (error) {
-      console.error('Error guardando log:', error);
-    }
-  }
-}
diff --git a/launcher/restart-all.sh b/launcher/restart-all.sh
new file mode 100755
index 0000000..daf4c17
--- /dev/null
+++ b/launcher/restart-all.sh
@@ -0,0 +1,70 @@
+#!/bin/bash
+
+echo "🔧 Reiniciando DocVisual completamente..."
+echo "========================================"
+
+# 1. Detener todo
+echo "1️⃣ Deteniendo servicios..."
+docker compose down
+
+# 2. Limpiar volúmenes de PostgreSQL
+echo "2️⃣ Limpiando base de datos..."
+docker volume rm launcher_pgdata 2>/dev/null || true
+
+# 3. Iniciar servicios en orden
+echo "3️⃣ Iniciando PostgreSQL y NATS..."
+docker compose up -d postgresdb nats
+
+echo "⏳ Esperando que PostgreSQL esté listo (20 segundos)..."
+sleep 20
+
+# 4. Iniciar microservicios
+echo "4️⃣ Iniciando microservicios..."
+docker compose up -d auth-ms user-ms partner-ms emails-ms reservations-ms
+
+echo "⏳ Esperando que los microservicios estén listos (15 segundos)..."
+sleep 15
+
+# 5. Iniciar gateway
+echo "5️⃣ Iniciando Gateway..."
+docker compose up -d gateway
+
+echo "⏳ Esperando que el gateway esté listo (10 segundos)..."
+sleep 10
+
+# 6. Iniciar frontend
+echo "6️⃣ Iniciando Frontend..."
+docker compose up -d frontend
+
+# 7. Verificar servicios
+echo -e "\n📊 Estado de los servicios:"
+docker compose ps
+
+# 8. Probar gateway
+echo -e "\n🔌 Probando Gateway..."
+if curl -s http://localhost:3000/files/example > /dev/null 2>&1; then
+    echo "✅ Gateway respondiendo"
+else
+    echo "❌ Gateway no responde"
+fi
+
+# 9. Crear usuario de prueba
+echo -e "\n👤 Creando usuario de prueba..."
+sleep 5
+curl -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d '{
+    "email": "admin@docvisual.com",
+    "password": "Admin1234",
+    "names": "Admin",
+    "lastnames": "DocVisual"
+  }' \
+  -w "\nHTTP Status: %{http_code}\n"
+
+echo -e "\n✅ Sistema reiniciado completamente"
+echo "🌐 Frontend: http://localhost:8080"
+echo "🔧 API: http://localhost:3000"
+echo ""
+echo "📧 Usuario de prueba:"
+echo "   Email: admin@docvisual.com"
+echo "   Password: Admin1234"
diff --git a/launcher/restore-auth-complete.sh b/launcher/restore-auth-complete.sh
deleted file mode 100755
index 9355c6a..0000000
--- a/launcher/restore-auth-complete.sh
+++ /dev/null
@@ -1,348 +0,0 @@
-#!/bin/bash
-
-echo "🔧 Restaurando Auth Service COMPLETO con validación real"
-echo "======================================================"
-
-# Restaurar service completo con TODOS los métodos
-docker compose exec -T auth-ms sh << 'RESTORE_EOF'
-# Backup del service actual
-cp src/auth/auth.service.ts src/auth/auth.service.ts.incomplete-backup
-
-# Crear service COMPLETO con validación real de contraseñas
-cat > src/auth/auth.service.ts << 'COMPLETE_SERVICE'
-import { Injectable, OnModuleInit, Inject } from '@nestjs/common';
-import { PrismaClient, Role } from '@prisma/client';
-import { ClientProxy, RpcException } from '@nestjs/microservices';
-import { JwtService } from '@nestjs/jwt';
-import * as bcrypt from 'bcrypt';
-import { NATS_SERVICE } from 'src/config';
-
-interface JwtPayload {
-  id: string;
-  email: string;
-  names: string;
-  lastnames: string;
-  role: string;
-}
-
-@Injectable()
-export class AuthService extends PrismaClient implements OnModuleInit {
-  constructor(
-    private readonly jwtservice: JwtService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {
-    super();
-  }
-
-  async onModuleInit() {
-    await this.$connect();
-    console.log('🔌 AuthService connected to database');
-  }
-
-  async singJwt(payload: JwtPayload) {
-    return this.jwtservice.sign(payload);
-  }
-
-  async registerUser(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.USER
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'USER'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async registerPartner(registerPartnerDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerPartnerDto;
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El partner ya existe'
-        });
-      }
-
-      const newPartner = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.USER_PARTNER
-        }
-      });
-
-      const { password: _, ...rest } = newPartner;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'USER_PARTNER'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async CreateSuperAdmin(registerUserDto: any) {
-    try {
-      const { email, names, password, lastnames } = registerUserDto;
-      const userAdmin = await this.user.findFirst({
-        where: { role: Role.SUPER_ADMIN }
-      });
-
-      if (userAdmin) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Solo puede existir un super admin'
-        });
-      }
-
-      const existingUser = await this.user.findUnique({
-        where: { email }
-      });
-
-      if (existingUser) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'El usuario ya existe'
-        });
-      }
-
-      const newUser = await this.user.create({
-        data: {
-          email,
-          password: bcrypt.hashSync(password, 10),
-          names,
-          lastnames,
-          role: Role.SUPER_ADMIN
-        }
-      });
-
-      const { password: _, ...rest } = newUser;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'SUPER_ADMIN'
-      };
-
-      return {
-        user: rest,
-        token: await this.singJwt(userForToken)
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  // *** MÉTODO LOGIN COMPLETO CON VALIDACIÓN REAL ***
-  async LoginUser(loginUserDto: any) {
-    try {
-      console.log("🔍 LoginUser called with:", loginUserDto);
-      
-      const { email, password } = loginUserDto;
-      const user = await this.user.findUnique({
-        where: { email }
-      });
-
-      console.log("👤 User found:", user ? `${user.names} (${user.email})` : 'No user found');
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Usuario o contraseña no válida'
-        });
-      }
-
-      console.log("🔐 Verifying password...");
-      const isPasswordValid = bcrypt.compareSync(password, user.password);
-      console.log("🔐 Password valid:", isPasswordValid);
-
-      if (!isPasswordValid) {
-        throw new RpcException({
-          statusCode: 400,
-          message: 'Correo o contraseña inválidos'
-        });
-      }
-
-      const { password: _, ...rest } = user;
-      const userForToken: JwtPayload = {
-        id: rest.id,
-        email: rest.email,
-        names: rest.names,
-        lastnames: rest.lastnames,
-        role: rest.role || 'USER'
-      };
-
-      console.log("✅ Login successful, generating token...");
-      const token = await this.singJwt(userForToken);
-
-      return {
-        user: rest,
-        token
-      };
-    } catch (error) {
-      console.error("❌ Login error:", error.message);
-      throw new RpcException({
-        statusCode: 400,
-        message: error.message
-      });
-    }
-  }
-
-  async verifyToken(token: string) {
-    try {
-      const decoded = this.jwtservice.verify(token, {
-        secret: process.env.JWT_SECRET || 'EstoEsUnStringSeguroParaJWT2024'
-      });
-      return {
-        user: decoded,
-        token: await this.singJwt(decoded),
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 401,
-        message: 'Invalid token'
-      });
-    }
-  }
-
-  async verifyUserEmail(email: string) {
-    try {
-      const user = await this.user.findUnique({
-        where: { email },
-        select: { id: true, email: true, names: true, lastnames: true }
-      });
-      return {
-        status: 200,
-        data: !!user
-      };
-    } catch (error) {
-      return {
-        status: 500,
-        data: false
-      };
-    }
-  }
-
-  async get_data_basic_user(id: string) {
-    try {
-      const user = await this.user.findFirst({
-        where: { id },
-        select: { names: true, lastnames: true, email: true }
-      });
-
-      if (!user) {
-        throw new RpcException({
-          statusCode: 401,
-          message: 'No existe el usuario'
-        });
-      }
-
-      return {
-        status: 200,
-        data: user
-      };
-    } catch (error) {
-      throw new RpcException({
-        statusCode: 500,
-        message: error.message
-      });
-    }
-  }
-}
-COMPLETE_SERVICE
-
-echo "✅ Service restaurado con validación real de contraseñas"
-RESTORE_EOF
-
-# Reiniciar para aplicar cambios
-echo -e "\n🔄 Reiniciando auth-ms..."
-docker compose restart auth-ms
-
-# Esperar compilación
-echo "⏳ Esperando compilación (15 segundos)..."
-sleep 15
-
-# Verificar compilación
-echo -e "\n✅ Verificando compilación:"
-compilation_logs=$(docker compose logs auth-ms --tail=5 2>&1)
-if echo "$compilation_logs" | grep -q "Found 0 errors"; then
-    echo "✅ Compilación exitosa"
-    
-    if echo "$compilation_logs" | grep -q "connected"; then
-        echo "✅ Base de datos conectada"
-    fi
-    
-    # Verificar que NATS está registrado
-    sleep 5
-    nats_check=$(curl -s http://localhost:8222/connz | grep -c "auth-ms" || echo "0")
-    if [ "$nats_check" -gt "0" ]; then
-        echo "✅ Auth-MS registrado en NATS"
-    else
-        echo "⚠️  Verificando registro NATS..."
-        docker compose restart auth-ms
-        sleep 10
-    fi
-    
-else
-    echo "❌ Errores de compilación:"
-    echo "$compilation_logs" | grep -i error
-fi
-
-echo -e "\n🎯 Auth-MS restaurado con validación completa de usuarios y contraseñas"
-echo "El login ahora verifica correctamente contra la base de datos"
\ No newline at end of file
diff --git a/launcher/src/cron/reminder-cron.service.ts b/launcher/src/cron/reminder-cron.service.ts
deleted file mode 100644
index 98ac8c5..0000000
--- a/launcher/src/cron/reminder-cron.service.ts
+++ /dev/null
@@ -1,132 +0,0 @@
-import { Injectable, Logger, Inject } from '@nestjs/common';
-import { Cron } from '@nestjs/schedule';
-import { ClientProxy } from '@nestjs/microservices';
-import { firstValueFrom } from 'rxjs';
-import { EmailService } from '../email/services/email.service.service';
-import { NATS_SERVICE } from '../config';
-
-@Injectable()
-export class ReminderCronService {
-  private readonly logger = new Logger(ReminderCronService.name);
-
-  constructor(
-    private emailService: EmailService,
-    @Inject(NATS_SERVICE) private readonly client: ClientProxy,
-  ) {}
-
-  @Cron('0 9 * * *', { timeZone: 'America/Bogota' })
-  async sendDailyReminders() {
-    this.logger.log('Iniciando envío de recordatorios diarios...');
-
-    try {
-      const appointmentsResponse = await firstValueFrom(
-        this.client.send('get.appointments.for.tomorrow', {})
-      );
-
-      if (appointmentsResponse.status !== 200) {
-        throw new Error('Error obteniendo citas');
-      }
-
-      const reservations = appointmentsResponse.data;
-      this.logger.log(`Encontradas ${reservations.length} citas para recordar`);
-
-      let successCount = 0;
-      let failureCount = 0;
-
-      for (const reservation of reservations) {
-        try {
-          await this.sendReminderEmail(reservation);
-          
-          await firstValueFrom(
-            this.client.send('mark.reminder.sent', { 
-              reservationId: reservation.id 
-            })
-          );
-
-          successCount++;
-        } catch (error) {
-          this.logger.error(`Error en reserva ${reservation.id}:`, error);
-          failureCount++;
-        }
-      }
-
-      this.logger.log(`Enviados: ${successCount}, Fallidos: ${failureCount}`);
-      return { sent: successCount, failed: failureCount };
-      
-    } catch (error) {
-      this.logger.error('Error general:', error);
-      throw error;
-    }
-  }
-
-  private async sendReminderEmail(reservation: any) {
-    const userData = await this.getUserData(reservation.userId);
-    const professionalData = await this.getProfessionalData(reservation.profecionalId, reservation.officeId);
-
-    const appointmentDate = new Date(reservation.date);
-    const formattedDate = appointmentDate.toLocaleDateString('es-CO', {
-      weekday: 'long',
-      year: 'numeric',
-      month: 'long',
-      day: 'numeric'
-    });
-    
-    const formattedTime = appointmentDate.toLocaleTimeString('es-CO', {
-      hour: '2-digit',
-      minute: '2-digit',
-      hour12: true
-    });
-
-    const reminderHtml = this.emailService.generateReminderEmailHtml({
-      patientName: userData.names || 'Usuario',
-      professionalName: professionalData.data?.name || 'Profesional',
-      appointmentDate: formattedDate,
-      appointmentTime: formattedTime,
-      location: professionalData.data?.offices?.[0]?.description || 'Consulte dirección',
-      officeName: professionalData.data?.name || 'DocVisual',
-      paymentMethod: reservation.payment
-    });
-
-    await this.emailService.sendReminderEmail(
-      userData.email,
-      'Recordatorio: Tu cita es mañana - DocVisual',
-      reminderHtml
-    );
-
-    this.logger.log(`Recordatorio enviado a: ${userData.email}`);
-  }
-
-  private async getUserData(userId: string) {
-    try {
-      const userData = await firstValueFrom(
-        this.client.send('get.user.by.id', { id: userId })
-      );
-      return userData.data;
-    } catch (error) {
-      return { names: 'Usuario', email: 'h2comunicacion2018@gmail.com' };
-    }
-  }
-
-  private async getProfessionalData(profecionalId: string, officeId: string) {
-    try {
-      const professionalData = await firstValueFrom(
-        this.client.send('get.id.office.and.partner', { 
-          id: profecionalId, 
-          idOffice: officeId 
-        })
-      );
-      return professionalData;
-    } catch (error) {
-      return { 
-        data: { 
-          name: 'Profesional DocVisual', 
-          offices: [{ description: 'Consulte dirección' }]
-        } 
-      };
-    }
-  }
-
-  async sendRemindersManually() {
-    return await this.sendDailyReminders();
-  }
-}
\ No newline at end of file
diff --git a/launcher/test-complete.sh b/launcher/test-complete.sh
new file mode 100755
index 0000000..48f9cce
--- /dev/null
+++ b/launcher/test-complete.sh
@@ -0,0 +1,87 @@
+#!/bin/bash
+
+echo "🔧 Prueba Completa del Sistema"
+echo "=============================="
+
+# 1. Verificar compilación
+echo "1️⃣ Verificando compilación de auth-ms..."
+if docker compose logs auth-ms --tail=5 | grep -q "Found 0 errors"; then
+    echo "✅ Sin errores de compilación"
+else
+    echo "❌ Hay errores - verificando..."
+    docker compose logs auth-ms --tail=20 | grep error
+    echo "Intentando corregir..."
+    docker compose exec auth-ms sh -c "sed -i 's/this\.User\./this.user./g' src/auth/auth.service.ts"
+    docker compose restart auth-ms
+    sleep 15
+fi
+
+# 2. Verificar que el microservicio está activo
+echo -e "\n2️⃣ Verificando microservicio..."
+if docker compose logs auth-ms --tail=10 | grep -q "Nest microservice successfully started"; then
+    echo "✅ Microservicio activo"
+else
+    echo "⚠️  Reiniciando microservicio..."
+    docker compose restart auth-ms
+    sleep 15
+fi
+
+# 3. Crear usuario nuevo
+echo -e "\n3️⃣ Creando usuario de prueba..."
+timestamp=$(date +%s)
+email="test${timestamp}@docvisual.com"
+password="Test1234"
+
+register=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\",
+    \"names\": \"Test\",
+    \"lastnames\": \"User\"
+  }" \
+  -w "\nSTATUS:%{http_code}")
+
+reg_status=$(echo "$register" | grep "STATUS:" | cut -d: -f2)
+
+if [ "$reg_status" = "201" ] || [ "$reg_status" = "200" ]; then
+    echo "✅ Usuario creado: $email"
+    
+    # 4. Intentar login
+    echo -e "\n4️⃣ Probando login..."
+    sleep 3
+    
+    login=$(curl -s -X POST http://localhost:3000/auth/login \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"$password\"
+      }" \
+      -w "\nSTATUS:%{http_code}")
+    
+    login_status=$(echo "$login" | grep "STATUS:" | cut -d: -f2)
+    login_body=$(echo "$login" | grep -v "STATUS:")
+    
+    if [ "$login_status" = "201" ] || [ "$login_status" = "200" ]; then
+        echo "🎉 ¡LOGIN EXITOSO!"
+        echo "$login_body" | python3 -m json.tool
+        echo -e "\n✅ SISTEMA COMPLETAMENTE FUNCIONAL"
+        echo "================================"
+        echo "📧 Email: $email"
+        echo "🔑 Password: $password"
+        echo "🌐 URL: http://localhost:8080"
+        echo "================================"
+    else
+        echo "❌ Login falló (Status: $login_status)"
+        echo "Respuesta: $login_body"
+        
+        # Debug
+        echo -e "\n📋 Debug:"
+        docker compose logs auth-ms --tail=5 | grep -i error
+        docker compose logs gateway --tail=5 | grep -i error
+    fi
+else
+    echo "❌ No se pudo crear usuario (Status: $reg_status)"
+    echo "$register" | grep -v "STATUS:"
+fi
+
diff --git a/launcher/test-final-login.sh b/launcher/test-final-login.sh
new file mode 100755
index 0000000..9fd954d
--- /dev/null
+++ b/launcher/test-final-login.sh
@@ -0,0 +1,60 @@
+#!/bin/bash
+
+echo "🧪 Prueba Final de Login"
+echo "======================="
+
+# 1. Crear usuario nuevo
+timestamp=$(date +%s)
+email="final${timestamp}@test.com"
+password="Final1234"
+
+echo "1️⃣ Creando usuario: $email"
+register=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\",
+    \"names\": \"Final\",
+    \"lastnames\": \"Test\"
+  }")
+
+if echo "$register" | grep -q "token"; then
+    echo "✅ Usuario registrado"
+    token=$(echo "$register" | python3 -c "import sys, json; print(json.load(sys.stdin).get('token', '')[:20]+'...')" 2>/dev/null)
+    echo "Token: $token"
+    
+    # 2. Esperar un poco
+    sleep 3
+    
+    # 3. Intentar login
+    echo -e "\n2️⃣ Probando login..."
+    login=$(curl -s -X POST http://localhost:3000/auth/login \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"$password\"
+      }")
+    
+    if echo "$login" | grep -q "token"; then
+        echo "🎉 ¡¡¡LOGIN EXITOSO!!!"
+        echo "================================"
+        echo "$login" | python3 -m json.tool
+        echo "================================"
+        echo "✅ SISTEMA COMPLETAMENTE FUNCIONAL"
+        echo "📧 Email: $email"
+        echo "🔑 Password: $password"
+        echo "🌐 Abre http://localhost:8080 y usa estas credenciales"
+        echo "================================"
+    else
+        echo "❌ Login falló:"
+        echo "$login"
+        
+        # Debug
+        echo -e "\n�� Verificando logs..."
+        docker compose logs auth-ms --tail=10 | grep -i "🔵\|🔴\|LoginUser"
+    fi
+else
+    echo "❌ No se pudo registrar el usuario:"
+    echo "$register"
+fi
+
diff --git a/launcher/test-login-final.sh b/launcher/test-login-final.sh
new file mode 100755
index 0000000..2a5faba
--- /dev/null
+++ b/launcher/test-login-final.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+echo "🧪 Prueba final del sistema de login"
+echo "===================================="
+
+# Crear usuario nuevo
+timestamp=$(date +%s)
+email="final${timestamp}@test.com"
+password="Final1234"
+
+echo "1️⃣ Registrando: $email"
+register=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\",
+    \"names\": \"Final\",
+    \"lastnames\": \"Test\"
+  }")
+
+if echo "$register" | grep -q "token"; then
+    echo "✅ Registro exitoso"
+    
+    sleep 2
+    
+    echo -e "\n2️⃣ Probando login..."
+    login=$(curl -s -X POST http://localhost:3000/auth/login \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"$password\"
+      }")
+    
+    if echo "$login" | grep -q "token"; then
+        echo "✅ ¡LOGIN EXITOSO!"
+        echo "$login" | python3 -m json.tool
+        echo -e "\n🎉 Sistema funcionando correctamente"
+        echo "🌐 Puedes usar estas credenciales en http://localhost:8080"
+        echo "   Email: $email"
+        echo "   Password: $password"
+    else
+        echo "❌ Login falló:"
+        echo "$login"
+    fi
+else
+    echo "❌ Registro falló:"
+    echo "$register"
+fi
+
diff --git a/launcher/verify-fix.sh b/launcher/verify-fix.sh
new file mode 100755
index 0000000..46d14fc
--- /dev/null
+++ b/launcher/verify-fix.sh
@@ -0,0 +1,95 @@
+#!/bin/bash
+
+echo "🔧 Verificando corrección del sistema"
+echo "====================================="
+
+# 1. Verificar que no hay errores de compilación
+echo "1️⃣ Verificando compilación de auth-ms..."
+docker compose logs auth-ms --tail=30 | grep -i "error" > /tmp/errors.log
+if [ -s /tmp/errors.log ]; then
+    echo "❌ Hay errores de compilación:"
+    cat /tmp/errors.log
+else
+    echo "✅ No hay errores de compilación"
+fi
+
+# 2. Verificar que el microservicio está iniciado
+echo -e "\n2️⃣ Verificando inicio del microservicio..."
+if docker compose logs auth-ms --tail=10 | grep -q "Nest microservice successfully started"; then
+    echo "✅ Microservicio iniciado correctamente"
+else
+    echo "❌ Microservicio no iniciado"
+    echo "Reiniciando..."
+    docker compose restart auth-ms
+    sleep 10
+fi
+
+# 3. Crear usuario de prueba
+echo -e "\n3️⃣ Creando usuario de prueba..."
+timestamp=$(date +%s)
+email="working${timestamp}@test.com"
+password="Working123"
+
+register=$(curl -s -X POST http://localhost:3000/auth/register \
+  -H "Content-Type: application/json" \
+  -d "{
+    \"email\": \"$email\",
+    \"password\": \"$password\",
+    \"names\": \"Working\",
+    \"lastnames\": \"Test\"
+  }" \
+  -w "\nSTATUS:%{http_code}")
+
+status=$(echo "$register" | grep "STATUS:" | cut -d: -f2)
+
+if [ "$status" = "201" ] || [ "$status" = "200" ]; then
+    echo "✅ Usuario registrado: $email"
+    
+    # 4. Probar login
+    echo -e "\n4️⃣ Probando login..."
+    sleep 2
+    
+    login=$(curl -s -X POST http://localhost:3000/auth/login \
+      -H "Content-Type: application/json" \
+      -d "{
+        \"email\": \"$email\",
+        \"password\": \"$password\"
+      }" \
+      -w "\nSTATUS:%{http_code}")
+    
+    login_status=$(echo "$login" | grep "STATUS:" | cut -d: -f2)
+    login_body=$(echo "$login" | grep -v "STATUS:")
+    
+    if [ "$login_status" = "201" ] || [ "$login_status" = "200" ]; then
+        echo "✅ ¡LOGIN EXITOSO!"
+        echo "$login_body" | python3 -m json.tool 2>/dev/null || echo "$login_body"
+        echo -e "\n🎉 ¡SISTEMA FUNCIONANDO CORRECTAMENTE!"
+        echo "📧 Credenciales de prueba:"
+        echo "   Email: $email"
+        echo "   Password: $password"
+        echo "🌐 URL: http://localhost:8080"
+    else
+        echo "❌ Login falló (Status: $login_status)"
+        echo "Respuesta: $login_body"
+    fi
+else
+    echo "❌ Registro falló (Status: $status)"
+fi
+
+# 5. Verificar suscripciones NATS
+echo -e "\n5️⃣ Verificando suscripciones NATS..."
+subs=$(curl -s http://localhost:8222/connz | python3 -c "
+import sys, json
+data = json.load(sys.stdin)
+total = sum([conn.get('subscriptions', 0) for conn in data.get('connections', [])])
+print(total)" 2>/dev/null)
+
+echo "Total de suscripciones activas: $subs"
+if [ "$subs" -gt "10" ]; then
+    echo "✅ Servicios conectados correctamente"
+else
+    echo "⚠️  Pocas suscripciones, algunos servicios pueden no estar conectados"
+fi
+
+rm -f /tmp/errors.log
+
